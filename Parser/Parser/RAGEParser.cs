//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RAGE.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RAGEParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, Auto=6, Break=7, Case=8, Char=9, 
		Const=10, Continue=11, Default=12, Do=13, Double=14, Else=15, Enum=16, 
		Float=17, For=18, Goto=19, If=20, Int=21, Long=22, Return=23, Short=24, 
		Signed=25, Static=26, String=27, Struct=28, Switch=29, Unsigned=30, Void=31, 
		While=32, LeftParen=33, RightParen=34, LeftBracket=35, RightBracket=36, 
		LeftBrace=37, RightBrace=38, Less=39, LessEqual=40, Greater=41, GreaterEqual=42, 
		LeftShift=43, RightShift=44, Plus=45, PlusPlus=46, Minus=47, MinusMinus=48, 
		Star=49, Div=50, Mod=51, And=52, Or=53, AndAnd=54, OrOr=55, Caret=56, 
		Not=57, Tilde=58, Question=59, Colon=60, Semi=61, Comma=62, Assign=63, 
		StarAssign=64, DivAssign=65, ModAssign=66, PlusAssign=67, MinusAssign=68, 
		LeftShiftAssign=69, RightShiftAssign=70, AndAssign=71, XorAssign=72, OrAssign=73, 
		Equal=74, NotEqual=75, Arrow=76, Dot=77, Identifier=78, Constant=79, StringLiteral=80, 
		ComplexDefine=81, AsmBlock=82, LineAfterPreprocessing=83, LineDirective=84, 
		PragmaDirective=85, Whitespace=86, Newline=87, BlockComment=88, LineComment=89;
	public const int
		RULE_primaryExpression = 0, RULE_postfixExpression = 1, RULE_argumentExpressionList = 2, 
		RULE_unaryExpression = 3, RULE_unaryOperator = 4, RULE_castExpression = 5, 
		RULE_multiplicativeExpression = 6, RULE_additiveExpression = 7, RULE_shiftExpression = 8, 
		RULE_relationalExpression = 9, RULE_equalityExpression = 10, RULE_andExpression = 11, 
		RULE_exclusiveOrExpression = 12, RULE_inclusiveOrExpression = 13, RULE_logicalAndExpression = 14, 
		RULE_logicalOrExpression = 15, RULE_conditionalExpression = 16, RULE_assignmentExpression = 17, 
		RULE_assignmentOperator = 18, RULE_expression = 19, RULE_constantExpression = 20, 
		RULE_globalExpression = 21, RULE_declaration = 22, RULE_declarationSpecifiers = 23, 
		RULE_declarationSpecifiers2 = 24, RULE_declarationSpecifier = 25, RULE_initDeclaratorList = 26, 
		RULE_initDeclarator = 27, RULE_storageClassSpecifier = 28, RULE_typeSpecifier = 29, 
		RULE_arrayDeclarator = 30, RULE_arrayDeclarationList = 31, RULE_arrayDeclaration = 32, 
		RULE_structSpecifier = 33, RULE_structDeclarationList = 34, RULE_structDeclaration = 35, 
		RULE_specifierQualifierList = 36, RULE_structDeclaratorList = 37, RULE_structItemDeclarator = 38, 
		RULE_structDeclarator = 39, RULE_enumDeclarator = 40, RULE_enumSpecifier = 41, 
		RULE_enumeratorList = 42, RULE_enumerator = 43, RULE_enumerationConstant = 44, 
		RULE_typeQualifier = 45, RULE_declarator = 46, RULE_directDeclarator = 47, 
		RULE_nestedParenthesesBlock = 48, RULE_pointer = 49, RULE_typeQualifierList = 50, 
		RULE_parameterTypeList = 51, RULE_parameterList = 52, RULE_parameterDeclaration = 53, 
		RULE_identifierList = 54, RULE_typeName = 55, RULE_abstractDeclarator = 56, 
		RULE_typedefName = 57, RULE_initializer = 58, RULE_initializerList = 59, 
		RULE_designation = 60, RULE_designatorList = 61, RULE_designator = 62, 
		RULE_selectionStatement = 63, RULE_selectionElseStatement = 64, RULE_statement = 65, 
		RULE_labeledStatement = 66, RULE_compoundStatement = 67, RULE_blockItemList = 68, 
		RULE_blockItem = 69, RULE_expressionStatement = 70, RULE_iterationStatement = 71, 
		RULE_jumpStatement = 72, RULE_compilationUnit = 73, RULE_translationUnit = 74, 
		RULE_externalDeclaration = 75, RULE_functionDefinition = 76, RULE_declarationList = 77, 
		RULE_includeExpression = 78;
	public static readonly string[] ruleNames = {
		"primaryExpression", "postfixExpression", "argumentExpressionList", "unaryExpression", 
		"unaryOperator", "castExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "relationalExpression", "equalityExpression", "andExpression", 
		"exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "globalExpression", 
		"declaration", "declarationSpecifiers", "declarationSpecifiers2", "declarationSpecifier", 
		"initDeclaratorList", "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
		"arrayDeclarator", "arrayDeclarationList", "arrayDeclaration", "structSpecifier", 
		"structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structItemDeclarator", "structDeclarator", "enumDeclarator", 
		"enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
		"typeQualifier", "declarator", "directDeclarator", "nestedParenthesesBlock", 
		"pointer", "typeQualifierList", "parameterTypeList", "parameterList", 
		"parameterDeclaration", "identifierList", "typeName", "abstractDeclarator", 
		"typedefName", "initializer", "initializerList", "designation", "designatorList", 
		"designator", "selectionStatement", "selectionElseStatement", "statement", 
		"labeledStatement", "compoundStatement", "blockItemList", "blockItem", 
		"expressionStatement", "iterationStatement", "jumpStatement", "compilationUnit", 
		"translationUnit", "externalDeclaration", "functionDefinition", "declarationList", 
		"includeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Global_'", "'bool'", "'foreach'", "'in'", "'#include'", "'auto'", 
		"'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", 
		"'double'", "'else'", "'enum'", "'float'", "'for'", "'goto'", "'if'", 
		"'int'", "'long'", "'return'", "'short'", "'signed'", "'static'", "'string'", 
		"'struct'", "'switch'", "'unsigned'", "'void'", "'while'", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
		"'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
		"'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
		"'=='", "'!='", "'->'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "Auto", "Break", "Case", "Char", "Const", 
		"Continue", "Default", "Do", "Double", "Else", "Enum", "Float", "For", 
		"Goto", "If", "Int", "Long", "Return", "Short", "Signed", "Static", "String", 
		"Struct", "Switch", "Unsigned", "Void", "While", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual", 
		"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus", 
		"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
		"Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
		"StarAssign", "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
		"Arrow", "Dot", "Identifier", "Constant", "StringLiteral", "ComplexDefine", 
		"AsmBlock", "LineAfterPreprocessing", "LineDirective", "PragmaDirective", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RAGE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RAGEParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RAGEParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ITerminalNode Constant() { return GetToken(RAGEParser.Constant, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(RAGEParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(RAGEParser.StringLiteral, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		try {
			int _alt;
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(Identifier);
				}
				break;
			case Constant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(Constant);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 160; Match(StringLiteral);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 163;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; Match(LeftParen);
				State = 166; expression(0);
				State = 167; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 172; primaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 174;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 175; Match(LeftBracket);
						State = 176; expression(0);
						State = 177; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 179;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 180; Match(LeftParen);
						State = 182;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
							{
							State = 181; argumentExpressionList(0);
							}
						}

						State = 184; Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 185;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 186; Match(Dot);
						State = 187; Match(Identifier);
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 188;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 189; Match(Arrow);
						State = 190; Match(Identifier);
						}
						break;
					case 5:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 191;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 192; Match(PlusPlus);
						}
						break;
					case 6:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 193;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 194; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		return argumentExpressionList(0);
	}

	private ArgumentExpressionListContext argumentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, _parentState);
		ArgumentExpressionListContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_argumentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 201; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentExpressionList);
					State = 203;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 204; Match(Comma);
					State = 205; assignmentExpression();
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unaryExpression);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; postfixExpression(0);
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; Match(PlusPlus);
				State = 213; unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214; Match(MinusMinus);
				State = 215; unaryExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				EnterOuterAlt(_localctx, 4);
				{
				State = 216; unaryOperator();
				State = 217; castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_castExpression);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224; Match(LeftParen);
				State = 225; typeName();
				State = 226; Match(RightParen);
				State = 227; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 232; castExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 243;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 234;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 235; Match(Star);
						State = 236; castExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 237;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 238; Match(Div);
						State = 239; castExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 240;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 241; Match(Mod);
						State = 242; castExpression();
						}
						break;
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 249; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 260;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 251;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 252; Match(Plus);
						State = 253; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 254;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 255; Match(Minus);
						State = 256; multiplicativeExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 257;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 258; Match(Dot);
						State = 259; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 266; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 274;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 268;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 269; Match(LeftShift);
						State = 270; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 271;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 272; Match(RightShift);
						State = 273; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 280; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 282;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 283; Match(Less);
						State = 284; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 285;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 286; Match(Greater);
						State = 287; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 288;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 289; Match(LessEqual);
						State = 290; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 291;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 292; Match(GreaterEqual);
						State = 293; shiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 300; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 308;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 302;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 303; Match(Equal);
						State = 304; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 305;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 306; Match(NotEqual);
						State = 307; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 314; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 316;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 317; Match(And);
					State = 318; equalityExpression(0);
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 325; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 327;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 328; Match(Caret);
					State = 329; andExpression(0);
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 336; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 338;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 339; Match(Or);
					State = 340; exclusiveOrExpression(0);
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 347; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 354;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 349;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 350; Match(AndAnd);
					State = 351; inclusiveOrExpression(0);
					}
					} 
				}
				State = 356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 358; logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 360;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 361; Match(OrOr);
					State = 362; logicalAndExpression(0);
					}
					} 
				}
				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; logicalOrExpression(0);
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 369; Match(Question);
				State = 370; expression(0);
				State = 371; Match(Colon);
				State = 372; conditionalExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentExpression);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377; unaryExpression();
				State = 378; assignmentOperator();
				State = 379; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (Assign - 63)) | (1L << (StarAssign - 63)) | (1L << (DivAssign - 63)) | (1L << (ModAssign - 63)) | (1L << (PlusAssign - 63)) | (1L << (MinusAssign - 63)) | (1L << (LeftShiftAssign - 63)) | (1L << (RightShiftAssign - 63)) | (1L << (AndAssign - 63)) | (1L << (XorAssign - 63)) | (1L << (OrAssign - 63)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 386; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 388;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 389; Match(Comma);
					State = 390; assignmentExpression();
					}
					} 
				}
				State = 395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalExpressionContext : ParserRuleContext {
		public GlobalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterGlobalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitGlobalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalExpressionContext globalExpression() {
		GlobalExpressionContext _localctx = new GlobalExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_globalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; declarationSpecifiers();
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Star - 33)) | (1L << (Caret - 33)) | (1L << (Identifier - 33)))) != 0)) {
				{
				State = 401; initDeclaratorList(0);
				}
			}

			State = 404; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_declarationSpecifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 406; declarationSpecifier();
				}
				}
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 48, RULE_declarationSpecifiers2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 411; declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifier);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; storageClassSpecifier();
				}
				break;
			case T__1:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; typeSpecifier();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418; typeQualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		public InitDeclaratorContext initDeclarator() {
			return GetRuleContext<InitDeclaratorContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		return initDeclaratorList(0);
	}

	private InitDeclaratorListContext initDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, _parentState);
		InitDeclaratorListContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_initDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 422; initDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initDeclaratorList);
					State = 424;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 425; Match(Comma);
					State = 426; initDeclarator();
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 54, RULE_initDeclarator);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433; declarator();
				State = 434; Match(Assign);
				State = 435; initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !(_la==Auto || _la==Static) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(RAGEParser.StringLiteral, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeSpecifier);
		int _la;
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaratorContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public ArrayDeclarationListContext arrayDeclarationList() {
			return GetRuleContext<ArrayDeclarationListContext>(0);
		}
		public ArrayDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaratorContext arrayDeclarator() {
		ArrayDeclaratorContext _localctx = new ArrayDeclaratorContext(Context, State);
		EnterRule(_localctx, 60, RULE_arrayDeclarator);
		int _la;
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 445; storageClassSpecifier();
					}
				}

				State = 448; typeSpecifier();
				State = 449; Match(Identifier);
				State = 450; Match(LeftBracket);
				State = 451; constantExpression();
				State = 452; Match(RightBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 454; storageClassSpecifier();
					}
				}

				State = 457; typeSpecifier();
				State = 458; Match(Identifier);
				State = 459; Match(LeftBracket);
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 460; constantExpression();
					}
				}

				State = 463; Match(RightBracket);
				State = 464; Match(Assign);
				State = 465; Match(LeftBrace);
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 466; arrayDeclarationList(0);
					}
				}

				State = 469; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 471; storageClassSpecifier();
					}
				}

				State = 474; typeSpecifier();
				State = 475; Match(Identifier);
				State = 476; Match(LeftBracket);
				State = 478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 477; constantExpression();
					}
				}

				State = 480; Match(RightBracket);
				State = 481; Match(Assign);
				State = 482; Match(LeftBrace);
				State = 483; arrayDeclarationList(0);
				State = 484; Match(Comma);
				State = 485; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationListContext : ParserRuleContext {
		public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public ArrayDeclarationListContext arrayDeclarationList() {
			return GetRuleContext<ArrayDeclarationListContext>(0);
		}
		public ArrayDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationListContext arrayDeclarationList() {
		return arrayDeclarationList(0);
	}

	private ArrayDeclarationListContext arrayDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArrayDeclarationListContext _localctx = new ArrayDeclarationListContext(Context, _parentState);
		ArrayDeclarationListContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_arrayDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 490; arrayDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arrayDeclarationList);
					State = 492;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 493; Match(Comma);
					State = 494; arrayDeclaration();
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; constantExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecifierContext structSpecifier() {
		StructSpecifierContext _localctx = new StructSpecifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_structSpecifier);
		try {
			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; Match(Struct);
				State = 503; Match(Identifier);
				State = 504; Match(LeftBrace);
				State = 505; structDeclaratorList(0);
				State = 506; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; Match(Struct);
				State = 509; Match(Identifier);
				State = 510; Match(LeftBrace);
				State = 511; structDeclaratorList(0);
				State = 512; Match(Comma);
				State = 513; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		return structDeclarationList(0);
	}

	private StructDeclarationListContext structDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, _parentState);
		StructDeclarationListContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_structDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 518; structDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 524;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclarationList);
					State = 520;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 521; structDeclaration();
					}
					} 
				}
				State = 526;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; specifierQualifierList();
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral) {
				{
				State = 528; structDeclaratorList(0);
				}
			}

			State = 531; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSpecifierQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSpecifierQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifierQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_specifierQualifierList);
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533; typeSpecifier();
				State = 535;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 534; specifierQualifierList();
					}
					break;
				}
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537; typeQualifier();
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 538; specifierQualifierList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		public StructItemDeclaratorContext structItemDeclarator() {
			return GetRuleContext<StructItemDeclaratorContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		return structDeclaratorList(0);
	}

	private StructDeclaratorListContext structDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, _parentState);
		StructDeclaratorListContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_structDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 544; structItemDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclaratorList);
					State = 546;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 547; Match(Comma);
					State = 548; structItemDeclarator();
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructItemDeclaratorContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructItemDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structItemDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructItemDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructItemDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructItemDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructItemDeclaratorContext structItemDeclarator() {
		StructItemDeclaratorContext _localctx = new StructItemDeclaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_structItemDeclarator);
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; typeSpecifier();
				State = 555; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; typeSpecifier();
				State = 558; Match(Identifier);
				State = 559; Match(Assign);
				State = 560; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_structDeclarator);
		int _la;
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; Match(Struct);
				State = 565; Match(Identifier);
				State = 566; Match(LeftBrace);
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral) {
					{
					State = 567; structDeclaratorList(0);
					}
				}

				State = 570; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571; Match(Struct);
				State = 572; Match(Identifier);
				State = 573; Match(LeftBrace);
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral) {
					{
					State = 574; structDeclaratorList(0);
					}
				}

				State = 577; Match(Comma);
				State = 578; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclaratorContext enumDeclarator() {
		EnumDeclaratorContext _localctx = new EnumDeclaratorContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumDeclarator);
		int _la;
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581; Match(Enum);
				State = 582; Match(Identifier);
				State = 583; Match(LeftBrace);
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 584; enumeratorList(0);
					}
				}

				State = 587; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588; Match(Enum);
				State = 589; Match(Identifier);
				State = 590; Match(LeftBrace);
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 591; enumeratorList(0);
					}
				}

				State = 594; Match(Comma);
				State = 595; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumSpecifier);
		int _la;
		try {
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 598; Match(Enum);
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 599; Match(Identifier);
					}
				}

				State = 602; Match(LeftBrace);
				State = 603; enumeratorList(0);
				State = 604; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606; Match(Enum);
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 607; Match(Identifier);
					}
				}

				State = 610; Match(LeftBrace);
				State = 611; enumeratorList(0);
				State = 612; Match(Comma);
				State = 613; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 615; Match(Enum);
				State = 616; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		return enumeratorList(0);
	}

	private EnumeratorListContext enumeratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, _parentState);
		EnumeratorListContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_enumeratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 620; enumerator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorList);
					State = 622;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 623; Match(Comma);
					State = 624; enumerator();
					}
					} 
				}
				State = 629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 86, RULE_enumerator);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630; enumerationConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; enumerationConstant();
				State = 632; Match(Assign);
				State = 633; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumerationConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumerationConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 88, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeQualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 92, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 641; pointer();
				}
			}

			State = 644; directDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDirectDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDirectDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 94;
		EnterRecursionRule(_localctx, 94, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 647; Match(Identifier);
				}
				break;
			case LeftParen:
				{
				State = 648; Match(LeftParen);
				State = 649; declarator();
				State = 650; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 699;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 697;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 654;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 655; Match(LeftBracket);
						State = 657;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 656; typeQualifierList(0);
							}
						}

						State = 660;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
							{
							State = 659; assignmentExpression();
							}
						}

						State = 662; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 663;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 664; Match(LeftBracket);
						State = 665; Match(Static);
						State = 667;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 666; typeQualifierList(0);
							}
						}

						State = 669; assignmentExpression();
						State = 670; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 672;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 673; Match(LeftBracket);
						State = 674; typeQualifierList(0);
						State = 675; Match(Static);
						State = 676; assignmentExpression();
						State = 677; Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 679;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 680; Match(LeftBracket);
						State = 682;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 681; typeQualifierList(0);
							}
						}

						State = 684; Match(Star);
						State = 685; Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 686;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 687; Match(LeftParen);
						State = 688; parameterTypeList();
						State = 689; Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 691;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 692; Match(LeftParen);
						State = 694;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 693; identifierList(0);
							}
						}

						State = 696; Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 701;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterNestedParenthesesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitNestedParenthesesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedParenthesesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Unsigned) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma) | (1L << Assign))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)) | (1L << (Dot - 64)) | (1L << (Identifier - 64)) | (1L << (Constant - 64)) | (1L << (StringLiteral - 64)) | (1L << (ComplexDefine - 64)) | (1L << (AsmBlock - 64)) | (1L << (LineAfterPreprocessing - 64)) | (1L << (LineDirective - 64)) | (1L << (PragmaDirective - 64)) | (1L << (Whitespace - 64)) | (1L << (Newline - 64)) | (1L << (BlockComment - 64)) | (1L << (LineComment - 64)))) != 0)) {
				{
				State = 707;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case Auto:
				case Break:
				case Case:
				case Char:
				case Const:
				case Continue:
				case Default:
				case Do:
				case Double:
				case Else:
				case Enum:
				case Float:
				case For:
				case Goto:
				case If:
				case Int:
				case Long:
				case Return:
				case Short:
				case Signed:
				case Static:
				case String:
				case Struct:
				case Switch:
				case Unsigned:
				case Void:
				case While:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Identifier:
				case Constant:
				case StringLiteral:
				case ComplexDefine:
				case AsmBlock:
				case LineAfterPreprocessing:
				case LineDirective:
				case PragmaDirective:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 702;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 703; Match(LeftParen);
					State = 704; nestedParenthesesBlock();
					State = 705; Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 98, RULE_pointer);
		int _la;
		try {
			State = 730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; Match(Star);
				State = 714;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 713; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716; Match(Star);
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 717; typeQualifierList(0);
					}
				}

				State = 720; pointer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 721; Match(Caret);
				State = 723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 722; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 725; Match(Caret);
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 726; typeQualifierList(0);
					}
				}

				State = 729; pointer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		return typeQualifierList(0);
	}

	private TypeQualifierListContext typeQualifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, _parentState);
		TypeQualifierListContext _prevctx = _localctx;
		int _startState = 100;
		EnterRecursionRule(_localctx, 100, RULE_typeQualifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 733; typeQualifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeQualifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeQualifierList);
					State = 735;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 736; typeQualifier();
					}
					} 
				}
				State = 741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameterTypeList);
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; parameterList(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; parameterList(0);
				State = 744; Match(Comma);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 749; parameterDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 756;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 751;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 752; Match(Comma);
					State = 753; parameterDeclaration();
					}
					} 
				}
				State = 758;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclarationSpecifiers2Context declarationSpecifiers2() {
			return GetRuleContext<DeclarationSpecifiers2Context>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_parameterDeclaration);
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759; declarationSpecifiers();
				State = 760; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762; declarationSpecifiers2();
				State = 764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 763; abstractDeclarator();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		return identifierList(0);
	}

	private IdentifierListContext identifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierListContext _localctx = new IdentifierListContext(Context, _parentState);
		IdentifierListContext _prevctx = _localctx;
		int _startState = 108;
		EnterRecursionRule(_localctx, 108, RULE_identifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 769; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 776;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifierList);
					State = 771;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 772; Match(Comma);
					State = 773; Match(Identifier);
					}
					} 
				}
				State = 778;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; specifierQualifierList();
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 780; abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 112, RULE_abstractDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; pointer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 114, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 116, RULE_initializer);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788; Match(LeftBrace);
				State = 789; initializerList(0);
				State = 790; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 792; Match(LeftBrace);
				State = 793; initializerList(0);
				State = 794; Match(Comma);
				State = 795; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DesignationContext designation() {
			return GetRuleContext<DesignationContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		return initializerList(0);
	}

	private InitializerListContext initializerList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerListContext _localctx = new InitializerListContext(Context, _parentState);
		InitializerListContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_initializerList, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 800; designation();
				}
			}

			State = 803; initializer();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 813;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerList);
					State = 805;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 806; Match(Comma);
					State = 808;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 807; designation();
						}
					}

					State = 810; initializer();
					}
					} 
				}
				State = 815;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 120, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; designatorList(0);
			State = 817; Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignatorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignatorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		return designatorList(0);
	}

	private DesignatorListContext designatorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DesignatorListContext _localctx = new DesignatorListContext(Context, _parentState);
		DesignatorListContext _prevctx = _localctx;
		int _startState = 122;
		EnterRecursionRule(_localctx, 122, RULE_designatorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 820; designator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 826;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DesignatorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_designatorList);
					State = 822;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 823; designator();
					}
					} 
				}
				State = 828;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 124, RULE_designator);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829; Match(LeftBracket);
				State = 830; constantExpression();
				State = 831; Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833; Match(Dot);
				State = 834; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionElseStatementContext selectionElseStatement() {
			return GetRuleContext<SelectionElseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_selectionStatement);
		try {
			State = 851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837; Match(If);
				State = 838; Match(LeftParen);
				State = 839; expression(0);
				State = 840; Match(RightParen);
				State = 841; statement();
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 842; selectionElseStatement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845; Match(Switch);
				State = 846; Match(LeftParen);
				State = 847; expression(0);
				State = 848; Match(RightParen);
				State = 849; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public SelectionElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSelectionElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSelectionElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionElseStatementContext selectionElseStatement() {
		SelectionElseStatementContext _localctx = new SelectionElseStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_selectionElseStatement);
		try {
			State = 859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 853; Match(Else);
				State = 854; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855; Match(Else);
				State = 857;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 856; selectionStatement();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public ArrayDeclaratorContext arrayDeclarator() {
			return GetRuleContext<ArrayDeclaratorContext>(0);
		}
		public StructDeclaratorContext structDeclarator() {
			return GetRuleContext<StructDeclaratorContext>(0);
		}
		public GlobalExpressionContext globalExpression() {
			return GetRuleContext<GlobalExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_statement);
		try {
			State = 872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861; labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862; compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 863; selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 864; expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 865; iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 866; jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 867; enumSpecifier();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 868; enumDeclarator();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 869; arrayDeclarator();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 870; structDeclarator();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 871; globalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_labeledStatement);
		try {
			State = 890;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874; Match(Identifier);
				State = 875; Match(Colon);
				State = 876; statement();
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877; Match(Case);
				State = 878; constantExpression();
				State = 879; Match(Colon);
				State = 880; statement();
				State = 882;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 881; jumpStatement();
					}
					break;
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 884; Match(Default);
				State = 885; Match(Colon);
				State = 886; statement();
				State = 888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
				case 1:
					{
					State = 887; jumpStatement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892; Match(LeftBrace);
			State = 894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde) | (1L << Semi))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (Identifier - 78)) | (1L << (Constant - 78)) | (1L << (StringLiteral - 78)))) != 0)) {
				{
				State = 893; blockItemList(0);
				}
			}

			State = 896; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		public BlockItemContext blockItem() {
			return GetRuleContext<BlockItemContext>(0);
		}
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		return blockItemList(0);
	}

	private BlockItemListContext blockItemList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockItemListContext _localctx = new BlockItemListContext(Context, _parentState);
		BlockItemListContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_blockItemList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 899; blockItem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 905;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockItemListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockItemList);
					State = 901;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 902; blockItem();
					}
					} 
				}
				State = 907;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockItem);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
				{
				State = 912; expression(0);
				}
			}

			State = 915; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode[] Identifier() { return GetTokens(RAGEParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(RAGEParser.Identifier, i);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_iterationStatement);
		int _la;
		try {
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 917; Match(While);
				State = 918; Match(LeftParen);
				State = 919; expression(0);
				State = 920; Match(RightParen);
				State = 921; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; Match(Do);
				State = 924; statement();
				State = 925; Match(While);
				State = 926; Match(LeftParen);
				State = 927; expression(0);
				State = 928; Match(RightParen);
				State = 929; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 931; Match(For);
				State = 932; Match(LeftParen);
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 933; expression(0);
					}
				}

				State = 936; Match(Semi);
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 937; expression(0);
					}
				}

				State = 940; Match(Semi);
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 941; expression(0);
					}
				}

				State = 944; Match(RightParen);
				State = 945; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 946; Match(For);
				State = 947; Match(LeftParen);
				State = 948; declaration();
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 949; expression(0);
					}
				}

				State = 952; Match(Semi);
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 953; expression(0);
					}
				}

				State = 956; Match(RightParen);
				State = 957; statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 959; Match(T__2);
				State = 960; Match(LeftParen);
				State = 961; Match(Identifier);
				State = 962; Match(T__3);
				State = 963; Match(Identifier);
				State = 964; Match(RightParen);
				State = 965; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_jumpStatement);
		int _la;
		try {
			State = 980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Goto:
				EnterOuterAlt(_localctx, 1);
				{
				State = 968; Match(Goto);
				State = 969; Match(Identifier);
				State = 970; Match(Semi);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 971; Match(Continue);
				State = 972; Match(Semi);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 3);
				{
				State = 973; Match(Break);
				State = 974; Match(Semi);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 4);
				{
				State = 975; Match(Return);
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (LeftParen - 33)) | (1L << (Plus - 33)) | (1L << (PlusPlus - 33)) | (1L << (Minus - 33)) | (1L << (MinusMinus - 33)) | (1L << (Star - 33)) | (1L << (And - 33)) | (1L << (Not - 33)) | (1L << (Tilde - 33)) | (1L << (Identifier - 33)) | (1L << (Constant - 33)) | (1L << (StringLiteral - 33)))) != 0)) {
					{
					State = 976; expression(0);
					}
				}

				State = 979; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RAGEParser.Eof, 0); }
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 146, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void) | (1L << LeftParen) | (1L << Star) | (1L << Caret) | (1L << Semi))) != 0) || _la==Identifier || _la==StringLiteral) {
				{
				State = 982; translationUnit(0);
				}
			}

			State = 985; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ExternalDeclarationContext externalDeclaration() {
			return GetRuleContext<ExternalDeclarationContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		return translationUnit(0);
	}

	private TranslationUnitContext translationUnit(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, _parentState);
		TranslationUnitContext _prevctx = _localctx;
		int _startState = 148;
		EnterRecursionRule(_localctx, 148, RULE_translationUnit, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 988; externalDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 994;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TranslationUnitContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_translationUnit);
					State = 990;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 991; externalDeclaration();
					}
					} 
				}
				State = 996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public StructDeclaratorContext structDeclarator() {
			return GetRuleContext<StructDeclaratorContext>(0);
		}
		public ArrayDeclaratorContext arrayDeclarator() {
			return GetRuleContext<ArrayDeclaratorContext>(0);
		}
		public GlobalExpressionContext globalExpression() {
			return GetRuleContext<GlobalExpressionContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IncludeExpressionContext includeExpression() {
			return GetRuleContext<IncludeExpressionContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_externalDeclaration);
		try {
			State = 1005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997; functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; enumDeclarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 999; structDeclarator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1000; arrayDeclarator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001; globalExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1002; declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1003; includeExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1004; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 152, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral) {
				{
				State = 1007; declarationSpecifiers();
				}
			}

			State = 1010; declarator();
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0) || _la==StringLiteral) {
				{
				State = 1011; declarationList(0);
				}
			}

			State = 1014; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1017; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 1019;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1020; declaration();
					}
					} 
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IncludeExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(RAGEParser.StringLiteral, 0); }
		public IncludeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIncludeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIncludeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeExpressionContext includeExpression() {
		IncludeExpressionContext _localctx = new IncludeExpressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_includeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026; Match(T__4);
			State = 1027; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 2: return argumentExpressionList_sempred((ArgumentExpressionListContext)_localctx, predIndex);
		case 6: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 7: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 8: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 9: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 10: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 11: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 12: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 13: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 14: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 15: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 26: return initDeclaratorList_sempred((InitDeclaratorListContext)_localctx, predIndex);
		case 31: return arrayDeclarationList_sempred((ArrayDeclarationListContext)_localctx, predIndex);
		case 34: return structDeclarationList_sempred((StructDeclarationListContext)_localctx, predIndex);
		case 37: return structDeclaratorList_sempred((StructDeclaratorListContext)_localctx, predIndex);
		case 42: return enumeratorList_sempred((EnumeratorListContext)_localctx, predIndex);
		case 47: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 50: return typeQualifierList_sempred((TypeQualifierListContext)_localctx, predIndex);
		case 52: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 54: return identifierList_sempred((IdentifierListContext)_localctx, predIndex);
		case 59: return initializerList_sempred((InitializerListContext)_localctx, predIndex);
		case 61: return designatorList_sempred((DesignatorListContext)_localctx, predIndex);
		case 68: return blockItemList_sempred((BlockItemListContext)_localctx, predIndex);
		case 74: return translationUnit_sempred((TranslationUnitContext)_localctx, predIndex);
		case 77: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentExpressionList_sempred(ArgumentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initDeclaratorList_sempred(InitDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool arrayDeclarationList_sempred(ArrayDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclarationList_sempred(StructDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclaratorList_sempred(StructDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorList_sempred(EnumeratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 6);
		case 33: return Precpred(Context, 5);
		case 34: return Precpred(Context, 4);
		case 35: return Precpred(Context, 3);
		case 36: return Precpred(Context, 2);
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeQualifierList_sempred(TypeQualifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool identifierList_sempred(IdentifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerList_sempred(InitializerListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool designatorList_sempred(DesignatorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool blockItemList_sempred(BlockItemListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool translationUnit_sempred(TranslationUnitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3[\x408");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4");
		sb.Append("\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35");
		sb.Append("\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:");
		sb.Append("\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41\x4\x42");
		sb.Append("\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46\t\x46\x4");
		sb.Append("G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN\x4O\t");
		sb.Append("O\x4P\tP\x3\x2\x3\x2\x3\x2\x6\x2\xA4\n\x2\r\x2\xE\x2\xA5\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x5\x2\xAC\n\x2\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xB9\n\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\a\x3\xC6\n\x3\f\x3\xE\x3\xC9\v\x3\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\a\x4\xD1\n\x4\f\x4\xE\x4\xD4\v\x4\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xDE\n\x5\x3\x6\x3\x6");
		sb.Append("\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xE8\n\a\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\xF6\n\b\f\b\xE");
		sb.Append("\b\xF9\v\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\a\t\x107\n\t\f\t\xE\t\x10A\v\t\x3\n\x3\n\x3\n\x3");
		sb.Append("\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x115\n\n\f\n\xE\n\x118\v\n\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\a\v\x129\n\v\f\v\xE\v\x12C\v\v\x3\f\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x137\n\f\f\f\xE\f\x13A\v\f\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x142\n\r\f\r\xE\r\x145\v\r\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x14D\n\xE\f\xE\xE\xE");
		sb.Append("\x150\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x158\n\xF");
		sb.Append("\f\xF\xE\xF\x15B\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\a\x10\x163\n\x10\f\x10\xE\x10\x166\v\x10\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x16E\n\x11\f\x11\xE\x11\x171");
		sb.Append("\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x179");
		sb.Append("\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x180\n\x13");
		sb.Append("\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15");
		sb.Append("\x18A\n\x15\f\x15\xE\x15\x18D\v\x15\x3\x16\x3\x16\x3\x17\x3");
		sb.Append("\x17\x3\x18\x3\x18\x5\x18\x195\n\x18\x3\x18\x3\x18\x3\x19\x6");
		sb.Append("\x19\x19A\n\x19\r\x19\xE\x19\x19B\x3\x1A\x6\x1A\x19F\n\x1A\r");
		sb.Append("\x1A\xE\x1A\x1A0\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x1A6\n\x1B\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x1AE\n\x1C\f\x1C\xE");
		sb.Append("\x1C\x1B1\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x1B8");
		sb.Append("\n\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x1BE\n\x1F\x3 \x5");
		sb.Append(" \x1C1\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x1CA\n \x3 \x3 \x3");
		sb.Append(" \x3 \x5 \x1D0\n \x3 \x3 \x3 \x3 \x5 \x1D6\n \x3 \x3 \x3 \x5");
		sb.Append(" \x1DB\n \x3 \x3 \x3 \x3 \x5 \x1E1\n \x3 \x3 \x3 \x3 \x3 \x3");
		sb.Append(" \x3 \x5 \x1EA\n \x3!\x3!\x3!\x3!\x3!\x3!\a!\x1F2\n!\f!\xE!");
		sb.Append("\x1F5\v!\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3");
		sb.Append("#\x3#\x3#\x5#\x206\n#\x3$\x3$\x3$\x3$\x3$\a$\x20D\n$\f$\xE$");
		sb.Append("\x210\v$\x3%\x3%\x5%\x214\n%\x3%\x3%\x3&\x3&\x5&\x21A\n&\x3");
		sb.Append("&\x3&\x5&\x21E\n&\x5&\x220\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'");
		sb.Append("\a\'\x228\n\'\f\'\xE\'\x22B\v\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(");
		sb.Append("\x3(\x5(\x235\n(\x3)\x3)\x3)\x3)\x5)\x23B\n)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x5)\x242\n)\x3)\x3)\x5)\x246\n)\x3*\x3*\x3*\x3*\x5*\x24C");
		sb.Append("\n*\x3*\x3*\x3*\x3*\x3*\x5*\x253\n*\x3*\x3*\x5*\x257\n*\x3+");
		sb.Append("\x3+\x5+\x25B\n+\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x263\n+\x3+\x3");
		sb.Append("+\x3+\x3+\x3+\x3+\x3+\x5+\x26C\n+\x3,\x3,\x3,\x3,\x3,\x3,\a");
		sb.Append(",\x274\n,\f,\xE,\x277\v,\x3-\x3-\x3-\x3-\x3-\x5-\x27E\n-\x3");
		sb.Append(".\x3.\x3/\x3/\x3\x30\x5\x30\x285\n\x30\x3\x30\x3\x30\x3\x31");
		sb.Append("\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x28F\n\x31\x3\x31");
		sb.Append("\x3\x31\x3\x31\x5\x31\x294\n\x31\x3\x31\x5\x31\x297\n\x31\x3");
		sb.Append("\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x29E\n\x31\x3\x31\x3");
		sb.Append("\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31");
		sb.Append("\x3\x31\x3\x31\x3\x31\x5\x31\x2AD\n\x31\x3\x31\x3\x31\x3\x31");
		sb.Append("\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x2B9");
		sb.Append("\n\x31\x3\x31\a\x31\x2BC\n\x31\f\x31\xE\x31\x2BF\v\x31\x3\x32");
		sb.Append("\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x2C6\n\x32\f\x32\xE\x32\x2C9");
		sb.Append("\v\x32\x3\x33\x3\x33\x5\x33\x2CD\n\x33\x3\x33\x3\x33\x5\x33");
		sb.Append("\x2D1\n\x33\x3\x33\x3\x33\x3\x33\x5\x33\x2D6\n\x33\x3\x33\x3");
		sb.Append("\x33\x5\x33\x2DA\n\x33\x3\x33\x5\x33\x2DD\n\x33\x3\x34\x3\x34");
		sb.Append("\x3\x34\x3\x34\x3\x34\a\x34\x2E4\n\x34\f\x34\xE\x34\x2E7\v\x34");
		sb.Append("\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x2ED\n\x35\x3\x36\x3\x36");
		sb.Append("\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x2F5\n\x36\f\x36\xE\x36\x2F8");
		sb.Append("\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x2FF\n\x37");
		sb.Append("\x5\x37\x301\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\a\x38\x309\n\x38\f\x38\xE\x38\x30C\v\x38\x3\x39\x3\x39\x5\x39");
		sb.Append("\x310\n\x39\x3:\x3:\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<");
		sb.Append("\x3<\x3<\x5<\x320\n<\x3=\x3=\x5=\x324\n=\x3=\x3=\x3=\x3=\x3");
		sb.Append("=\x5=\x32B\n=\x3=\a=\x32E\n=\f=\xE=\x331\v=\x3>\x3>\x3>\x3?");
		sb.Append("\x3?\x3?\x3?\x3?\a?\x33B\n?\f?\xE?\x33E\v?\x3@\x3@\x3@\x3@\x3");
		sb.Append("@\x3@\x5@\x346\n@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41");
		sb.Append("\x5\x41\x34E\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41");
		sb.Append("\x5\x41\x356\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x35C\n");
		sb.Append("\x42\x5\x42\x35E\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3");
		sb.Append("\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x36B\n\x43\x3");
		sb.Append("\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44");
		sb.Append("\x375\n\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x37B\n\x44\x5");
		sb.Append("\x44\x37D\n\x44\x3\x45\x3\x45\x5\x45\x381\n\x45\x3\x45\x3\x45");
		sb.Append("\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x38A\n\x46\f\x46\xE");
		sb.Append("\x46\x38D\v\x46\x3G\x3G\x5G\x391\nG\x3H\x5H\x394\nH\x3H\x3H");
		sb.Append("\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3");
		sb.Append("I\x3I\x3I\x5I\x3A9\nI\x3I\x3I\x5I\x3AD\nI\x3I\x3I\x5I\x3B1\n");
		sb.Append("I\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x3B9\nI\x3I\x3I\x5I\x3BD\nI\x3");
		sb.Append("I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x3C9\nI\x3J\x3J\x3");
		sb.Append("J\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x3D4\nJ\x3J\x5J\x3D7\nJ\x3K\x5");
		sb.Append("K\x3DA\nK\x3K\x3K\x3L\x3L\x3L\x3L\x3L\aL\x3E3\nL\fL\xEL\x3E6");
		sb.Append("\vL\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x3F0\nM\x3N\x5N\x3F3");
		sb.Append("\nN\x3N\x3N\x5N\x3F7\nN\x3N\x3N\x3O\x3O\x3O\x3O\x3O\aO\x400");
		sb.Append("\nO\fO\xEO\x403\vO\x3P\x3P\x3P\x3P\x2\x1D\x4\x6\xE\x10\x12\x14");
		sb.Append("\x16\x18\x1A\x1C\x1E (\x36@\x46LV`\x66jnx|\x8A\x96\x9CQ\x2\x4");
		sb.Append("\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32");
		sb.Append("\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnp");
		sb.Append("rtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98");
		sb.Append("\x9A\x9C\x9E\x2\a\a\x2//\x31\x31\x33\x33\x36\x36;<\x3\x2\x41");
		sb.Append("K\x4\x2\b\b\x1C\x1C\n\x2\x4\x4\v\v\x10\x10\x13\x13\x17\x18\x1A");
		sb.Append("\x1A\x1D\x1D!!\x3\x2#$\x456\x2\xAB\x3\x2\x2\x2\x4\xAD\x3\x2");
		sb.Append("\x2\x2\x6\xCA\x3\x2\x2\x2\b\xDD\x3\x2\x2\x2\n\xDF\x3\x2\x2\x2");
		sb.Append("\f\xE7\x3\x2\x2\x2\xE\xE9\x3\x2\x2\x2\x10\xFA\x3\x2\x2\x2\x12");
		sb.Append("\x10B\x3\x2\x2\x2\x14\x119\x3\x2\x2\x2\x16\x12D\x3\x2\x2\x2");
		sb.Append("\x18\x13B\x3\x2\x2\x2\x1A\x146\x3\x2\x2\x2\x1C\x151\x3\x2\x2");
		sb.Append("\x2\x1E\x15C\x3\x2\x2\x2 \x167\x3\x2\x2\x2\"\x172\x3\x2\x2\x2");
		sb.Append("$\x17F\x3\x2\x2\x2&\x181\x3\x2\x2\x2(\x183\x3\x2\x2\x2*\x18E");
		sb.Append("\x3\x2\x2\x2,\x190\x3\x2\x2\x2.\x192\x3\x2\x2\x2\x30\x199\x3");
		sb.Append("\x2\x2\x2\x32\x19E\x3\x2\x2\x2\x34\x1A5\x3\x2\x2\x2\x36\x1A7");
		sb.Append("\x3\x2\x2\x2\x38\x1B7\x3\x2\x2\x2:\x1B9\x3\x2\x2\x2<\x1BD\x3");
		sb.Append("\x2\x2\x2>\x1E9\x3\x2\x2\x2@\x1EB\x3\x2\x2\x2\x42\x1F6\x3\x2");
		sb.Append("\x2\x2\x44\x205\x3\x2\x2\x2\x46\x207\x3\x2\x2\x2H\x211\x3\x2");
		sb.Append("\x2\x2J\x21F\x3\x2\x2\x2L\x221\x3\x2\x2\x2N\x234\x3\x2\x2\x2");
		sb.Append("P\x245\x3\x2\x2\x2R\x256\x3\x2\x2\x2T\x26B\x3\x2\x2\x2V\x26D");
		sb.Append("\x3\x2\x2\x2X\x27D\x3\x2\x2\x2Z\x27F\x3\x2\x2\x2\\\x281\x3\x2");
		sb.Append("\x2\x2^\x284\x3\x2\x2\x2`\x28E\x3\x2\x2\x2\x62\x2C7\x3\x2\x2");
		sb.Append("\x2\x64\x2DC\x3\x2\x2\x2\x66\x2DE\x3\x2\x2\x2h\x2EC\x3\x2\x2");
		sb.Append("\x2j\x2EE\x3\x2\x2\x2l\x300\x3\x2\x2\x2n\x302\x3\x2\x2\x2p\x30D");
		sb.Append("\x3\x2\x2\x2r\x311\x3\x2\x2\x2t\x313\x3\x2\x2\x2v\x31F\x3\x2");
		sb.Append("\x2\x2x\x321\x3\x2\x2\x2z\x332\x3\x2\x2\x2|\x335\x3\x2\x2\x2");
		sb.Append("~\x345\x3\x2\x2\x2\x80\x355\x3\x2\x2\x2\x82\x35D\x3\x2\x2\x2");
		sb.Append("\x84\x36A\x3\x2\x2\x2\x86\x37C\x3\x2\x2\x2\x88\x37E\x3\x2\x2");
		sb.Append("\x2\x8A\x384\x3\x2\x2\x2\x8C\x390\x3\x2\x2\x2\x8E\x393\x3\x2");
		sb.Append("\x2\x2\x90\x3C8\x3\x2\x2\x2\x92\x3D6\x3\x2\x2\x2\x94\x3D9\x3");
		sb.Append("\x2\x2\x2\x96\x3DD\x3\x2\x2\x2\x98\x3EF\x3\x2\x2\x2\x9A\x3F2");
		sb.Append("\x3\x2\x2\x2\x9C\x3FA\x3\x2\x2\x2\x9E\x404\x3\x2\x2\x2\xA0\xAC");
		sb.Append("\aP\x2\x2\xA1\xAC\aQ\x2\x2\xA2\xA4\aR\x2\x2\xA3\xA2\x3\x2\x2");
		sb.Append("\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2");
		sb.Append("\x2\xA6\xAC\x3\x2\x2\x2\xA7\xA8\a#\x2\x2\xA8\xA9\x5(\x15\x2");
		sb.Append("\xA9\xAA\a$\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xA0\x3\x2\x2\x2\xAB");
		sb.Append("\xA1\x3\x2\x2\x2\xAB\xA3\x3\x2\x2\x2\xAB\xA7\x3\x2\x2\x2\xAC");
		sb.Append("\x3\x3\x2\x2\x2\xAD\xAE\b\x3\x1\x2\xAE\xAF\x5\x2\x2\x2\xAF\xC7");
		sb.Append("\x3\x2\x2\x2\xB0\xB1\f\b\x2\x2\xB1\xB2\a%\x2\x2\xB2\xB3\x5(");
		sb.Append("\x15\x2\xB3\xB4\a&\x2\x2\xB4\xC6\x3\x2\x2\x2\xB5\xB6\f\a\x2");
		sb.Append("\x2\xB6\xB8\a#\x2\x2\xB7\xB9\x5\x6\x4\x2\xB8\xB7\x3\x2\x2\x2");
		sb.Append("\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xC6\a$\x2\x2\xBB");
		sb.Append("\xBC\f\x6\x2\x2\xBC\xBD\aO\x2\x2\xBD\xC6\aP\x2\x2\xBE\xBF\f");
		sb.Append("\x5\x2\x2\xBF\xC0\aN\x2\x2\xC0\xC6\aP\x2\x2\xC1\xC2\f\x4\x2");
		sb.Append("\x2\xC2\xC6\a\x30\x2\x2\xC3\xC4\f\x3\x2\x2\xC4\xC6\a\x32\x2");
		sb.Append("\x2\xC5\xB0\x3\x2\x2\x2\xC5\xB5\x3\x2\x2\x2\xC5\xBB\x3\x2\x2");
		sb.Append("\x2\xC5\xBE\x3\x2\x2\x2\xC5\xC1\x3\x2\x2\x2\xC5\xC3\x3\x2\x2");
		sb.Append("\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2");
		sb.Append("\x2\xC8\x5\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCB\b\x4\x1\x2");
		sb.Append("\xCB\xCC\x5$\x13\x2\xCC\xD2\x3\x2\x2\x2\xCD\xCE\f\x3\x2\x2\xCE");
		sb.Append("\xCF\a@\x2\x2\xCF\xD1\x5$\x13\x2\xD0\xCD\x3\x2\x2\x2\xD1\xD4");
		sb.Append("\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\a\x3");
		sb.Append("\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xDE\x5\x4\x3\x2\xD6\xD7\a");
		sb.Append("\x30\x2\x2\xD7\xDE\x5\b\x5\x2\xD8\xD9\a\x32\x2\x2\xD9\xDE\x5");
		sb.Append("\b\x5\x2\xDA\xDB\x5\n\x6\x2\xDB\xDC\x5\f\a\x2\xDC\xDE\x3\x2");
		sb.Append("\x2\x2\xDD\xD5\x3\x2\x2\x2\xDD\xD6\x3\x2\x2\x2\xDD\xD8\x3\x2");
		sb.Append("\x2\x2\xDD\xDA\x3\x2\x2\x2\xDE\t\x3\x2\x2\x2\xDF\xE0\t\x2\x2");
		sb.Append("\x2\xE0\v\x3\x2\x2\x2\xE1\xE8\x5\b\x5\x2\xE2\xE3\a#\x2\x2\xE3");
		sb.Append("\xE4\x5p\x39\x2\xE4\xE5\a$\x2\x2\xE5\xE6\x5\f\a\x2\xE6\xE8\x3");
		sb.Append("\x2\x2\x2\xE7\xE1\x3\x2\x2\x2\xE7\xE2\x3\x2\x2\x2\xE8\r\x3\x2");
		sb.Append("\x2\x2\xE9\xEA\b\b\x1\x2\xEA\xEB\x5\f\a\x2\xEB\xF7\x3\x2\x2");
		sb.Append("\x2\xEC\xED\f\x5\x2\x2\xED\xEE\a\x33\x2\x2\xEE\xF6\x5\f\a\x2");
		sb.Append("\xEF\xF0\f\x4\x2\x2\xF0\xF1\a\x34\x2\x2\xF1\xF6\x5\f\a\x2\xF2");
		sb.Append("\xF3\f\x3\x2\x2\xF3\xF4\a\x35\x2\x2\xF4\xF6\x5\f\a\x2\xF5\xEC");
		sb.Append("\x3\x2\x2\x2\xF5\xEF\x3\x2\x2\x2\xF5\xF2\x3\x2\x2\x2\xF6\xF9");
		sb.Append("\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF");
		sb.Append("\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFB\b\t\x1\x2\xFB\xFC\x5");
		sb.Append("\xE\b\x2\xFC\x108\x3\x2\x2\x2\xFD\xFE\f\x5\x2\x2\xFE\xFF\a/");
		sb.Append("\x2\x2\xFF\x107\x5\xE\b\x2\x100\x101\f\x4\x2\x2\x101\x102\a");
		sb.Append("\x31\x2\x2\x102\x107\x5\xE\b\x2\x103\x104\f\x3\x2\x2\x104\x105");
		sb.Append("\aO\x2\x2\x105\x107\x5\xE\b\x2\x106\xFD\x3\x2\x2\x2\x106\x100");
		sb.Append("\x3\x2\x2\x2\x106\x103\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108");
		sb.Append("\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x11\x3\x2\x2\x2");
		sb.Append("\x10A\x108\x3\x2\x2\x2\x10B\x10C\b\n\x1\x2\x10C\x10D\x5\x10");
		sb.Append("\t\x2\x10D\x116\x3\x2\x2\x2\x10E\x10F\f\x4\x2\x2\x10F\x110\a");
		sb.Append("-\x2\x2\x110\x115\x5\x10\t\x2\x111\x112\f\x3\x2\x2\x112\x113");
		sb.Append("\a.\x2\x2\x113\x115\x5\x10\t\x2\x114\x10E\x3\x2\x2\x2\x114\x111");
		sb.Append("\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116");
		sb.Append("\x117\x3\x2\x2\x2\x117\x13\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2");
		sb.Append("\x119\x11A\b\v\x1\x2\x11A\x11B\x5\x12\n\x2\x11B\x12A\x3\x2\x2");
		sb.Append("\x2\x11C\x11D\f\x6\x2\x2\x11D\x11E\a)\x2\x2\x11E\x129\x5\x12");
		sb.Append("\n\x2\x11F\x120\f\x5\x2\x2\x120\x121\a+\x2\x2\x121\x129\x5\x12");
		sb.Append("\n\x2\x122\x123\f\x4\x2\x2\x123\x124\a*\x2\x2\x124\x129\x5\x12");
		sb.Append("\n\x2\x125\x126\f\x3\x2\x2\x126\x127\a,\x2\x2\x127\x129\x5\x12");
		sb.Append("\n\x2\x128\x11C\x3\x2\x2\x2\x128\x11F\x3\x2\x2\x2\x128\x122");
		sb.Append("\x3\x2\x2\x2\x128\x125\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A");
		sb.Append("\x128\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x15\x3\x2\x2\x2");
		sb.Append("\x12C\x12A\x3\x2\x2\x2\x12D\x12E\b\f\x1\x2\x12E\x12F\x5\x14");
		sb.Append("\v\x2\x12F\x138\x3\x2\x2\x2\x130\x131\f\x4\x2\x2\x131\x132\a");
		sb.Append("L\x2\x2\x132\x137\x5\x14\v\x2\x133\x134\f\x3\x2\x2\x134\x135");
		sb.Append("\aM\x2\x2\x135\x137\x5\x14\v\x2\x136\x130\x3\x2\x2\x2\x136\x133");
		sb.Append("\x3\x2\x2\x2\x137\x13A\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x138");
		sb.Append("\x139\x3\x2\x2\x2\x139\x17\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2");
		sb.Append("\x13B\x13C\b\r\x1\x2\x13C\x13D\x5\x16\f\x2\x13D\x143\x3\x2\x2");
		sb.Append("\x2\x13E\x13F\f\x3\x2\x2\x13F\x140\a\x36\x2\x2\x140\x142\x5");
		sb.Append("\x16\f\x2\x141\x13E\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141");
		sb.Append("\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x19\x3\x2\x2\x2\x145");
		sb.Append("\x143\x3\x2\x2\x2\x146\x147\b\xE\x1\x2\x147\x148\x5\x18\r\x2");
		sb.Append("\x148\x14E\x3\x2\x2\x2\x149\x14A\f\x3\x2\x2\x14A\x14B\a:\x2");
		sb.Append("\x2\x14B\x14D\x5\x18\r\x2\x14C\x149\x3\x2\x2\x2\x14D\x150\x3");
		sb.Append("\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x1B");
		sb.Append("\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x151\x152\b\xF\x1\x2\x152");
		sb.Append("\x153\x5\x1A\xE\x2\x153\x159\x3\x2\x2\x2\x154\x155\f\x3\x2\x2");
		sb.Append("\x155\x156\a\x37\x2\x2\x156\x158\x5\x1A\xE\x2\x157\x154\x3\x2");
		sb.Append("\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A");
		sb.Append("\x3\x2\x2\x2\x15A\x1D\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C");
		sb.Append("\x15D\b\x10\x1\x2\x15D\x15E\x5\x1C\xF\x2\x15E\x164\x3\x2\x2");
		sb.Append("\x2\x15F\x160\f\x3\x2\x2\x160\x161\a\x38\x2\x2\x161\x163\x5");
		sb.Append("\x1C\xF\x2\x162\x15F\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164");
		sb.Append("\x162\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x1F\x3\x2\x2\x2");
		sb.Append("\x166\x164\x3\x2\x2\x2\x167\x168\b\x11\x1\x2\x168\x169\x5\x1E");
		sb.Append("\x10\x2\x169\x16F\x3\x2\x2\x2\x16A\x16B\f\x3\x2\x2\x16B\x16C");
		sb.Append("\a\x39\x2\x2\x16C\x16E\x5\x1E\x10\x2\x16D\x16A\x3\x2\x2\x2\x16E");
		sb.Append("\x171\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2");
		sb.Append("\x170!\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x172\x178\x5 \x11\x2");
		sb.Append("\x173\x174\a=\x2\x2\x174\x175\x5(\x15\x2\x175\x176\a>\x2\x2");
		sb.Append("\x176\x177\x5\"\x12\x2\x177\x179\x3\x2\x2\x2\x178\x173\x3\x2");
		sb.Append("\x2\x2\x178\x179\x3\x2\x2\x2\x179#\x3\x2\x2\x2\x17A\x180\x5");
		sb.Append("\"\x12\x2\x17B\x17C\x5\b\x5\x2\x17C\x17D\x5&\x14\x2\x17D\x17E");
		sb.Append("\x5$\x13\x2\x17E\x180\x3\x2\x2\x2\x17F\x17A\x3\x2\x2\x2\x17F");
		sb.Append("\x17B\x3\x2\x2\x2\x180%\x3\x2\x2\x2\x181\x182\t\x3\x2\x2\x182");
		sb.Append("\'\x3\x2\x2\x2\x183\x184\b\x15\x1\x2\x184\x185\x5$\x13\x2\x185");
		sb.Append("\x18B\x3\x2\x2\x2\x186\x187\f\x3\x2\x2\x187\x188\a@\x2\x2\x188");
		sb.Append("\x18A\x5$\x13\x2\x189\x186\x3\x2\x2\x2\x18A\x18D\x3\x2\x2\x2");
		sb.Append("\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C)\x3\x2\x2");
		sb.Append("\x2\x18D\x18B\x3\x2\x2\x2\x18E\x18F\x5\"\x12\x2\x18F+\x3\x2");
		sb.Append("\x2\x2\x190\x191\a\x3\x2\x2\x191-\x3\x2\x2\x2\x192\x194\x5\x30");
		sb.Append("\x19\x2\x193\x195\x5\x36\x1C\x2\x194\x193\x3\x2\x2\x2\x194\x195");
		sb.Append("\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196\x197\a?\x2\x2\x197/");
		sb.Append("\x3\x2\x2\x2\x198\x19A\x5\x34\x1B\x2\x199\x198\x3\x2\x2\x2\x19A");
		sb.Append("\x19B\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C\x3\x2\x2\x2");
		sb.Append("\x19C\x31\x3\x2\x2\x2\x19D\x19F\x5\x34\x1B\x2\x19E\x19D\x3\x2");
		sb.Append("\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x1A1");
		sb.Append("\x3\x2\x2\x2\x1A1\x33\x3\x2\x2\x2\x1A2\x1A6\x5:\x1E\x2\x1A3");
		sb.Append("\x1A6\x5<\x1F\x2\x1A4\x1A6\x5\\/\x2\x1A5\x1A2\x3\x2\x2\x2\x1A5");
		sb.Append("\x1A3\x3\x2\x2\x2\x1A5\x1A4\x3\x2\x2\x2\x1A6\x35\x3\x2\x2\x2");
		sb.Append("\x1A7\x1A8\b\x1C\x1\x2\x1A8\x1A9\x5\x38\x1D\x2\x1A9\x1AF\x3");
		sb.Append("\x2\x2\x2\x1AA\x1AB\f\x3\x2\x2\x1AB\x1AC\a@\x2\x2\x1AC\x1AE");
		sb.Append("\x5\x38\x1D\x2\x1AD\x1AA\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF");
		sb.Append("\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x37\x3\x2\x2\x2");
		sb.Append("\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B8\x5^\x30\x2\x1B3\x1B4\x5^\x30");
		sb.Append("\x2\x1B4\x1B5\a\x41\x2\x2\x1B5\x1B6\x5v<\x2\x1B6\x1B8\x3\x2");
		sb.Append("\x2\x2\x1B7\x1B2\x3\x2\x2\x2\x1B7\x1B3\x3\x2\x2\x2\x1B8\x39");
		sb.Append("\x3\x2\x2\x2\x1B9\x1BA\t\x4\x2\x2\x1BA;\x3\x2\x2\x2\x1BB\x1BE");
		sb.Append("\t\x5\x2\x2\x1BC\x1BE\aR\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BC");
		sb.Append("\x3\x2\x2\x2\x1BE=\x3\x2\x2\x2\x1BF\x1C1\x5:\x1E\x2\x1C0\x1BF");
		sb.Append("\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2");
		sb.Append("\x1C3\x5<\x1F\x2\x1C3\x1C4\aP\x2\x2\x1C4\x1C5\a%\x2\x2\x1C5");
		sb.Append("\x1C6\x5*\x16\x2\x1C6\x1C7\a&\x2\x2\x1C7\x1EA\x3\x2\x2\x2\x1C8");
		sb.Append("\x1CA\x5:\x1E\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2");
		sb.Append("\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\x5<\x1F\x2\x1CC\x1CD\aP\x2");
		sb.Append("\x2\x1CD\x1CF\a%\x2\x2\x1CE\x1D0\x5*\x16\x2\x1CF\x1CE\x3\x2");
		sb.Append("\x2\x2\x1CF\x1D0\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2");
		sb.Append("\a&\x2\x2\x1D2\x1D3\a\x41\x2\x2\x1D3\x1D5\a\'\x2\x2\x1D4\x1D6");
		sb.Append("\x5@!\x2\x1D5\x1D4\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6\x1D7");
		sb.Append("\x3\x2\x2\x2\x1D7\x1D8\a(\x2\x2\x1D8\x1EA\x3\x2\x2\x2\x1D9\x1DB");
		sb.Append("\x5:\x1E\x2\x1DA\x1D9\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB");
		sb.Append("\x1DC\x3\x2\x2\x2\x1DC\x1DD\x5<\x1F\x2\x1DD\x1DE\aP\x2\x2\x1DE");
		sb.Append("\x1E0\a%\x2\x2\x1DF\x1E1\x5*\x16\x2\x1E0\x1DF\x3\x2\x2\x2\x1E0");
		sb.Append("\x1E1\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\a&\x2\x2\x1E3");
		sb.Append("\x1E4\a\x41\x2\x2\x1E4\x1E5\a\'\x2\x2\x1E5\x1E6\x5@!\x2\x1E6");
		sb.Append("\x1E7\a@\x2\x2\x1E7\x1E8\a(\x2\x2\x1E8\x1EA\x3\x2\x2\x2\x1E9");
		sb.Append("\x1C0\x3\x2\x2\x2\x1E9\x1C9\x3\x2\x2\x2\x1E9\x1DA\x3\x2\x2\x2");
		sb.Append("\x1EA?\x3\x2\x2\x2\x1EB\x1EC\b!\x1\x2\x1EC\x1ED\x5\x42\"\x2");
		sb.Append("\x1ED\x1F3\x3\x2\x2\x2\x1EE\x1EF\f\x3\x2\x2\x1EF\x1F0\a@\x2");
		sb.Append("\x2\x1F0\x1F2\x5\x42\"\x2\x1F1\x1EE\x3\x2\x2\x2\x1F2\x1F5\x3");
		sb.Append("\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x41");
		sb.Append("\x3\x2\x2\x2\x1F5\x1F3\x3\x2\x2\x2\x1F6\x1F7\x5*\x16\x2\x1F7");
		sb.Append("\x43\x3\x2\x2\x2\x1F8\x1F9\a\x1E\x2\x2\x1F9\x1FA\aP\x2\x2\x1FA");
		sb.Append("\x1FB\a\'\x2\x2\x1FB\x1FC\x5L\'\x2\x1FC\x1FD\a(\x2\x2\x1FD\x206");
		sb.Append("\x3\x2\x2\x2\x1FE\x1FF\a\x1E\x2\x2\x1FF\x200\aP\x2\x2\x200\x201");
		sb.Append("\a\'\x2\x2\x201\x202\x5L\'\x2\x202\x203\a@\x2\x2\x203\x204\a");
		sb.Append("(\x2\x2\x204\x206\x3\x2\x2\x2\x205\x1F8\x3\x2\x2\x2\x205\x1FE");
		sb.Append("\x3\x2\x2\x2\x206\x45\x3\x2\x2\x2\x207\x208\b$\x1\x2\x208\x209");
		sb.Append("\x5H%\x2\x209\x20E\x3\x2\x2\x2\x20A\x20B\f\x3\x2\x2\x20B\x20D");
		sb.Append("\x5H%\x2\x20C\x20A\x3\x2\x2\x2\x20D\x210\x3\x2\x2\x2\x20E\x20C");
		sb.Append("\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2\x20FG\x3\x2\x2\x2\x210\x20E");
		sb.Append("\x3\x2\x2\x2\x211\x213\x5J&\x2\x212\x214\x5L\'\x2\x213\x212");
		sb.Append("\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215");
		sb.Append("\x216\a?\x2\x2\x216I\x3\x2\x2\x2\x217\x219\x5<\x1F\x2\x218\x21A");
		sb.Append("\x5J&\x2\x219\x218\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A\x220");
		sb.Append("\x3\x2\x2\x2\x21B\x21D\x5\\/\x2\x21C\x21E\x5J&\x2\x21D\x21C");
		sb.Append("\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x220\x3\x2\x2\x2\x21F");
		sb.Append("\x217\x3\x2\x2\x2\x21F\x21B\x3\x2\x2\x2\x220K\x3\x2\x2\x2\x221");
		sb.Append("\x222\b\'\x1\x2\x222\x223\x5N(\x2\x223\x229\x3\x2\x2\x2\x224");
		sb.Append("\x225\f\x3\x2\x2\x225\x226\a@\x2\x2\x226\x228\x5N(\x2\x227\x224");
		sb.Append("\x3\x2\x2\x2\x228\x22B\x3\x2\x2\x2\x229\x227\x3\x2\x2\x2\x229");
		sb.Append("\x22A\x3\x2\x2\x2\x22AM\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22C");
		sb.Append("\x22D\x5<\x1F\x2\x22D\x22E\aP\x2\x2\x22E\x235\x3\x2\x2\x2\x22F");
		sb.Append("\x230\x5<\x1F\x2\x230\x231\aP\x2\x2\x231\x232\a\x41\x2\x2\x232");
		sb.Append("\x233\x5*\x16\x2\x233\x235\x3\x2\x2\x2\x234\x22C\x3\x2\x2\x2");
		sb.Append("\x234\x22F\x3\x2\x2\x2\x235O\x3\x2\x2\x2\x236\x237\a\x1E\x2");
		sb.Append("\x2\x237\x238\aP\x2\x2\x238\x23A\a\'\x2\x2\x239\x23B\x5L\'\x2");
		sb.Append("\x23A\x239\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23C\x3\x2");
		sb.Append("\x2\x2\x23C\x246\a(\x2\x2\x23D\x23E\a\x1E\x2\x2\x23E\x23F\a");
		sb.Append("P\x2\x2\x23F\x241\a\'\x2\x2\x240\x242\x5L\'\x2\x241\x240\x3");
		sb.Append("\x2\x2\x2\x241\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x244");
		sb.Append("\a@\x2\x2\x244\x246\a(\x2\x2\x245\x236\x3\x2\x2\x2\x245\x23D");
		sb.Append("\x3\x2\x2\x2\x246Q\x3\x2\x2\x2\x247\x248\a\x12\x2\x2\x248\x249");
		sb.Append("\aP\x2\x2\x249\x24B\a\'\x2\x2\x24A\x24C\x5V,\x2\x24B\x24A\x3");
		sb.Append("\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x257");
		sb.Append("\a(\x2\x2\x24E\x24F\a\x12\x2\x2\x24F\x250\aP\x2\x2\x250\x252");
		sb.Append("\a\'\x2\x2\x251\x253\x5V,\x2\x252\x251\x3\x2\x2\x2\x252\x253");
		sb.Append("\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255\a@\x2\x2\x255\x257");
		sb.Append("\a(\x2\x2\x256\x247\x3\x2\x2\x2\x256\x24E\x3\x2\x2\x2\x257S");
		sb.Append("\x3\x2\x2\x2\x258\x25A\a\x12\x2\x2\x259\x25B\aP\x2\x2\x25A\x259");
		sb.Append("\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C");
		sb.Append("\x25D\a\'\x2\x2\x25D\x25E\x5V,\x2\x25E\x25F\a(\x2\x2\x25F\x26C");
		sb.Append("\x3\x2\x2\x2\x260\x262\a\x12\x2\x2\x261\x263\aP\x2\x2\x262\x261");
		sb.Append("\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264");
		sb.Append("\x265\a\'\x2\x2\x265\x266\x5V,\x2\x266\x267\a@\x2\x2\x267\x268");
		sb.Append("\a(\x2\x2\x268\x26C\x3\x2\x2\x2\x269\x26A\a\x12\x2\x2\x26A\x26C");
		sb.Append("\aP\x2\x2\x26B\x258\x3\x2\x2\x2\x26B\x260\x3\x2\x2\x2\x26B\x269");
		sb.Append("\x3\x2\x2\x2\x26CU\x3\x2\x2\x2\x26D\x26E\b,\x1\x2\x26E\x26F");
		sb.Append("\x5X-\x2\x26F\x275\x3\x2\x2\x2\x270\x271\f\x3\x2\x2\x271\x272");
		sb.Append("\a@\x2\x2\x272\x274\x5X-\x2\x273\x270\x3\x2\x2\x2\x274\x277");
		sb.Append("\x3\x2\x2\x2\x275\x273\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276");
		sb.Append("W\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x278\x27E\x5Z.\x2\x279\x27A");
		sb.Append("\x5Z.\x2\x27A\x27B\a\x41\x2\x2\x27B\x27C\x5*\x16\x2\x27C\x27E");
		sb.Append("\x3\x2\x2\x2\x27D\x278\x3\x2\x2\x2\x27D\x279\x3\x2\x2\x2\x27E");
		sb.Append("Y\x3\x2\x2\x2\x27F\x280\aP\x2\x2\x280[\x3\x2\x2\x2\x281\x282");
		sb.Append("\a\f\x2\x2\x282]\x3\x2\x2\x2\x283\x285\x5\x64\x33\x2\x284\x283");
		sb.Append("\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286");
		sb.Append("\x287\x5`\x31\x2\x287_\x3\x2\x2\x2\x288\x289\b\x31\x1\x2\x289");
		sb.Append("\x28F\aP\x2\x2\x28A\x28B\a#\x2\x2\x28B\x28C\x5^\x30\x2\x28C");
		sb.Append("\x28D\a$\x2\x2\x28D\x28F\x3\x2\x2\x2\x28E\x288\x3\x2\x2\x2\x28E");
		sb.Append("\x28A\x3\x2\x2\x2\x28F\x2BD\x3\x2\x2\x2\x290\x291\f\b\x2\x2");
		sb.Append("\x291\x293\a%\x2\x2\x292\x294\x5\x66\x34\x2\x293\x292\x3\x2");
		sb.Append("\x2\x2\x293\x294\x3\x2\x2\x2\x294\x296\x3\x2\x2\x2\x295\x297");
		sb.Append("\x5$\x13\x2\x296\x295\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297");
		sb.Append("\x298\x3\x2\x2\x2\x298\x2BC\a&\x2\x2\x299\x29A\f\a\x2\x2\x29A");
		sb.Append("\x29B\a%\x2\x2\x29B\x29D\a\x1C\x2\x2\x29C\x29E\x5\x66\x34\x2");
		sb.Append("\x29D\x29C\x3\x2\x2\x2\x29D\x29E\x3\x2\x2\x2\x29E\x29F\x3\x2");
		sb.Append("\x2\x2\x29F\x2A0\x5$\x13\x2\x2A0\x2A1\a&\x2\x2\x2A1\x2BC\x3");
		sb.Append("\x2\x2\x2\x2A2\x2A3\f\x6\x2\x2\x2A3\x2A4\a%\x2\x2\x2A4\x2A5");
		sb.Append("\x5\x66\x34\x2\x2A5\x2A6\a\x1C\x2\x2\x2A6\x2A7\x5$\x13\x2\x2A7");
		sb.Append("\x2A8\a&\x2\x2\x2A8\x2BC\x3\x2\x2\x2\x2A9\x2AA\f\x5\x2\x2\x2AA");
		sb.Append("\x2AC\a%\x2\x2\x2AB\x2AD\x5\x66\x34\x2\x2AC\x2AB\x3\x2\x2\x2");
		sb.Append("\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2AF\a\x33");
		sb.Append("\x2\x2\x2AF\x2BC\a&\x2\x2\x2B0\x2B1\f\x4\x2\x2\x2B1\x2B2\a#");
		sb.Append("\x2\x2\x2B2\x2B3\x5h\x35\x2\x2B3\x2B4\a$\x2\x2\x2B4\x2BC\x3");
		sb.Append("\x2\x2\x2\x2B5\x2B6\f\x3\x2\x2\x2B6\x2B8\a#\x2\x2\x2B7\x2B9");
		sb.Append("\x5n\x38\x2\x2B8\x2B7\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9");
		sb.Append("\x2BA\x3\x2\x2\x2\x2BA\x2BC\a$\x2\x2\x2BB\x290\x3\x2\x2\x2\x2BB");
		sb.Append("\x299\x3\x2\x2\x2\x2BB\x2A2\x3\x2\x2\x2\x2BB\x2A9\x3\x2\x2\x2");
		sb.Append("\x2BB\x2B0\x3\x2\x2\x2\x2BB\x2B5\x3\x2\x2\x2\x2BC\x2BF\x3\x2");
		sb.Append("\x2\x2\x2BD\x2BB\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x61");
		sb.Append("\x3\x2\x2\x2\x2BF\x2BD\x3\x2\x2\x2\x2C0\x2C6\n\x6\x2\x2\x2C1");
		sb.Append("\x2C2\a#\x2\x2\x2C2\x2C3\x5\x62\x32\x2\x2C3\x2C4\a$\x2\x2\x2C4");
		sb.Append("\x2C6\x3\x2\x2\x2\x2C5\x2C0\x3\x2\x2\x2\x2C5\x2C1\x3\x2\x2\x2");
		sb.Append("\x2C6\x2C9\x3\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2");
		sb.Append("\x2\x2\x2C8\x63\x3\x2\x2\x2\x2C9\x2C7\x3\x2\x2\x2\x2CA\x2CC");
		sb.Append("\a\x33\x2\x2\x2CB\x2CD\x5\x66\x34\x2\x2CC\x2CB\x3\x2\x2\x2\x2CC");
		sb.Append("\x2CD\x3\x2\x2\x2\x2CD\x2DD\x3\x2\x2\x2\x2CE\x2D0\a\x33\x2\x2");
		sb.Append("\x2CF\x2D1\x5\x66\x34\x2\x2D0\x2CF\x3\x2\x2\x2\x2D0\x2D1\x3");
		sb.Append("\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2DD\x5\x64\x33\x2\x2D3");
		sb.Append("\x2D5\a:\x2\x2\x2D4\x2D6\x5\x66\x34\x2\x2D5\x2D4\x3\x2\x2\x2");
		sb.Append("\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2DD\x3\x2\x2\x2\x2D7\x2D9\a:\x2");
		sb.Append("\x2\x2D8\x2DA\x5\x66\x34\x2\x2D9\x2D8\x3\x2\x2\x2\x2D9\x2DA");
		sb.Append("\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DD\x5\x64\x33\x2\x2DC");
		sb.Append("\x2CA\x3\x2\x2\x2\x2DC\x2CE\x3\x2\x2\x2\x2DC\x2D3\x3\x2\x2\x2");
		sb.Append("\x2DC\x2D7\x3\x2\x2\x2\x2DD\x65\x3\x2\x2\x2\x2DE\x2DF\b\x34");
		sb.Append("\x1\x2\x2DF\x2E0\x5\\/\x2\x2E0\x2E5\x3\x2\x2\x2\x2E1\x2E2\f");
		sb.Append("\x3\x2\x2\x2E2\x2E4\x5\\/\x2\x2E3\x2E1\x3\x2\x2\x2\x2E4\x2E7");
		sb.Append("\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6");
		sb.Append("g\x3\x2\x2\x2\x2E7\x2E5\x3\x2\x2\x2\x2E8\x2ED\x5j\x36\x2\x2E9");
		sb.Append("\x2EA\x5j\x36\x2\x2EA\x2EB\a@\x2\x2\x2EB\x2ED\x3\x2\x2\x2\x2EC");
		sb.Append("\x2E8\x3\x2\x2\x2\x2EC\x2E9\x3\x2\x2\x2\x2EDi\x3\x2\x2\x2\x2EE");
		sb.Append("\x2EF\b\x36\x1\x2\x2EF\x2F0\x5l\x37\x2\x2F0\x2F6\x3\x2\x2\x2");
		sb.Append("\x2F1\x2F2\f\x3\x2\x2\x2F2\x2F3\a@\x2\x2\x2F3\x2F5\x5l\x37\x2");
		sb.Append("\x2F4\x2F1\x3\x2\x2\x2\x2F5\x2F8\x3\x2\x2\x2\x2F6\x2F4\x3\x2");
		sb.Append("\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7k\x3\x2\x2\x2\x2F8\x2F6\x3");
		sb.Append("\x2\x2\x2\x2F9\x2FA\x5\x30\x19\x2\x2FA\x2FB\x5^\x30\x2\x2FB");
		sb.Append("\x301\x3\x2\x2\x2\x2FC\x2FE\x5\x32\x1A\x2\x2FD\x2FF\x5r:\x2");
		sb.Append("\x2FE\x2FD\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x301\x3\x2");
		sb.Append("\x2\x2\x300\x2F9\x3\x2\x2\x2\x300\x2FC\x3\x2\x2\x2\x301m\x3");
		sb.Append("\x2\x2\x2\x302\x303\b\x38\x1\x2\x303\x304\aP\x2\x2\x304\x30A");
		sb.Append("\x3\x2\x2\x2\x305\x306\f\x3\x2\x2\x306\x307\a@\x2\x2\x307\x309");
		sb.Append("\aP\x2\x2\x308\x305\x3\x2\x2\x2\x309\x30C\x3\x2\x2\x2\x30A\x308");
		sb.Append("\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30Bo\x3\x2\x2\x2\x30C\x30A");
		sb.Append("\x3\x2\x2\x2\x30D\x30F\x5J&\x2\x30E\x310\x5r:\x2\x30F\x30E\x3");
		sb.Append("\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310q\x3\x2\x2\x2\x311\x312");
		sb.Append("\x5\x64\x33\x2\x312s\x3\x2\x2\x2\x313\x314\aP\x2\x2\x314u\x3");
		sb.Append("\x2\x2\x2\x315\x320\x5$\x13\x2\x316\x317\a\'\x2\x2\x317\x318");
		sb.Append("\x5x=\x2\x318\x319\a(\x2\x2\x319\x320\x3\x2\x2\x2\x31A\x31B");
		sb.Append("\a\'\x2\x2\x31B\x31C\x5x=\x2\x31C\x31D\a@\x2\x2\x31D\x31E\a");
		sb.Append("(\x2\x2\x31E\x320\x3\x2\x2\x2\x31F\x315\x3\x2\x2\x2\x31F\x316");
		sb.Append("\x3\x2\x2\x2\x31F\x31A\x3\x2\x2\x2\x320w\x3\x2\x2\x2\x321\x323");
		sb.Append("\b=\x1\x2\x322\x324\x5z>\x2\x323\x322\x3\x2\x2\x2\x323\x324");
		sb.Append("\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x326\x5v<\x2\x326\x32F");
		sb.Append("\x3\x2\x2\x2\x327\x328\f\x3\x2\x2\x328\x32A\a@\x2\x2\x329\x32B");
		sb.Append("\x5z>\x2\x32A\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32C");
		sb.Append("\x3\x2\x2\x2\x32C\x32E\x5v<\x2\x32D\x327\x3\x2\x2\x2\x32E\x331");
		sb.Append("\x3\x2\x2\x2\x32F\x32D\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330");
		sb.Append("y\x3\x2\x2\x2\x331\x32F\x3\x2\x2\x2\x332\x333\x5|?\x2\x333\x334");
		sb.Append("\a\x41\x2\x2\x334{\x3\x2\x2\x2\x335\x336\b?\x1\x2\x336\x337");
		sb.Append("\x5~@\x2\x337\x33C\x3\x2\x2\x2\x338\x339\f\x3\x2\x2\x339\x33B");
		sb.Append("\x5~@\x2\x33A\x338\x3\x2\x2\x2\x33B\x33E\x3\x2\x2\x2\x33C\x33A");
		sb.Append("\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D}\x3\x2\x2\x2\x33E\x33C");
		sb.Append("\x3\x2\x2\x2\x33F\x340\a%\x2\x2\x340\x341\x5*\x16\x2\x341\x342");
		sb.Append("\a&\x2\x2\x342\x346\x3\x2\x2\x2\x343\x344\aO\x2\x2\x344\x346");
		sb.Append("\aP\x2\x2\x345\x33F\x3\x2\x2\x2\x345\x343\x3\x2\x2\x2\x346\x7F");
		sb.Append("\x3\x2\x2\x2\x347\x348\a\x16\x2\x2\x348\x349\a#\x2\x2\x349\x34A");
		sb.Append("\x5(\x15\x2\x34A\x34B\a$\x2\x2\x34B\x34D\x5\x84\x43\x2\x34C");
		sb.Append("\x34E\x5\x82\x42\x2\x34D\x34C\x3\x2\x2\x2\x34D\x34E\x3\x2\x2");
		sb.Append("\x2\x34E\x356\x3\x2\x2\x2\x34F\x350\a\x1F\x2\x2\x350\x351\a");
		sb.Append("#\x2\x2\x351\x352\x5(\x15\x2\x352\x353\a$\x2\x2\x353\x354\x5");
		sb.Append("\x84\x43\x2\x354\x356\x3\x2\x2\x2\x355\x347\x3\x2\x2\x2\x355");
		sb.Append("\x34F\x3\x2\x2\x2\x356\x81\x3\x2\x2\x2\x357\x358\a\x11\x2\x2");
		sb.Append("\x358\x35E\x5\x84\x43\x2\x359\x35B\a\x11\x2\x2\x35A\x35C\x5");
		sb.Append("\x80\x41\x2\x35B\x35A\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C");
		sb.Append("\x35E\x3\x2\x2\x2\x35D\x357\x3\x2\x2\x2\x35D\x359\x3\x2\x2\x2");
		sb.Append("\x35E\x83\x3\x2\x2\x2\x35F\x36B\x5\x86\x44\x2\x360\x36B\x5\x88");
		sb.Append("\x45\x2\x361\x36B\x5\x80\x41\x2\x362\x36B\x5\x8EH\x2\x363\x36B");
		sb.Append("\x5\x90I\x2\x364\x36B\x5\x92J\x2\x365\x36B\x5T+\x2\x366\x36B");
		sb.Append("\x5R*\x2\x367\x36B\x5> \x2\x368\x36B\x5P)\x2\x369\x36B\x5,\x17");
		sb.Append("\x2\x36A\x35F\x3\x2\x2\x2\x36A\x360\x3\x2\x2\x2\x36A\x361\x3");
		sb.Append("\x2\x2\x2\x36A\x362\x3\x2\x2\x2\x36A\x363\x3\x2\x2\x2\x36A\x364");
		sb.Append("\x3\x2\x2\x2\x36A\x365\x3\x2\x2\x2\x36A\x366\x3\x2\x2\x2\x36A");
		sb.Append("\x367\x3\x2\x2\x2\x36A\x368\x3\x2\x2\x2\x36A\x369\x3\x2\x2\x2");
		sb.Append("\x36B\x85\x3\x2\x2\x2\x36C\x36D\aP\x2\x2\x36D\x36E\a>\x2\x2");
		sb.Append("\x36E\x37D\x5\x84\x43\x2\x36F\x370\a\n\x2\x2\x370\x371\x5*\x16");
		sb.Append("\x2\x371\x372\a>\x2\x2\x372\x374\x5\x84\x43\x2\x373\x375\x5");
		sb.Append("\x92J\x2\x374\x373\x3\x2\x2\x2\x374\x375\x3\x2\x2\x2\x375\x37D");
		sb.Append("\x3\x2\x2\x2\x376\x377\a\xE\x2\x2\x377\x378\a>\x2\x2\x378\x37A");
		sb.Append("\x5\x84\x43\x2\x379\x37B\x5\x92J\x2\x37A\x379\x3\x2\x2\x2\x37A");
		sb.Append("\x37B\x3\x2\x2\x2\x37B\x37D\x3\x2\x2\x2\x37C\x36C\x3\x2\x2\x2");
		sb.Append("\x37C\x36F\x3\x2\x2\x2\x37C\x376\x3\x2\x2\x2\x37D\x87\x3\x2");
		sb.Append("\x2\x2\x37E\x380\a\'\x2\x2\x37F\x381\x5\x8A\x46\x2\x380\x37F");
		sb.Append("\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2\x382");
		sb.Append("\x383\a(\x2\x2\x383\x89\x3\x2\x2\x2\x384\x385\b\x46\x1\x2\x385");
		sb.Append("\x386\x5\x8CG\x2\x386\x38B\x3\x2\x2\x2\x387\x388\f\x3\x2\x2");
		sb.Append("\x388\x38A\x5\x8CG\x2\x389\x387\x3\x2\x2\x2\x38A\x38D\x3\x2");
		sb.Append("\x2\x2\x38B\x389\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\x8B");
		sb.Append("\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38E\x391\x5.\x18\x2\x38F");
		sb.Append("\x391\x5\x84\x43\x2\x390\x38E\x3\x2\x2\x2\x390\x38F\x3\x2\x2");
		sb.Append("\x2\x391\x8D\x3\x2\x2\x2\x392\x394\x5(\x15\x2\x393\x392\x3\x2");
		sb.Append("\x2\x2\x393\x394\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396");
		sb.Append("\a?\x2\x2\x396\x8F\x3\x2\x2\x2\x397\x398\a\"\x2\x2\x398\x399");
		sb.Append("\a#\x2\x2\x399\x39A\x5(\x15\x2\x39A\x39B\a$\x2\x2\x39B\x39C");
		sb.Append("\x5\x84\x43\x2\x39C\x3C9\x3\x2\x2\x2\x39D\x39E\a\xF\x2\x2\x39E");
		sb.Append("\x39F\x5\x84\x43\x2\x39F\x3A0\a\"\x2\x2\x3A0\x3A1\a#\x2\x2\x3A1");
		sb.Append("\x3A2\x5(\x15\x2\x3A2\x3A3\a$\x2\x2\x3A3\x3A4\a?\x2\x2\x3A4");
		sb.Append("\x3C9\x3\x2\x2\x2\x3A5\x3A6\a\x14\x2\x2\x3A6\x3A8\a#\x2\x2\x3A7");
		sb.Append("\x3A9\x5(\x15\x2\x3A8\x3A7\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2");
		sb.Append("\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3AC\a?\x2\x2\x3AB\x3AD\x5(\x15");
		sb.Append("\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AE\x3");
		sb.Append("\x2\x2\x2\x3AE\x3B0\a?\x2\x2\x3AF\x3B1\x5(\x15\x2\x3B0\x3AF");
		sb.Append("\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2");
		sb.Append("\x3B3\a$\x2\x2\x3B3\x3C9\x5\x84\x43\x2\x3B4\x3B5\a\x14\x2\x2");
		sb.Append("\x3B5\x3B6\a#\x2\x2\x3B6\x3B8\x5.\x18\x2\x3B7\x3B9\x5(\x15\x2");
		sb.Append("\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9\x3BA\x3\x2");
		sb.Append("\x2\x2\x3BA\x3BC\a?\x2\x2\x3BB\x3BD\x5(\x15\x2\x3BC\x3BB\x3");
		sb.Append("\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE\x3BF");
		sb.Append("\a$\x2\x2\x3BF\x3C0\x5\x84\x43\x2\x3C0\x3C9\x3\x2\x2\x2\x3C1");
		sb.Append("\x3C2\a\x5\x2\x2\x3C2\x3C3\a#\x2\x2\x3C3\x3C4\aP\x2\x2\x3C4");
		sb.Append("\x3C5\a\x6\x2\x2\x3C5\x3C6\aP\x2\x2\x3C6\x3C7\a$\x2\x2\x3C7");
		sb.Append("\x3C9\x5\x84\x43\x2\x3C8\x397\x3\x2\x2\x2\x3C8\x39D\x3\x2\x2");
		sb.Append("\x2\x3C8\x3A5\x3\x2\x2\x2\x3C8\x3B4\x3\x2\x2\x2\x3C8\x3C1\x3");
		sb.Append("\x2\x2\x2\x3C9\x91\x3\x2\x2\x2\x3CA\x3CB\a\x15\x2\x2\x3CB\x3CC");
		sb.Append("\aP\x2\x2\x3CC\x3D7\a?\x2\x2\x3CD\x3CE\a\r\x2\x2\x3CE\x3D7\a");
		sb.Append("?\x2\x2\x3CF\x3D0\a\t\x2\x2\x3D0\x3D7\a?\x2\x2\x3D1\x3D3\a\x19");
		sb.Append("\x2\x2\x3D2\x3D4\x5(\x15\x2\x3D3\x3D2\x3\x2\x2\x2\x3D3\x3D4");
		sb.Append("\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D7\a?\x2\x2\x3D6\x3CA");
		sb.Append("\x3\x2\x2\x2\x3D6\x3CD\x3\x2\x2\x2\x3D6\x3CF\x3\x2\x2\x2\x3D6");
		sb.Append("\x3D1\x3\x2\x2\x2\x3D7\x93\x3\x2\x2\x2\x3D8\x3DA\x5\x96L\x2");
		sb.Append("\x3D9\x3D8\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DB\x3\x2");
		sb.Append("\x2\x2\x3DB\x3DC\a\x2\x2\x3\x3DC\x95\x3\x2\x2\x2\x3DD\x3DE\b");
		sb.Append("L\x1\x2\x3DE\x3DF\x5\x98M\x2\x3DF\x3E4\x3\x2\x2\x2\x3E0\x3E1");
		sb.Append("\f\x3\x2\x2\x3E1\x3E3\x5\x98M\x2\x3E2\x3E0\x3\x2\x2\x2\x3E3");
		sb.Append("\x3E6\x3\x2\x2\x2\x3E4\x3E2\x3\x2\x2\x2\x3E4\x3E5\x3\x2\x2\x2");
		sb.Append("\x3E5\x97\x3\x2\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E7\x3F0\x5\x9A");
		sb.Append("N\x2\x3E8\x3F0\x5R*\x2\x3E9\x3F0\x5P)\x2\x3EA\x3F0\x5> \x2\x3EB");
		sb.Append("\x3F0\x5,\x17\x2\x3EC\x3F0\x5.\x18\x2\x3ED\x3F0\x5\x9EP\x2\x3EE");
		sb.Append("\x3F0\a?\x2\x2\x3EF\x3E7\x3\x2\x2\x2\x3EF\x3E8\x3\x2\x2\x2\x3EF");
		sb.Append("\x3E9\x3\x2\x2\x2\x3EF\x3EA\x3\x2\x2\x2\x3EF\x3EB\x3\x2\x2\x2");
		sb.Append("\x3EF\x3EC\x3\x2\x2\x2\x3EF\x3ED\x3\x2\x2\x2\x3EF\x3EE\x3\x2");
		sb.Append("\x2\x2\x3F0\x99\x3\x2\x2\x2\x3F1\x3F3\x5\x30\x19\x2\x3F2\x3F1");
		sb.Append("\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4");
		sb.Append("\x3F6\x5^\x30\x2\x3F5\x3F7\x5\x9CO\x2\x3F6\x3F5\x3\x2\x2\x2");
		sb.Append("\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x3F9\x5\x88");
		sb.Append("\x45\x2\x3F9\x9B\x3\x2\x2\x2\x3FA\x3FB\bO\x1\x2\x3FB\x3FC\x5");
		sb.Append(".\x18\x2\x3FC\x401\x3\x2\x2\x2\x3FD\x3FE\f\x3\x2\x2\x3FE\x400");
		sb.Append("\x5.\x18\x2\x3FF\x3FD\x3\x2\x2\x2\x400\x403\x3\x2\x2\x2\x401");
		sb.Append("\x3FF\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x9D\x3\x2\x2\x2");
		sb.Append("\x403\x401\x3\x2\x2\x2\x404\x405\a\a\x2\x2\x405\x406\aR\x2\x2");
		sb.Append("\x406\x9F\x3\x2\x2\x2u\xA5\xAB\xB8\xC5\xC7\xD2\xDD\xE7\xF5\xF7");
		sb.Append("\x106\x108\x114\x116\x128\x12A\x136\x138\x143\x14E\x159\x164");
		sb.Append("\x16F\x178\x17F\x18B\x194\x19B\x1A0\x1A5\x1AF\x1B7\x1BD\x1C0");
		sb.Append("\x1C9\x1CF\x1D5\x1DA\x1E0\x1E9\x1F3\x205\x20E\x213\x219\x21D");
		sb.Append("\x21F\x229\x234\x23A\x241\x245\x24B\x252\x256\x25A\x262\x26B");
		sb.Append("\x275\x27D\x284\x28E\x293\x296\x29D\x2AC\x2B8\x2BB\x2BD\x2C5");
		sb.Append("\x2C7\x2CC\x2D0\x2D5\x2D9\x2DC\x2E5\x2EC\x2F6\x2FE\x300\x30A");
		sb.Append("\x30F\x31F\x323\x32A\x32F\x33C\x345\x34D\x355\x35B\x35D\x36A");
		sb.Append("\x374\x37A\x37C\x380\x38B\x390\x393\x3A8\x3AC\x3B0\x3B8\x3BC");
		sb.Append("\x3C8\x3D3\x3D6\x3D9\x3E4\x3EF\x3F2\x3F6\x401");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
