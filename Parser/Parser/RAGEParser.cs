//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RAGE.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RAGEParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, Auto=7, Break=8, Case=9, 
		Char=10, Const=11, Continue=12, Default=13, Do=14, Double=15, Else=16, 
		Enum=17, Float=18, For=19, Goto=20, If=21, Int=22, Long=23, Return=24, 
		Short=25, Signed=26, Static=27, String=28, Struct=29, Switch=30, Unsigned=31, 
		Void=32, While=33, LeftParen=34, RightParen=35, LeftBracket=36, RightBracket=37, 
		LeftBrace=38, RightBrace=39, Less=40, LessEqual=41, Greater=42, GreaterEqual=43, 
		LeftShift=44, RightShift=45, Plus=46, PlusPlus=47, Minus=48, MinusMinus=49, 
		Star=50, Div=51, Mod=52, And=53, Or=54, AndAnd=55, OrOr=56, Caret=57, 
		Not=58, Tilde=59, Question=60, Colon=61, Semi=62, Comma=63, Assign=64, 
		StarAssign=65, DivAssign=66, ModAssign=67, PlusAssign=68, MinusAssign=69, 
		LeftShiftAssign=70, RightShiftAssign=71, AndAssign=72, XorAssign=73, OrAssign=74, 
		Equal=75, NotEqual=76, Arrow=77, Dot=78, Identifier=79, Constant=80, StringLiteral=81, 
		ComplexDefine=82, AsmBlock=83, LineAfterPreprocessing=84, LineDirective=85, 
		PragmaDirective=86, Whitespace=87, Newline=88, BlockComment=89, LineComment=90;
	public const int
		RULE_primaryExpression = 0, RULE_postfixExpression = 1, RULE_argumentExpressionList = 2, 
		RULE_unaryExpression = 3, RULE_unaryOperator = 4, RULE_castExpression = 5, 
		RULE_multiplicativeExpression = 6, RULE_additiveExpression = 7, RULE_shiftExpression = 8, 
		RULE_relationalExpression = 9, RULE_equalityExpression = 10, RULE_andExpression = 11, 
		RULE_exclusiveOrExpression = 12, RULE_inclusiveOrExpression = 13, RULE_logicalAndExpression = 14, 
		RULE_logicalOrExpression = 15, RULE_conditionalExpression = 16, RULE_assignmentExpression = 17, 
		RULE_assignmentOperator = 18, RULE_expression = 19, RULE_constantExpression = 20, 
		RULE_globalExpression = 21, RULE_declaration = 22, RULE_declarationSpecifiers = 23, 
		RULE_declarationSpecifiers2 = 24, RULE_declarationSpecifier = 25, RULE_customTypeSpecifier = 26, 
		RULE_initDeclaratorList = 27, RULE_initDeclarator = 28, RULE_storageClassSpecifier = 29, 
		RULE_typeSpecifier = 30, RULE_arrayDeclarator = 31, RULE_arrayDeclarationList = 32, 
		RULE_arrayDeclaration = 33, RULE_structSpecifier = 34, RULE_structDeclarationList = 35, 
		RULE_structDeclaration = 36, RULE_specifierQualifierList = 37, RULE_structDeclaratorList = 38, 
		RULE_structItemDeclarator = 39, RULE_structDeclarator = 40, RULE_enumDeclarator = 41, 
		RULE_enumSpecifier = 42, RULE_enumeratorList = 43, RULE_enumerator = 44, 
		RULE_enumerationConstant = 45, RULE_typeQualifier = 46, RULE_declarator = 47, 
		RULE_directDeclarator = 48, RULE_nestedParenthesesBlock = 49, RULE_pointer = 50, 
		RULE_typeQualifierList = 51, RULE_parameterTypeList = 52, RULE_parameterList = 53, 
		RULE_parameterDeclaration = 54, RULE_identifierList = 55, RULE_typeName = 56, 
		RULE_abstractDeclarator = 57, RULE_typedefName = 58, RULE_initializer = 59, 
		RULE_initializerList = 60, RULE_designation = 61, RULE_designatorList = 62, 
		RULE_designator = 63, RULE_selectionStatement = 64, RULE_selectionElseStatement = 65, 
		RULE_statement = 66, RULE_labeledStatement = 67, RULE_compoundStatement = 68, 
		RULE_blockItemList = 69, RULE_blockItem = 70, RULE_expressionStatement = 71, 
		RULE_iterationStatement = 72, RULE_jumpStatement = 73, RULE_compilationUnit = 74, 
		RULE_translationUnit = 75, RULE_externalDeclaration = 76, RULE_functionDefinition = 77, 
		RULE_declarationList = 78, RULE_includeExpression = 79;
	public static readonly string[] ruleNames = {
		"primaryExpression", "postfixExpression", "argumentExpressionList", "unaryExpression", 
		"unaryOperator", "castExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "relationalExpression", "equalityExpression", "andExpression", 
		"exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "globalExpression", 
		"declaration", "declarationSpecifiers", "declarationSpecifiers2", "declarationSpecifier", 
		"customTypeSpecifier", "initDeclaratorList", "initDeclarator", "storageClassSpecifier", 
		"typeSpecifier", "arrayDeclarator", "arrayDeclarationList", "arrayDeclaration", 
		"structSpecifier", "structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structItemDeclarator", "structDeclarator", "enumDeclarator", 
		"enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
		"typeQualifier", "declarator", "directDeclarator", "nestedParenthesesBlock", 
		"pointer", "typeQualifierList", "parameterTypeList", "parameterList", 
		"parameterDeclaration", "identifierList", "typeName", "abstractDeclarator", 
		"typedefName", "initializer", "initializerList", "designation", "designatorList", 
		"designator", "selectionStatement", "selectionElseStatement", "statement", 
		"labeledStatement", "compoundStatement", "blockItemList", "blockItem", 
		"expressionStatement", "iterationStatement", "jumpStatement", "compilationUnit", 
		"translationUnit", "externalDeclaration", "functionDefinition", "declarationList", 
		"includeExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Global_'", "'@'", "'bool'", "'foreach'", "'in'", "'#include'", 
		"'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'float'", "'for'", "'goto'", 
		"'if'", "'int'", "'long'", "'return'", "'short'", "'signed'", "'static'", 
		"'string'", "'struct'", "'switch'", "'unsigned'", "'void'", "'while'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
		"'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
		"'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'=='", "'!='", "'->'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "Auto", "Break", "Case", "Char", 
		"Const", "Continue", "Default", "Do", "Double", "Else", "Enum", "Float", 
		"For", "Goto", "If", "Int", "Long", "Return", "Short", "Signed", "Static", 
		"String", "Struct", "Switch", "Unsigned", "Void", "While", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
		"Semi", "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Equal", "NotEqual", "Arrow", "Dot", "Identifier", "Constant", 
		"StringLiteral", "ComplexDefine", "AsmBlock", "LineAfterPreprocessing", 
		"LineDirective", "PragmaDirective", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RAGE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RAGEParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RAGEParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ITerminalNode Constant() { return GetToken(RAGEParser.Constant, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(RAGEParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(RAGEParser.StringLiteral, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		try {
			int _alt;
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(Identifier);
				}
				break;
			case Constant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; Match(Constant);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 162; Match(StringLiteral);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 165;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 167; Match(LeftParen);
				State = 168; expression(0);
				State = 169; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 174; primaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 176;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 177; Match(LeftBracket);
						State = 178; expression(0);
						State = 179; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 181;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 182; Match(LeftParen);
						State = 184;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
							{
							State = 183; argumentExpressionList(0);
							}
						}

						State = 186; Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 187;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 188; Match(Dot);
						State = 189; Match(Identifier);
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 190;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 191; Match(Arrow);
						State = 192; Match(Identifier);
						}
						break;
					case 5:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 193;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 194; Match(PlusPlus);
						}
						break;
					case 6:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 195;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 196; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		return argumentExpressionList(0);
	}

	private ArgumentExpressionListContext argumentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, _parentState);
		ArgumentExpressionListContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_argumentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 203; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentExpressionList);
					State = 205;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 206; Match(Comma);
					State = 207; assignmentExpression();
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unaryExpression);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; postfixExpression(0);
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(PlusPlus);
				State = 215; unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; Match(MinusMinus);
				State = 217; unaryExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				EnterOuterAlt(_localctx, 4);
				{
				State = 218; unaryOperator();
				State = 219; castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_castExpression);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; Match(LeftParen);
				State = 227; typeName();
				State = 228; Match(RightParen);
				State = 229; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 234; castExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 245;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 236;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 237; Match(Star);
						State = 238; castExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 239;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 240; Match(Div);
						State = 241; castExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 242;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 243; Match(Mod);
						State = 244; castExpression();
						}
						break;
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 251; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 262;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 253;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 254; Match(Plus);
						State = 255; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 256;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 257; Match(Minus);
						State = 258; multiplicativeExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 259;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 260; Match(Dot);
						State = 261; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 268; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 276;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 270;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 271; Match(LeftShift);
						State = 272; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 273;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 274; Match(RightShift);
						State = 275; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 282; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 296;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 284;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 285; Match(Less);
						State = 286; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 287;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 288; Match(Greater);
						State = 289; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 290;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 291; Match(LessEqual);
						State = 292; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 293;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 294; Match(GreaterEqual);
						State = 295; shiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 302; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 310;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 304;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 305; Match(Equal);
						State = 306; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 307;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 308; Match(NotEqual);
						State = 309; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 316; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 323;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 318;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 319; Match(And);
					State = 320; equalityExpression(0);
					}
					} 
				}
				State = 325;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 327; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 329;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 330; Match(Caret);
					State = 331; andExpression(0);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 338; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 340;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 341; Match(Or);
					State = 342; exclusiveOrExpression(0);
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 349; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 351;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 352; Match(AndAnd);
					State = 353; inclusiveOrExpression(0);
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 360; logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 362;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 363; Match(OrOr);
					State = 364; logicalAndExpression(0);
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; logicalOrExpression(0);
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 371; Match(Question);
				State = 372; expression(0);
				State = 373; Match(Colon);
				State = 374; conditionalExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentExpression);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379; unaryExpression();
				State = 380; assignmentOperator();
				State = 381; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 388; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 390;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 391; Match(Comma);
					State = 392; assignmentExpression();
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalExpressionContext : ParserRuleContext {
		public GlobalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterGlobalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitGlobalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalExpressionContext globalExpression() {
		GlobalExpressionContext _localctx = new GlobalExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_globalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; declarationSpecifiers();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Star - 34)) | (1L << (Caret - 34)) | (1L << (Identifier - 34)))) != 0)) {
				{
				State = 403; initDeclaratorList(0);
				}
			}

			State = 406; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 46, RULE_declarationSpecifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 408; declarationSpecifier();
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 48, RULE_declarationSpecifiers2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 413; declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 416;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public CustomTypeSpecifierContext customTypeSpecifier() {
			return GetRuleContext<CustomTypeSpecifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifier);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Static:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; storageClassSpecifier();
				}
				break;
			case T__2:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 419; typeSpecifier();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 420; typeQualifier();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 421; customTypeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomTypeSpecifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public CustomTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customTypeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCustomTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCustomTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomTypeSpecifierContext customTypeSpecifier() {
		CustomTypeSpecifierContext _localctx = new CustomTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_customTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(T__1);
			State = 425; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		public InitDeclaratorContext initDeclarator() {
			return GetRuleContext<InitDeclaratorContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		return initDeclaratorList(0);
	}

	private InitDeclaratorListContext initDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, _parentState);
		InitDeclaratorListContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_initDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 428; initDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initDeclaratorList);
					State = 430;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 431; Match(Comma);
					State = 432; initDeclarator();
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 56, RULE_initDeclarator);
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; declarator();
				State = 440; Match(Assign);
				State = 441; initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 58, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			_la = TokenStream.LA(1);
			if ( !(_la==Auto || _la==Static) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclaratorContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public ArrayDeclarationListContext arrayDeclarationList() {
			return GetRuleContext<ArrayDeclarationListContext>(0);
		}
		public ArrayDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclaratorContext arrayDeclarator() {
		ArrayDeclaratorContext _localctx = new ArrayDeclaratorContext(Context, State);
		EnterRule(_localctx, 62, RULE_arrayDeclarator);
		int _la;
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 449; storageClassSpecifier();
					}
				}

				State = 452; typeSpecifier();
				State = 453; Match(Identifier);
				State = 454; Match(LeftBracket);
				State = 455; constantExpression();
				State = 456; Match(RightBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 458; storageClassSpecifier();
					}
				}

				State = 461; typeSpecifier();
				State = 462; Match(Identifier);
				State = 463; Match(LeftBracket);
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 464; constantExpression();
					}
				}

				State = 467; Match(RightBracket);
				State = 468; Match(Assign);
				State = 469; Match(LeftBrace);
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 470; arrayDeclarationList(0);
					}
				}

				State = 473; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Auto || _la==Static) {
					{
					State = 475; storageClassSpecifier();
					}
				}

				State = 478; typeSpecifier();
				State = 479; Match(Identifier);
				State = 480; Match(LeftBracket);
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 481; constantExpression();
					}
				}

				State = 484; Match(RightBracket);
				State = 485; Match(Assign);
				State = 486; Match(LeftBrace);
				State = 487; arrayDeclarationList(0);
				State = 488; Match(Comma);
				State = 489; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationListContext : ParserRuleContext {
		public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public ArrayDeclarationListContext arrayDeclarationList() {
			return GetRuleContext<ArrayDeclarationListContext>(0);
		}
		public ArrayDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationListContext arrayDeclarationList() {
		return arrayDeclarationList(0);
	}

	private ArrayDeclarationListContext arrayDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArrayDeclarationListContext _localctx = new ArrayDeclarationListContext(Context, _parentState);
		ArrayDeclarationListContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_arrayDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 494; arrayDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 501;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arrayDeclarationList);
					State = 496;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 497; Match(Comma);
					State = 498; arrayDeclaration();
					}
					} 
				}
				State = 503;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_arrayDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; constantExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructSpecifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructSpecifierContext structSpecifier() {
		StructSpecifierContext _localctx = new StructSpecifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_structSpecifier);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506; Match(Struct);
				State = 507; Match(Identifier);
				State = 508; Match(LeftBrace);
				State = 509; structDeclaratorList(0);
				State = 510; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512; Match(Struct);
				State = 513; Match(Identifier);
				State = 514; Match(LeftBrace);
				State = 515; structDeclaratorList(0);
				State = 516; Match(Comma);
				State = 517; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		return structDeclarationList(0);
	}

	private StructDeclarationListContext structDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, _parentState);
		StructDeclarationListContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_structDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 522; structDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 528;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclarationList);
					State = 524;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 525; structDeclaration();
					}
					} 
				}
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; specifierQualifierList();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) {
				{
				State = 532; structDeclaratorList(0);
				}
			}

			State = 535; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSpecifierQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSpecifierQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifierQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 74, RULE_specifierQualifierList);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 537; typeSpecifier();
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 538; specifierQualifierList();
					}
					break;
				}
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; typeQualifier();
				State = 543;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 542; specifierQualifierList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		public StructItemDeclaratorContext structItemDeclarator() {
			return GetRuleContext<StructItemDeclaratorContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		return structDeclaratorList(0);
	}

	private StructDeclaratorListContext structDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, _parentState);
		StructDeclaratorListContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_structDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 548; structItemDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclaratorList);
					State = 550;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 551; Match(Comma);
					State = 552; structItemDeclarator();
					}
					} 
				}
				State = 557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructItemDeclaratorContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructItemDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structItemDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructItemDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructItemDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructItemDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructItemDeclaratorContext structItemDeclarator() {
		StructItemDeclaratorContext _localctx = new StructItemDeclaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_structItemDeclarator);
		try {
			State = 566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 558; typeSpecifier();
				State = 559; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 561; typeSpecifier();
				State = 562; Match(Identifier);
				State = 563; Match(Assign);
				State = 564; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStructDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStructDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 80, RULE_structDeclarator);
		int _la;
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; Match(Struct);
				State = 569; Match(Identifier);
				State = 570; Match(LeftBrace);
				State = 572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) {
					{
					State = 571; structDeclaratorList(0);
					}
				}

				State = 574; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575; Match(Struct);
				State = 576; Match(Identifier);
				State = 577; Match(LeftBrace);
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) {
					{
					State = 578; structDeclaratorList(0);
					}
				}

				State = 581; Match(Comma);
				State = 582; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclaratorContext enumDeclarator() {
		EnumDeclaratorContext _localctx = new EnumDeclaratorContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumDeclarator);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; Match(Enum);
				State = 586; Match(Identifier);
				State = 587; Match(LeftBrace);
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 588; enumeratorList(0);
					}
				}

				State = 591; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 592; Match(Enum);
				State = 593; Match(Identifier);
				State = 594; Match(LeftBrace);
				State = 596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 595; enumeratorList(0);
					}
				}

				State = 598; Match(Comma);
				State = 599; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumSpecifier);
		int _la;
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602; Match(Enum);
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 603; Match(Identifier);
					}
				}

				State = 606; Match(LeftBrace);
				State = 607; enumeratorList(0);
				State = 608; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610; Match(Enum);
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 611; Match(Identifier);
					}
				}

				State = 614; Match(LeftBrace);
				State = 615; enumeratorList(0);
				State = 616; Match(Comma);
				State = 617; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 619; Match(Enum);
				State = 620; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		return enumeratorList(0);
	}

	private EnumeratorListContext enumeratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, _parentState);
		EnumeratorListContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_enumeratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 624; enumerator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 631;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorList);
					State = 626;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 627; Match(Comma);
					State = 628; enumerator();
					}
					} 
				}
				State = 633;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 88, RULE_enumerator);
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634; enumerationConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; enumerationConstant();
				State = 636; Match(Assign);
				State = 637; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterEnumerationConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitEnumerationConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 90, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_typeQualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 94, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 645; pointer();
				}
			}

			State = 648; directDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDirectDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDirectDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 651; Match(Identifier);
				}
				break;
			case LeftParen:
				{
				State = 652; Match(LeftParen);
				State = 653; declarator();
				State = 654; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 703;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 701;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 658;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 659; Match(LeftBracket);
						State = 661;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 660; typeQualifierList(0);
							}
						}

						State = 664;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
							{
							State = 663; assignmentExpression();
							}
						}

						State = 666; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 667;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 668; Match(LeftBracket);
						State = 669; Match(Static);
						State = 671;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 670; typeQualifierList(0);
							}
						}

						State = 673; assignmentExpression();
						State = 674; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 676;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 677; Match(LeftBracket);
						State = 678; typeQualifierList(0);
						State = 679; Match(Static);
						State = 680; assignmentExpression();
						State = 681; Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 683;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 684; Match(LeftBracket);
						State = 686;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 685; typeQualifierList(0);
							}
						}

						State = 688; Match(Star);
						State = 689; Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 690;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 691; Match(LeftParen);
						State = 692; parameterTypeList();
						State = 693; Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 695;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 696; Match(LeftParen);
						State = 698;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 697; identifierList(0);
							}
						}

						State = 700; Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 705;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterNestedParenthesesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitNestedParenthesesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedParenthesesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(Context, State);
		EnterRule(_localctx, 98, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Unsigned) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde) | (1L << Question) | (1L << Colon) | (1L << Semi) | (1L << Comma))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)) | (1L << (Dot - 64)) | (1L << (Identifier - 64)) | (1L << (Constant - 64)) | (1L << (StringLiteral - 64)) | (1L << (ComplexDefine - 64)) | (1L << (AsmBlock - 64)) | (1L << (LineAfterPreprocessing - 64)) | (1L << (LineDirective - 64)) | (1L << (PragmaDirective - 64)) | (1L << (Whitespace - 64)) | (1L << (Newline - 64)) | (1L << (BlockComment - 64)) | (1L << (LineComment - 64)))) != 0)) {
				{
				State = 711;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case Auto:
				case Break:
				case Case:
				case Char:
				case Const:
				case Continue:
				case Default:
				case Do:
				case Double:
				case Else:
				case Enum:
				case Float:
				case For:
				case Goto:
				case If:
				case Int:
				case Long:
				case Return:
				case Short:
				case Signed:
				case Static:
				case String:
				case Struct:
				case Switch:
				case Unsigned:
				case Void:
				case While:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Identifier:
				case Constant:
				case StringLiteral:
				case ComplexDefine:
				case AsmBlock:
				case LineAfterPreprocessing:
				case LineDirective:
				case PragmaDirective:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 706;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 707; Match(LeftParen);
					State = 708; nestedParenthesesBlock();
					State = 709; Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 100, RULE_pointer);
		int _la;
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716; Match(Star);
				State = 718;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 717; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; Match(Star);
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 721; typeQualifierList(0);
					}
				}

				State = 724; pointer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725; Match(Caret);
				State = 727;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 726; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 729; Match(Caret);
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 730; typeQualifierList(0);
					}
				}

				State = 733; pointer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		return typeQualifierList(0);
	}

	private TypeQualifierListContext typeQualifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, _parentState);
		TypeQualifierListContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_typeQualifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 737; typeQualifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 743;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeQualifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeQualifierList);
					State = 739;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 740; typeQualifier();
					}
					} 
				}
				State = 745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameterTypeList);
		try {
			State = 750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 746; parameterList(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 747; parameterList(0);
				State = 748; Match(Comma);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 753; parameterDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 760;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 755;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 756; Match(Comma);
					State = 757; parameterDeclaration();
					}
					} 
				}
				State = 762;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclarationSpecifiers2Context declarationSpecifiers2() {
			return GetRuleContext<DeclarationSpecifiers2Context>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_parameterDeclaration);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; declarationSpecifiers();
				State = 764; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766; declarationSpecifiers2();
				State = 768;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 767; abstractDeclarator();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		return identifierList(0);
	}

	private IdentifierListContext identifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierListContext _localctx = new IdentifierListContext(Context, _parentState);
		IdentifierListContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_identifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 773; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 780;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifierList);
					State = 775;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 776; Match(Comma);
					State = 777; Match(Identifier);
					}
					} 
				}
				State = 782;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; specifierQualifierList();
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 784; abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 114, RULE_abstractDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 787; pointer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 118, RULE_initializer);
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 791; assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 792; Match(LeftBrace);
				State = 793; initializerList(0);
				State = 794; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 796; Match(LeftBrace);
				State = 797; initializerList(0);
				State = 798; Match(Comma);
				State = 799; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DesignationContext designation() {
			return GetRuleContext<DesignationContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		return initializerList(0);
	}

	private InitializerListContext initializerList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerListContext _localctx = new InitializerListContext(Context, _parentState);
		InitializerListContext _prevctx = _localctx;
		int _startState = 120;
		EnterRecursionRule(_localctx, 120, RULE_initializerList, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 804; designation();
				}
			}

			State = 807; initializer();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 817;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerList);
					State = 809;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 810; Match(Comma);
					State = 812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 811; designation();
						}
					}

					State = 814; initializer();
					}
					} 
				}
				State = 819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 122, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; designatorList(0);
			State = 821; Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignatorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignatorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		return designatorList(0);
	}

	private DesignatorListContext designatorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DesignatorListContext _localctx = new DesignatorListContext(Context, _parentState);
		DesignatorListContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_designatorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 824; designator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DesignatorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_designatorList);
					State = 826;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 827; designator();
					}
					} 
				}
				State = 832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 126, RULE_designator);
		try {
			State = 839;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833; Match(LeftBracket);
				State = 834; constantExpression();
				State = 835; Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 837; Match(Dot);
				State = 838; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionElseStatementContext selectionElseStatement() {
			return GetRuleContext<SelectionElseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_selectionStatement);
		try {
			State = 855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841; Match(If);
				State = 842; Match(LeftParen);
				State = 843; expression(0);
				State = 844; Match(RightParen);
				State = 845; statement();
				State = 847;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 846; selectionElseStatement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 849; Match(Switch);
				State = 850; Match(LeftParen);
				State = 851; expression(0);
				State = 852; Match(RightParen);
				State = 853; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public SelectionElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterSelectionElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitSelectionElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionElseStatementContext selectionElseStatement() {
		SelectionElseStatementContext _localctx = new SelectionElseStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_selectionElseStatement);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857; Match(Else);
				State = 858; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859; Match(Else);
				State = 861;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 860; selectionStatement();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public ArrayDeclaratorContext arrayDeclarator() {
			return GetRuleContext<ArrayDeclaratorContext>(0);
		}
		public StructDeclaratorContext structDeclarator() {
			return GetRuleContext<StructDeclaratorContext>(0);
		}
		public GlobalExpressionContext globalExpression() {
			return GetRuleContext<GlobalExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_statement);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865; labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866; compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 867; selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 868; expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 869; iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 870; jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 871; enumSpecifier();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 872; enumDeclarator();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 873; arrayDeclarator();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 874; structDeclarator();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 875; globalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_labeledStatement);
		try {
			State = 894;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 878; Match(Identifier);
				State = 879; Match(Colon);
				State = 880; statement();
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881; Match(Case);
				State = 882; constantExpression();
				State = 883; Match(Colon);
				State = 884; statement();
				State = 886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
				case 1:
					{
					State = 885; jumpStatement();
					}
					break;
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 888; Match(Default);
				State = 889; Match(Colon);
				State = 890; statement();
				State = 892;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
				case 1:
					{
					State = 891; jumpStatement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896; Match(LeftBrace);
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde) | (1L << Semi))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Identifier - 79)) | (1L << (Constant - 79)) | (1L << (StringLiteral - 79)))) != 0)) {
				{
				State = 897; blockItemList(0);
				}
			}

			State = 900; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		public BlockItemContext blockItem() {
			return GetRuleContext<BlockItemContext>(0);
		}
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		return blockItemList(0);
	}

	private BlockItemListContext blockItemList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockItemListContext _localctx = new BlockItemListContext(Context, _parentState);
		BlockItemListContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_blockItemList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 903; blockItem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 909;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockItemListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockItemList);
					State = 905;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 906; blockItem();
					}
					} 
				}
				State = 911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 140, RULE_blockItem);
		try {
			State = 914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 912; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 913; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
				{
				State = 916; expression(0);
				}
			}

			State = 919; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode[] Identifier() { return GetTokens(RAGEParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(RAGEParser.Identifier, i);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_iterationStatement);
		int _la;
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 921; Match(While);
				State = 922; Match(LeftParen);
				State = 923; expression(0);
				State = 924; Match(RightParen);
				State = 925; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 927; Match(Do);
				State = 928; statement();
				State = 929; Match(While);
				State = 930; Match(LeftParen);
				State = 931; expression(0);
				State = 932; Match(RightParen);
				State = 933; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 935; Match(For);
				State = 936; Match(LeftParen);
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 937; expression(0);
					}
				}

				State = 940; Match(Semi);
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 941; expression(0);
					}
				}

				State = 944; Match(Semi);
				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 945; expression(0);
					}
				}

				State = 948; Match(RightParen);
				State = 949; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 950; Match(For);
				State = 951; Match(LeftParen);
				State = 952; declaration();
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 953; expression(0);
					}
				}

				State = 956; Match(Semi);
				State = 958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 957; expression(0);
					}
				}

				State = 960; Match(RightParen);
				State = 961; statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 963; Match(T__3);
				State = 964; Match(LeftParen);
				State = 965; Match(Identifier);
				State = 966; Match(T__4);
				State = 967; Match(Identifier);
				State = 968; Match(RightParen);
				State = 969; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(RAGEParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_jumpStatement);
		int _la;
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Goto:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972; Match(Goto);
				State = 973; Match(Identifier);
				State = 974; Match(Semi);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 975; Match(Continue);
				State = 976; Match(Semi);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 3);
				{
				State = 977; Match(Break);
				State = 978; Match(Semi);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 4);
				{
				State = 979; Match(Return);
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (LeftParen - 34)) | (1L << (Plus - 34)) | (1L << (PlusPlus - 34)) | (1L << (Minus - 34)) | (1L << (MinusMinus - 34)) | (1L << (Star - 34)) | (1L << (And - 34)) | (1L << (Not - 34)) | (1L << (Tilde - 34)) | (1L << (Identifier - 34)) | (1L << (Constant - 34)) | (1L << (StringLiteral - 34)))) != 0)) {
					{
					State = 980; expression(0);
					}
				}

				State = 983; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RAGEParser.Eof, 0); }
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 148, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void) | (1L << LeftParen) | (1L << Star) | (1L << Caret) | (1L << Semi))) != 0) || _la==Identifier) {
				{
				State = 986; translationUnit(0);
				}
			}

			State = 989; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ExternalDeclarationContext externalDeclaration() {
			return GetRuleContext<ExternalDeclarationContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		return translationUnit(0);
	}

	private TranslationUnitContext translationUnit(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, _parentState);
		TranslationUnitContext _prevctx = _localctx;
		int _startState = 150;
		EnterRecursionRule(_localctx, 150, RULE_translationUnit, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 992; externalDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 998;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TranslationUnitContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_translationUnit);
					State = 994;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 995; externalDeclaration();
					}
					} 
				}
				State = 1000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,109,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public StructDeclaratorContext structDeclarator() {
			return GetRuleContext<StructDeclaratorContext>(0);
		}
		public ArrayDeclaratorContext arrayDeclarator() {
			return GetRuleContext<ArrayDeclaratorContext>(0);
		}
		public GlobalExpressionContext globalExpression() {
			return GetRuleContext<GlobalExpressionContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IncludeExpressionContext includeExpression() {
			return GetRuleContext<IncludeExpressionContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 152, RULE_externalDeclaration);
		try {
			State = 1009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1001; functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1002; enumDeclarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1003; structDeclarator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1004; arrayDeclarator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1005; globalExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1006; declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1007; includeExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1008; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 154, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0)) {
				{
				State = 1011; declarationSpecifiers();
				}
			}

			State = 1014; declarator();
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Void))) != 0)) {
				{
				State = 1015; declarationList(0);
				}
			}

			State = 1018; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 156;
		EnterRecursionRule(_localctx, 156, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1021; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1027;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 1023;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1024; declaration();
					}
					} 
				}
				State = 1029;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,113,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IncludeExpressionContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(RAGEParser.StringLiteral, 0); }
		public IncludeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_includeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.EnterIncludeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRAGEListener typedListener = listener as IRAGEListener;
			if (typedListener != null) typedListener.ExitIncludeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAGEVisitor<TResult> typedVisitor = visitor as IRAGEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncludeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeExpressionContext includeExpression() {
		IncludeExpressionContext _localctx = new IncludeExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_includeExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030; Match(T__5);
			State = 1031; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 2: return argumentExpressionList_sempred((ArgumentExpressionListContext)_localctx, predIndex);
		case 6: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 7: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 8: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 9: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 10: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 11: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 12: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 13: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 14: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 15: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 27: return initDeclaratorList_sempred((InitDeclaratorListContext)_localctx, predIndex);
		case 32: return arrayDeclarationList_sempred((ArrayDeclarationListContext)_localctx, predIndex);
		case 35: return structDeclarationList_sempred((StructDeclarationListContext)_localctx, predIndex);
		case 38: return structDeclaratorList_sempred((StructDeclaratorListContext)_localctx, predIndex);
		case 43: return enumeratorList_sempred((EnumeratorListContext)_localctx, predIndex);
		case 48: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 51: return typeQualifierList_sempred((TypeQualifierListContext)_localctx, predIndex);
		case 53: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 55: return identifierList_sempred((IdentifierListContext)_localctx, predIndex);
		case 60: return initializerList_sempred((InitializerListContext)_localctx, predIndex);
		case 62: return designatorList_sempred((DesignatorListContext)_localctx, predIndex);
		case 69: return blockItemList_sempred((BlockItemListContext)_localctx, predIndex);
		case 75: return translationUnit_sempred((TranslationUnitContext)_localctx, predIndex);
		case 78: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentExpressionList_sempred(ArgumentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initDeclaratorList_sempred(InitDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool arrayDeclarationList_sempred(ArrayDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclarationList_sempred(StructDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclaratorList_sempred(StructDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorList_sempred(EnumeratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 6);
		case 33: return Precpred(Context, 5);
		case 34: return Precpred(Context, 4);
		case 35: return Precpred(Context, 3);
		case 36: return Precpred(Context, 2);
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeQualifierList_sempred(TypeQualifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool identifierList_sempred(IdentifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerList_sempred(InitializerListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool designatorList_sempred(DesignatorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool blockItemList_sempred(BlockItemListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool translationUnit_sempred(TranslationUnitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\\\x40C");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4");
		sb.Append("\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35");
		sb.Append("\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:");
		sb.Append("\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41\x4\x42");
		sb.Append("\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46\t\x46\x4");
		sb.Append("G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN\x4O\t");
		sb.Append("O\x4P\tP\x4Q\tQ\x3\x2\x3\x2\x3\x2\x6\x2\xA6\n\x2\r\x2\xE\x2");
		sb.Append("\xA7\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xAE\n\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\xBB\n");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\a\x3\xC8\n\x3\f\x3\xE\x3\xCB\v\x3\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\a\x4\xD3\n\x4\f\x4\xE\x4\xD6\v\x4\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xE0\n\x5\x3\x6");
		sb.Append("\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xEA\n\a\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\xF8\n");
		sb.Append("\b\f\b\xE\b\xFB\v\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\a\t\x109\n\t\f\t\xE\t\x10C\v\t\x3\n\x3");
		sb.Append("\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x117\n\n\f\n\xE\n");
		sb.Append("\x11A\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x12B\n\v\f\v\xE\v\x12E\v\v\x3");
		sb.Append("\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x139\n\f\f\f");
		sb.Append("\xE\f\x13C\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x144\n\r\f");
		sb.Append("\r\xE\r\x147\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x14F");
		sb.Append("\n\xE\f\xE\xE\xE\x152\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\a\xF\x15A\n\xF\f\xF\xE\xF\x15D\v\xF\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\a\x10\x165\n\x10\f\x10\xE\x10\x168\v\x10");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x170\n\x11");
		sb.Append("\f\x11\xE\x11\x173\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12");
		sb.Append("\x3\x12\x5\x12\x17B\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13");
		sb.Append("\x5\x13\x182\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\a\x15\x18C\n\x15\f\x15\xE\x15\x18F\v\x15\x3\x16");
		sb.Append("\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x197\n\x18\x3\x18");
		sb.Append("\x3\x18\x3\x19\x6\x19\x19C\n\x19\r\x19\xE\x19\x19D\x3\x1A\x6");
		sb.Append("\x1A\x1A1\n\x1A\r\x1A\xE\x1A\x1A2\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x5\x1B\x1A9\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1D\a\x1D\x1B4\n\x1D\f\x1D\xE\x1D\x1B7\v\x1D");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x1BE\n\x1E\x3\x1F");
		sb.Append("\x3\x1F\x3 \x3 \x3!\x5!\x1C5\n!\x3!\x3!\x3!\x3!\x3!\x3!\x3!");
		sb.Append("\x5!\x1CE\n!\x3!\x3!\x3!\x3!\x5!\x1D4\n!\x3!\x3!\x3!\x3!\x5");
		sb.Append("!\x1DA\n!\x3!\x3!\x3!\x5!\x1DF\n!\x3!\x3!\x3!\x3!\x5!\x1E5\n");
		sb.Append("!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x1EE\n!\x3\"\x3\"\x3\"\x3");
		sb.Append("\"\x3\"\x3\"\a\"\x1F6\n\"\f\"\xE\"\x1F9\v\"\x3#\x3#\x3$\x3$");
		sb.Append("\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x20A\n$\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\a%\x211\n%\f%\xE%\x214\v%\x3&\x3&\x5&\x218");
		sb.Append("\n&\x3&\x3&\x3\'\x3\'\x5\'\x21E\n\'\x3\'\x3\'\x5\'\x222\n\'");
		sb.Append("\x5\'\x224\n\'\x3(\x3(\x3(\x3(\x3(\x3(\a(\x22C\n(\f(\xE(\x22F");
		sb.Append("\v(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x239\n)\x3*\x3*\x3*");
		sb.Append("\x3*\x5*\x23F\n*\x3*\x3*\x3*\x3*\x3*\x5*\x246\n*\x3*\x3*\x5");
		sb.Append("*\x24A\n*\x3+\x3+\x3+\x3+\x5+\x250\n+\x3+\x3+\x3+\x3+\x3+\x5");
		sb.Append("+\x257\n+\x3+\x3+\x5+\x25B\n+\x3,\x3,\x5,\x25F\n,\x3,\x3,\x3");
		sb.Append(",\x3,\x3,\x3,\x5,\x267\n,\x3,\x3,\x3,\x3,\x3,\x3,\x3,\x5,\x270");
		sb.Append("\n,\x3-\x3-\x3-\x3-\x3-\x3-\a-\x278\n-\f-\xE-\x27B\v-\x3.\x3");
		sb.Append(".\x3.\x3.\x3.\x5.\x282\n.\x3/\x3/\x3\x30\x3\x30\x3\x31\x5\x31");
		sb.Append("\x289\n\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32");
		sb.Append("\x3\x32\x5\x32\x293\n\x32\x3\x32\x3\x32\x3\x32\x5\x32\x298\n");
		sb.Append("\x32\x3\x32\x5\x32\x29B\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3");
		sb.Append("\x32\x5\x32\x2A2\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3");
		sb.Append("\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32");
		sb.Append("\x2B1\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32");
		sb.Append("\x3\x32\x3\x32\x3\x32\x5\x32\x2BD\n\x32\x3\x32\a\x32\x2C0\n");
		sb.Append("\x32\f\x32\xE\x32\x2C3\v\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3");
		sb.Append("\x33\a\x33\x2CA\n\x33\f\x33\xE\x33\x2CD\v\x33\x3\x34\x3\x34");
		sb.Append("\x5\x34\x2D1\n\x34\x3\x34\x3\x34\x5\x34\x2D5\n\x34\x3\x34\x3");
		sb.Append("\x34\x3\x34\x5\x34\x2DA\n\x34\x3\x34\x3\x34\x5\x34\x2DE\n\x34");
		sb.Append("\x3\x34\x5\x34\x2E1\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35");
		sb.Append("\a\x35\x2E8\n\x35\f\x35\xE\x35\x2EB\v\x35\x3\x36\x3\x36\x3\x36");
		sb.Append("\x3\x36\x5\x36\x2F1\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37");
		sb.Append("\x3\x37\a\x37\x2F9\n\x37\f\x37\xE\x37\x2FC\v\x37\x3\x38\x3\x38");
		sb.Append("\x3\x38\x3\x38\x3\x38\x5\x38\x303\n\x38\x5\x38\x305\n\x38\x3");
		sb.Append("\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\a\x39\x30D\n\x39\f\x39");
		sb.Append("\xE\x39\x310\v\x39\x3:\x3:\x5:\x314\n:\x3;\x3;\x3<\x3<\x3=\x3");
		sb.Append("=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x324\n=\x3>\x3>\x5>\x328");
		sb.Append("\n>\x3>\x3>\x3>\x3>\x3>\x5>\x32F\n>\x3>\a>\x332\n>\f>\xE>\x335");
		sb.Append("\v>\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\a@\x33F\n@\f@\xE@\x342\v");
		sb.Append("@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x34A\n\x41");
		sb.Append("\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x352\n\x42");
		sb.Append("\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x35A\n\x42");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x360\n\x43\x5\x43\x362\n");
		sb.Append("\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44");
		sb.Append("\x3\x44\x3\x44\x3\x44\x5\x44\x36F\n\x44\x3\x45\x3\x45\x3\x45");
		sb.Append("\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x379\n\x45\x3\x45");
		sb.Append("\x3\x45\x3\x45\x3\x45\x5\x45\x37F\n\x45\x5\x45\x381\n\x45\x3");
		sb.Append("\x46\x3\x46\x5\x46\x385\n\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G");
		sb.Append("\x3G\aG\x38E\nG\fG\xEG\x391\vG\x3H\x3H\x5H\x395\nH\x3I\x5I\x398");
		sb.Append("\nI\x3I\x3I\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J");
		sb.Append("\x3J\x3J\x3J\x3J\x3J\x5J\x3AD\nJ\x3J\x3J\x5J\x3B1\nJ\x3J\x3");
		sb.Append("J\x5J\x3B5\nJ\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x3BD\nJ\x3J\x3J\x5");
		sb.Append("J\x3C1\nJ\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x5J\x3CD\n");
		sb.Append("J\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x5K\x3D8\nK\x3K\x5K\x3DB");
		sb.Append("\nK\x3L\x5L\x3DE\nL\x3L\x3L\x3M\x3M\x3M\x3M\x3M\aM\x3E7\nM\f");
		sb.Append("M\xEM\x3EA\vM\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x3F4\nN\x3");
		sb.Append("O\x5O\x3F7\nO\x3O\x3O\x5O\x3FB\nO\x3O\x3O\x3P\x3P\x3P\x3P\x3");
		sb.Append("P\aP\x404\nP\fP\xEP\x407\vP\x3Q\x3Q\x3Q\x3Q\x2\x1D\x4\x6\xE");
		sb.Append("\x10\x12\x14\x16\x18\x1A\x1C\x1E (\x38\x42HNX\x62hlpz~\x8C\x98");
		sb.Append("\x9ER\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$");
		sb.Append("&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62");
		sb.Append("\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92");
		sb.Append("\x94\x96\x98\x9A\x9C\x9E\xA0\x2\a\a\x2\x30\x30\x32\x32\x34\x34");
		sb.Append("\x37\x37<=\x3\x2\x42L\x4\x2\t\t\x1D\x1D\n\x2\x5\x5\f\f\x11\x11");
		sb.Append("\x14\x14\x18\x19\x1B\x1B\x1E\x1E\"\"\x3\x2$%\x459\x2\xAD\x3");
		sb.Append("\x2\x2\x2\x4\xAF\x3\x2\x2\x2\x6\xCC\x3\x2\x2\x2\b\xDF\x3\x2");
		sb.Append("\x2\x2\n\xE1\x3\x2\x2\x2\f\xE9\x3\x2\x2\x2\xE\xEB\x3\x2\x2\x2");
		sb.Append("\x10\xFC\x3\x2\x2\x2\x12\x10D\x3\x2\x2\x2\x14\x11B\x3\x2\x2");
		sb.Append("\x2\x16\x12F\x3\x2\x2\x2\x18\x13D\x3\x2\x2\x2\x1A\x148\x3\x2");
		sb.Append("\x2\x2\x1C\x153\x3\x2\x2\x2\x1E\x15E\x3\x2\x2\x2 \x169\x3\x2");
		sb.Append("\x2\x2\"\x174\x3\x2\x2\x2$\x181\x3\x2\x2\x2&\x183\x3\x2\x2\x2");
		sb.Append("(\x185\x3\x2\x2\x2*\x190\x3\x2\x2\x2,\x192\x3\x2\x2\x2.\x194");
		sb.Append("\x3\x2\x2\x2\x30\x19B\x3\x2\x2\x2\x32\x1A0\x3\x2\x2\x2\x34\x1A8");
		sb.Append("\x3\x2\x2\x2\x36\x1AA\x3\x2\x2\x2\x38\x1AD\x3\x2\x2\x2:\x1BD");
		sb.Append("\x3\x2\x2\x2<\x1BF\x3\x2\x2\x2>\x1C1\x3\x2\x2\x2@\x1ED\x3\x2");
		sb.Append("\x2\x2\x42\x1EF\x3\x2\x2\x2\x44\x1FA\x3\x2\x2\x2\x46\x209\x3");
		sb.Append("\x2\x2\x2H\x20B\x3\x2\x2\x2J\x215\x3\x2\x2\x2L\x223\x3\x2\x2");
		sb.Append("\x2N\x225\x3\x2\x2\x2P\x238\x3\x2\x2\x2R\x249\x3\x2\x2\x2T\x25A");
		sb.Append("\x3\x2\x2\x2V\x26F\x3\x2\x2\x2X\x271\x3\x2\x2\x2Z\x281\x3\x2");
		sb.Append("\x2\x2\\\x283\x3\x2\x2\x2^\x285\x3\x2\x2\x2`\x288\x3\x2\x2\x2");
		sb.Append("\x62\x292\x3\x2\x2\x2\x64\x2CB\x3\x2\x2\x2\x66\x2E0\x3\x2\x2");
		sb.Append("\x2h\x2E2\x3\x2\x2\x2j\x2F0\x3\x2\x2\x2l\x2F2\x3\x2\x2\x2n\x304");
		sb.Append("\x3\x2\x2\x2p\x306\x3\x2\x2\x2r\x311\x3\x2\x2\x2t\x315\x3\x2");
		sb.Append("\x2\x2v\x317\x3\x2\x2\x2x\x323\x3\x2\x2\x2z\x325\x3\x2\x2\x2");
		sb.Append("|\x336\x3\x2\x2\x2~\x339\x3\x2\x2\x2\x80\x349\x3\x2\x2\x2\x82");
		sb.Append("\x359\x3\x2\x2\x2\x84\x361\x3\x2\x2\x2\x86\x36E\x3\x2\x2\x2");
		sb.Append("\x88\x380\x3\x2\x2\x2\x8A\x382\x3\x2\x2\x2\x8C\x388\x3\x2\x2");
		sb.Append("\x2\x8E\x394\x3\x2\x2\x2\x90\x397\x3\x2\x2\x2\x92\x3CC\x3\x2");
		sb.Append("\x2\x2\x94\x3DA\x3\x2\x2\x2\x96\x3DD\x3\x2\x2\x2\x98\x3E1\x3");
		sb.Append("\x2\x2\x2\x9A\x3F3\x3\x2\x2\x2\x9C\x3F6\x3\x2\x2\x2\x9E\x3FE");
		sb.Append("\x3\x2\x2\x2\xA0\x408\x3\x2\x2\x2\xA2\xAE\aQ\x2\x2\xA3\xAE\a");
		sb.Append("R\x2\x2\xA4\xA6\aS\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2");
		sb.Append("\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAE\x3\x2\x2");
		sb.Append("\x2\xA9\xAA\a$\x2\x2\xAA\xAB\x5(\x15\x2\xAB\xAC\a%\x2\x2\xAC");
		sb.Append("\xAE\x3\x2\x2\x2\xAD\xA2\x3\x2\x2\x2\xAD\xA3\x3\x2\x2\x2\xAD");
		sb.Append("\xA5\x3\x2\x2\x2\xAD\xA9\x3\x2\x2\x2\xAE\x3\x3\x2\x2\x2\xAF");
		sb.Append("\xB0\b\x3\x1\x2\xB0\xB1\x5\x2\x2\x2\xB1\xC9\x3\x2\x2\x2\xB2");
		sb.Append("\xB3\f\b\x2\x2\xB3\xB4\a&\x2\x2\xB4\xB5\x5(\x15\x2\xB5\xB6\a");
		sb.Append("\'\x2\x2\xB6\xC8\x3\x2\x2\x2\xB7\xB8\f\a\x2\x2\xB8\xBA\a$\x2");
		sb.Append("\x2\xB9\xBB\x5\x6\x4\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2");
		sb.Append("\x2\xBB\xBC\x3\x2\x2\x2\xBC\xC8\a%\x2\x2\xBD\xBE\f\x6\x2\x2");
		sb.Append("\xBE\xBF\aP\x2\x2\xBF\xC8\aQ\x2\x2\xC0\xC1\f\x5\x2\x2\xC1\xC2");
		sb.Append("\aO\x2\x2\xC2\xC8\aQ\x2\x2\xC3\xC4\f\x4\x2\x2\xC4\xC8\a\x31");
		sb.Append("\x2\x2\xC5\xC6\f\x3\x2\x2\xC6\xC8\a\x33\x2\x2\xC7\xB2\x3\x2");
		sb.Append("\x2\x2\xC7\xB7\x3\x2\x2\x2\xC7\xBD\x3\x2\x2\x2\xC7\xC0\x3\x2");
		sb.Append("\x2\x2\xC7\xC3\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xCB\x3\x2");
		sb.Append("\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\x5\x3\x2");
		sb.Append("\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCD\b\x4\x1\x2\xCD\xCE\x5$\x13");
		sb.Append("\x2\xCE\xD4\x3\x2\x2\x2\xCF\xD0\f\x3\x2\x2\xD0\xD1\a\x41\x2");
		sb.Append("\x2\xD1\xD3\x5$\x13\x2\xD2\xCF\x3\x2\x2\x2\xD3\xD6\x3\x2\x2");
		sb.Append("\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\a\x3\x2\x2\x2");
		sb.Append("\xD6\xD4\x3\x2\x2\x2\xD7\xE0\x5\x4\x3\x2\xD8\xD9\a\x31\x2\x2");
		sb.Append("\xD9\xE0\x5\b\x5\x2\xDA\xDB\a\x33\x2\x2\xDB\xE0\x5\b\x5\x2\xDC");
		sb.Append("\xDD\x5\n\x6\x2\xDD\xDE\x5\f\a\x2\xDE\xE0\x3\x2\x2\x2\xDF\xD7");
		sb.Append("\x3\x2\x2\x2\xDF\xD8\x3\x2\x2\x2\xDF\xDA\x3\x2\x2\x2\xDF\xDC");
		sb.Append("\x3\x2\x2\x2\xE0\t\x3\x2\x2\x2\xE1\xE2\t\x2\x2\x2\xE2\v\x3\x2");
		sb.Append("\x2\x2\xE3\xEA\x5\b\x5\x2\xE4\xE5\a$\x2\x2\xE5\xE6\x5r:\x2\xE6");
		sb.Append("\xE7\a%\x2\x2\xE7\xE8\x5\f\a\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE3");
		sb.Append("\x3\x2\x2\x2\xE9\xE4\x3\x2\x2\x2\xEA\r\x3\x2\x2\x2\xEB\xEC\b");
		sb.Append("\b\x1\x2\xEC\xED\x5\f\a\x2\xED\xF9\x3\x2\x2\x2\xEE\xEF\f\x5");
		sb.Append("\x2\x2\xEF\xF0\a\x34\x2\x2\xF0\xF8\x5\f\a\x2\xF1\xF2\f\x4\x2");
		sb.Append("\x2\xF2\xF3\a\x35\x2\x2\xF3\xF8\x5\f\a\x2\xF4\xF5\f\x3\x2\x2");
		sb.Append("\xF5\xF6\a\x36\x2\x2\xF6\xF8\x5\f\a\x2\xF7\xEE\x3\x2\x2\x2\xF7");
		sb.Append("\xF1\x3\x2\x2\x2\xF7\xF4\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9");
		sb.Append("\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xF\x3\x2\x2\x2\xFB");
		sb.Append("\xF9\x3\x2\x2\x2\xFC\xFD\b\t\x1\x2\xFD\xFE\x5\xE\b\x2\xFE\x10A");
		sb.Append("\x3\x2\x2\x2\xFF\x100\f\x5\x2\x2\x100\x101\a\x30\x2\x2\x101");
		sb.Append("\x109\x5\xE\b\x2\x102\x103\f\x4\x2\x2\x103\x104\a\x32\x2\x2");
		sb.Append("\x104\x109\x5\xE\b\x2\x105\x106\f\x3\x2\x2\x106\x107\aP\x2\x2");
		sb.Append("\x107\x109\x5\xE\b\x2\x108\xFF\x3\x2\x2\x2\x108\x102\x3\x2\x2");
		sb.Append("\x2\x108\x105\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3");
		sb.Append("\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x11\x3\x2\x2\x2\x10C\x10A");
		sb.Append("\x3\x2\x2\x2\x10D\x10E\b\n\x1\x2\x10E\x10F\x5\x10\t\x2\x10F");
		sb.Append("\x118\x3\x2\x2\x2\x110\x111\f\x4\x2\x2\x111\x112\a.\x2\x2\x112");
		sb.Append("\x117\x5\x10\t\x2\x113\x114\f\x3\x2\x2\x114\x115\a/\x2\x2\x115");
		sb.Append("\x117\x5\x10\t\x2\x116\x110\x3\x2\x2\x2\x116\x113\x3\x2\x2\x2");
		sb.Append("\x117\x11A\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118\x119\x3\x2");
		sb.Append("\x2\x2\x119\x13\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11B\x11C");
		sb.Append("\b\v\x1\x2\x11C\x11D\x5\x12\n\x2\x11D\x12C\x3\x2\x2\x2\x11E");
		sb.Append("\x11F\f\x6\x2\x2\x11F\x120\a*\x2\x2\x120\x12B\x5\x12\n\x2\x121");
		sb.Append("\x122\f\x5\x2\x2\x122\x123\a,\x2\x2\x123\x12B\x5\x12\n\x2\x124");
		sb.Append("\x125\f\x4\x2\x2\x125\x126\a+\x2\x2\x126\x12B\x5\x12\n\x2\x127");
		sb.Append("\x128\f\x3\x2\x2\x128\x129\a-\x2\x2\x129\x12B\x5\x12\n\x2\x12A");
		sb.Append("\x11E\x3\x2\x2\x2\x12A\x121\x3\x2\x2\x2\x12A\x124\x3\x2\x2\x2");
		sb.Append("\x12A\x127\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2");
		sb.Append("\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x15\x3\x2\x2\x2\x12E\x12C");
		sb.Append("\x3\x2\x2\x2\x12F\x130\b\f\x1\x2\x130\x131\x5\x14\v\x2\x131");
		sb.Append("\x13A\x3\x2\x2\x2\x132\x133\f\x4\x2\x2\x133\x134\aM\x2\x2\x134");
		sb.Append("\x139\x5\x14\v\x2\x135\x136\f\x3\x2\x2\x136\x137\aN\x2\x2\x137");
		sb.Append("\x139\x5\x14\v\x2\x138\x132\x3\x2\x2\x2\x138\x135\x3\x2\x2\x2");
		sb.Append("\x139\x13C\x3\x2\x2\x2\x13A\x138\x3\x2\x2\x2\x13A\x13B\x3\x2");
		sb.Append("\x2\x2\x13B\x17\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13D\x13E");
		sb.Append("\b\r\x1\x2\x13E\x13F\x5\x16\f\x2\x13F\x145\x3\x2\x2\x2\x140");
		sb.Append("\x141\f\x3\x2\x2\x141\x142\a\x37\x2\x2\x142\x144\x5\x16\f\x2");
		sb.Append("\x143\x140\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2");
		sb.Append("\x2\x2\x145\x146\x3\x2\x2\x2\x146\x19\x3\x2\x2\x2\x147\x145");
		sb.Append("\x3\x2\x2\x2\x148\x149\b\xE\x1\x2\x149\x14A\x5\x18\r\x2\x14A");
		sb.Append("\x150\x3\x2\x2\x2\x14B\x14C\f\x3\x2\x2\x14C\x14D\a;\x2\x2\x14D");
		sb.Append("\x14F\x5\x18\r\x2\x14E\x14B\x3\x2\x2\x2\x14F\x152\x3\x2\x2\x2");
		sb.Append("\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151\x1B\x3\x2");
		sb.Append("\x2\x2\x152\x150\x3\x2\x2\x2\x153\x154\b\xF\x1\x2\x154\x155");
		sb.Append("\x5\x1A\xE\x2\x155\x15B\x3\x2\x2\x2\x156\x157\f\x3\x2\x2\x157");
		sb.Append("\x158\a\x38\x2\x2\x158\x15A\x5\x1A\xE\x2\x159\x156\x3\x2\x2");
		sb.Append("\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3");
		sb.Append("\x2\x2\x2\x15C\x1D\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15E\x15F");
		sb.Append("\b\x10\x1\x2\x15F\x160\x5\x1C\xF\x2\x160\x166\x3\x2\x2\x2\x161");
		sb.Append("\x162\f\x3\x2\x2\x162\x163\a\x39\x2\x2\x163\x165\x5\x1C\xF\x2");
		sb.Append("\x164\x161\x3\x2\x2\x2\x165\x168\x3\x2\x2\x2\x166\x164\x3\x2");
		sb.Append("\x2\x2\x166\x167\x3\x2\x2\x2\x167\x1F\x3\x2\x2\x2\x168\x166");
		sb.Append("\x3\x2\x2\x2\x169\x16A\b\x11\x1\x2\x16A\x16B\x5\x1E\x10\x2\x16B");
		sb.Append("\x171\x3\x2\x2\x2\x16C\x16D\f\x3\x2\x2\x16D\x16E\a:\x2\x2\x16E");
		sb.Append("\x170\x5\x1E\x10\x2\x16F\x16C\x3\x2\x2\x2\x170\x173\x3\x2\x2");
		sb.Append("\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172!\x3\x2");
		sb.Append("\x2\x2\x173\x171\x3\x2\x2\x2\x174\x17A\x5 \x11\x2\x175\x176");
		sb.Append("\a>\x2\x2\x176\x177\x5(\x15\x2\x177\x178\a?\x2\x2\x178\x179");
		sb.Append("\x5\"\x12\x2\x179\x17B\x3\x2\x2\x2\x17A\x175\x3\x2\x2\x2\x17A");
		sb.Append("\x17B\x3\x2\x2\x2\x17B#\x3\x2\x2\x2\x17C\x182\x5\"\x12\x2\x17D");
		sb.Append("\x17E\x5\b\x5\x2\x17E\x17F\x5&\x14\x2\x17F\x180\x5$\x13\x2\x180");
		sb.Append("\x182\x3\x2\x2\x2\x181\x17C\x3\x2\x2\x2\x181\x17D\x3\x2\x2\x2");
		sb.Append("\x182%\x3\x2\x2\x2\x183\x184\t\x3\x2\x2\x184\'\x3\x2\x2\x2\x185");
		sb.Append("\x186\b\x15\x1\x2\x186\x187\x5$\x13\x2\x187\x18D\x3\x2\x2\x2");
		sb.Append("\x188\x189\f\x3\x2\x2\x189\x18A\a\x41\x2\x2\x18A\x18C\x5$\x13");
		sb.Append("\x2\x18B\x188\x3\x2\x2\x2\x18C\x18F\x3\x2\x2\x2\x18D\x18B\x3");
		sb.Append("\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E)\x3\x2\x2\x2\x18F\x18D");
		sb.Append("\x3\x2\x2\x2\x190\x191\x5\"\x12\x2\x191+\x3\x2\x2\x2\x192\x193");
		sb.Append("\a\x3\x2\x2\x193-\x3\x2\x2\x2\x194\x196\x5\x30\x19\x2\x195\x197");
		sb.Append("\x5\x38\x1D\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197");
		sb.Append("\x198\x3\x2\x2\x2\x198\x199\a@\x2\x2\x199/\x3\x2\x2\x2\x19A");
		sb.Append("\x19C\x5\x34\x1B\x2\x19B\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2");
		sb.Append("\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x31\x3");
		sb.Append("\x2\x2\x2\x19F\x1A1\x5\x34\x1B\x2\x1A0\x19F\x3\x2\x2\x2\x1A1");
		sb.Append("\x1A2\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2");
		sb.Append("\x1A3\x33\x3\x2\x2\x2\x1A4\x1A9\x5<\x1F\x2\x1A5\x1A9\x5> \x2");
		sb.Append("\x1A6\x1A9\x5^\x30\x2\x1A7\x1A9\x5\x36\x1C\x2\x1A8\x1A4\x3\x2");
		sb.Append("\x2\x2\x1A8\x1A5\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A7");
		sb.Append("\x3\x2\x2\x2\x1A9\x35\x3\x2\x2\x2\x1AA\x1AB\a\x4\x2\x2\x1AB");
		sb.Append("\x1AC\aQ\x2\x2\x1AC\x37\x3\x2\x2\x2\x1AD\x1AE\b\x1D\x1\x2\x1AE");
		sb.Append("\x1AF\x5:\x1E\x2\x1AF\x1B5\x3\x2\x2\x2\x1B0\x1B1\f\x3\x2\x2");
		sb.Append("\x1B1\x1B2\a\x41\x2\x2\x1B2\x1B4\x5:\x1E\x2\x1B3\x1B0\x3\x2");
		sb.Append("\x2\x2\x1B4\x1B7\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B5\x1B6");
		sb.Append("\x3\x2\x2\x2\x1B6\x39\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B8");
		sb.Append("\x1BE\x5`\x31\x2\x1B9\x1BA\x5`\x31\x2\x1BA\x1BB\a\x42\x2\x2");
		sb.Append("\x1BB\x1BC\x5x=\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1B8\x3\x2\x2");
		sb.Append("\x2\x1BD\x1B9\x3\x2\x2\x2\x1BE;\x3\x2\x2\x2\x1BF\x1C0\t\x4\x2");
		sb.Append("\x2\x1C0=\x3\x2\x2\x2\x1C1\x1C2\t\x5\x2\x2\x1C2?\x3\x2\x2\x2");
		sb.Append("\x1C3\x1C5\x5<\x1F\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4\x1C5\x3\x2");
		sb.Append("\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x5> \x2\x1C7\x1C8\aQ");
		sb.Append("\x2\x2\x1C8\x1C9\a&\x2\x2\x1C9\x1CA\x5*\x16\x2\x1CA\x1CB\a\'");
		sb.Append("\x2\x2\x1CB\x1EE\x3\x2\x2\x2\x1CC\x1CE\x5<\x1F\x2\x1CD\x1CC");
		sb.Append("\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF");
		sb.Append("\x1D0\x5> \x2\x1D0\x1D1\aQ\x2\x2\x1D1\x1D3\a&\x2\x2\x1D2\x1D4");
		sb.Append("\x5*\x16\x2\x1D3\x1D2\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4");
		sb.Append("\x1D5\x3\x2\x2\x2\x1D5\x1D6\a\'\x2\x2\x1D6\x1D7\a\x42\x2\x2");
		sb.Append("\x1D7\x1D9\a(\x2\x2\x1D8\x1DA\x5\x42\"\x2\x1D9\x1D8\x3\x2\x2");
		sb.Append("\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\a");
		sb.Append(")\x2\x2\x1DC\x1EE\x3\x2\x2\x2\x1DD\x1DF\x5<\x1F\x2\x1DE\x1DD");
		sb.Append("\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0");
		sb.Append("\x1E1\x5> \x2\x1E1\x1E2\aQ\x2\x2\x1E2\x1E4\a&\x2\x2\x1E3\x1E5");
		sb.Append("\x5*\x16\x2\x1E4\x1E3\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5");
		sb.Append("\x1E6\x3\x2\x2\x2\x1E6\x1E7\a\'\x2\x2\x1E7\x1E8\a\x42\x2\x2");
		sb.Append("\x1E8\x1E9\a(\x2\x2\x1E9\x1EA\x5\x42\"\x2\x1EA\x1EB\a\x41\x2");
		sb.Append("\x2\x1EB\x1EC\a)\x2\x2\x1EC\x1EE\x3\x2\x2\x2\x1ED\x1C4\x3\x2");
		sb.Append("\x2\x2\x1ED\x1CD\x3\x2\x2\x2\x1ED\x1DE\x3\x2\x2\x2\x1EE\x41");
		sb.Append("\x3\x2\x2\x2\x1EF\x1F0\b\"\x1\x2\x1F0\x1F1\x5\x44#\x2\x1F1\x1F7");
		sb.Append("\x3\x2\x2\x2\x1F2\x1F3\f\x3\x2\x2\x1F3\x1F4\a\x41\x2\x2\x1F4");
		sb.Append("\x1F6\x5\x44#\x2\x1F5\x1F2\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2\x2");
		sb.Append("\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x43\x3\x2");
		sb.Append("\x2\x2\x1F9\x1F7\x3\x2\x2\x2\x1FA\x1FB\x5*\x16\x2\x1FB\x45\x3");
		sb.Append("\x2\x2\x2\x1FC\x1FD\a\x1F\x2\x2\x1FD\x1FE\aQ\x2\x2\x1FE\x1FF");
		sb.Append("\a(\x2\x2\x1FF\x200\x5N(\x2\x200\x201\a)\x2\x2\x201\x20A\x3");
		sb.Append("\x2\x2\x2\x202\x203\a\x1F\x2\x2\x203\x204\aQ\x2\x2\x204\x205");
		sb.Append("\a(\x2\x2\x205\x206\x5N(\x2\x206\x207\a\x41\x2\x2\x207\x208");
		sb.Append("\a)\x2\x2\x208\x20A\x3\x2\x2\x2\x209\x1FC\x3\x2\x2\x2\x209\x202");
		sb.Append("\x3\x2\x2\x2\x20AG\x3\x2\x2\x2\x20B\x20C\b%\x1\x2\x20C\x20D");
		sb.Append("\x5J&\x2\x20D\x212\x3\x2\x2\x2\x20E\x20F\f\x3\x2\x2\x20F\x211");
		sb.Append("\x5J&\x2\x210\x20E\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2\x212\x210");
		sb.Append("\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2\x213I\x3\x2\x2\x2\x214\x212");
		sb.Append("\x3\x2\x2\x2\x215\x217\x5L\'\x2\x216\x218\x5N(\x2\x217\x216");
		sb.Append("\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219");
		sb.Append("\x21A\a@\x2\x2\x21AK\x3\x2\x2\x2\x21B\x21D\x5> \x2\x21C\x21E");
		sb.Append("\x5L\'\x2\x21D\x21C\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x224");
		sb.Append("\x3\x2\x2\x2\x21F\x221\x5^\x30\x2\x220\x222\x5L\'\x2\x221\x220");
		sb.Append("\x3\x2\x2\x2\x221\x222\x3\x2\x2\x2\x222\x224\x3\x2\x2\x2\x223");
		sb.Append("\x21B\x3\x2\x2\x2\x223\x21F\x3\x2\x2\x2\x224M\x3\x2\x2\x2\x225");
		sb.Append("\x226\b(\x1\x2\x226\x227\x5P)\x2\x227\x22D\x3\x2\x2\x2\x228");
		sb.Append("\x229\f\x3\x2\x2\x229\x22A\a\x41\x2\x2\x22A\x22C\x5P)\x2\x22B");
		sb.Append("\x228\x3\x2\x2\x2\x22C\x22F\x3\x2\x2\x2\x22D\x22B\x3\x2\x2\x2");
		sb.Append("\x22D\x22E\x3\x2\x2\x2\x22EO\x3\x2\x2\x2\x22F\x22D\x3\x2\x2");
		sb.Append("\x2\x230\x231\x5> \x2\x231\x232\aQ\x2\x2\x232\x239\x3\x2\x2");
		sb.Append("\x2\x233\x234\x5> \x2\x234\x235\aQ\x2\x2\x235\x236\a\x42\x2");
		sb.Append("\x2\x236\x237\x5*\x16\x2\x237\x239\x3\x2\x2\x2\x238\x230\x3");
		sb.Append("\x2\x2\x2\x238\x233\x3\x2\x2\x2\x239Q\x3\x2\x2\x2\x23A\x23B");
		sb.Append("\a\x1F\x2\x2\x23B\x23C\aQ\x2\x2\x23C\x23E\a(\x2\x2\x23D\x23F");
		sb.Append("\x5N(\x2\x23E\x23D\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F\x240");
		sb.Append("\x3\x2\x2\x2\x240\x24A\a)\x2\x2\x241\x242\a\x1F\x2\x2\x242\x243");
		sb.Append("\aQ\x2\x2\x243\x245\a(\x2\x2\x244\x246\x5N(\x2\x245\x244\x3");
		sb.Append("\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x248");
		sb.Append("\a\x41\x2\x2\x248\x24A\a)\x2\x2\x249\x23A\x3\x2\x2\x2\x249\x241");
		sb.Append("\x3\x2\x2\x2\x24AS\x3\x2\x2\x2\x24B\x24C\a\x13\x2\x2\x24C\x24D");
		sb.Append("\aQ\x2\x2\x24D\x24F\a(\x2\x2\x24E\x250\x5X-\x2\x24F\x24E\x3");
		sb.Append("\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x25B");
		sb.Append("\a)\x2\x2\x252\x253\a\x13\x2\x2\x253\x254\aQ\x2\x2\x254\x256");
		sb.Append("\a(\x2\x2\x255\x257\x5X-\x2\x256\x255\x3\x2\x2\x2\x256\x257");
		sb.Append("\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\a\x41\x2\x2\x259");
		sb.Append("\x25B\a)\x2\x2\x25A\x24B\x3\x2\x2\x2\x25A\x252\x3\x2\x2\x2\x25B");
		sb.Append("U\x3\x2\x2\x2\x25C\x25E\a\x13\x2\x2\x25D\x25F\aQ\x2\x2\x25E");
		sb.Append("\x25D\x3\x2\x2\x2\x25E\x25F\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2");
		sb.Append("\x260\x261\a(\x2\x2\x261\x262\x5X-\x2\x262\x263\a)\x2\x2\x263");
		sb.Append("\x270\x3\x2\x2\x2\x264\x266\a\x13\x2\x2\x265\x267\aQ\x2\x2\x266");
		sb.Append("\x265\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2");
		sb.Append("\x268\x269\a(\x2\x2\x269\x26A\x5X-\x2\x26A\x26B\a\x41\x2\x2");
		sb.Append("\x26B\x26C\a)\x2\x2\x26C\x270\x3\x2\x2\x2\x26D\x26E\a\x13\x2");
		sb.Append("\x2\x26E\x270\aQ\x2\x2\x26F\x25C\x3\x2\x2\x2\x26F\x264\x3\x2");
		sb.Append("\x2\x2\x26F\x26D\x3\x2\x2\x2\x270W\x3\x2\x2\x2\x271\x272\b-");
		sb.Append("\x1\x2\x272\x273\x5Z.\x2\x273\x279\x3\x2\x2\x2\x274\x275\f\x3");
		sb.Append("\x2\x2\x275\x276\a\x41\x2\x2\x276\x278\x5Z.\x2\x277\x274\x3");
		sb.Append("\x2\x2\x2\x278\x27B\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2\x279\x27A");
		sb.Append("\x3\x2\x2\x2\x27AY\x3\x2\x2\x2\x27B\x279\x3\x2\x2\x2\x27C\x282");
		sb.Append("\x5\\/\x2\x27D\x27E\x5\\/\x2\x27E\x27F\a\x42\x2\x2\x27F\x280");
		sb.Append("\x5*\x16\x2\x280\x282\x3\x2\x2\x2\x281\x27C\x3\x2\x2\x2\x281");
		sb.Append("\x27D\x3\x2\x2\x2\x282[\x3\x2\x2\x2\x283\x284\aQ\x2\x2\x284");
		sb.Append("]\x3\x2\x2\x2\x285\x286\a\r\x2\x2\x286_\x3\x2\x2\x2\x287\x289");
		sb.Append("\x5\x66\x34\x2\x288\x287\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289");
		sb.Append("\x28A\x3\x2\x2\x2\x28A\x28B\x5\x62\x32\x2\x28B\x61\x3\x2\x2");
		sb.Append("\x2\x28C\x28D\b\x32\x1\x2\x28D\x293\aQ\x2\x2\x28E\x28F\a$\x2");
		sb.Append("\x2\x28F\x290\x5`\x31\x2\x290\x291\a%\x2\x2\x291\x293\x3\x2");
		sb.Append("\x2\x2\x292\x28C\x3\x2\x2\x2\x292\x28E\x3\x2\x2\x2\x293\x2C1");
		sb.Append("\x3\x2\x2\x2\x294\x295\f\b\x2\x2\x295\x297\a&\x2\x2\x296\x298");
		sb.Append("\x5h\x35\x2\x297\x296\x3\x2\x2\x2\x297\x298\x3\x2\x2\x2\x298");
		sb.Append("\x29A\x3\x2\x2\x2\x299\x29B\x5$\x13\x2\x29A\x299\x3\x2\x2\x2");
		sb.Append("\x29A\x29B\x3\x2\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x2C0\a\'\x2");
		sb.Append("\x2\x29D\x29E\f\a\x2\x2\x29E\x29F\a&\x2\x2\x29F\x2A1\a\x1D\x2");
		sb.Append("\x2\x2A0\x2A2\x5h\x35\x2\x2A1\x2A0\x3\x2\x2\x2\x2A1\x2A2\x3");
		sb.Append("\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4\x5$\x13\x2\x2A4\x2A5");
		sb.Append("\a\'\x2\x2\x2A5\x2C0\x3\x2\x2\x2\x2A6\x2A7\f\x6\x2\x2\x2A7\x2A8");
		sb.Append("\a&\x2\x2\x2A8\x2A9\x5h\x35\x2\x2A9\x2AA\a\x1D\x2\x2\x2AA\x2AB");
		sb.Append("\x5$\x13\x2\x2AB\x2AC\a\'\x2\x2\x2AC\x2C0\x3\x2\x2\x2\x2AD\x2AE");
		sb.Append("\f\x5\x2\x2\x2AE\x2B0\a&\x2\x2\x2AF\x2B1\x5h\x35\x2\x2B0\x2AF");
		sb.Append("\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2");
		sb.Append("\x2B3\a\x34\x2\x2\x2B3\x2C0\a\'\x2\x2\x2B4\x2B5\f\x4\x2\x2\x2B5");
		sb.Append("\x2B6\a$\x2\x2\x2B6\x2B7\x5j\x36\x2\x2B7\x2B8\a%\x2\x2\x2B8");
		sb.Append("\x2C0\x3\x2\x2\x2\x2B9\x2BA\f\x3\x2\x2\x2BA\x2BC\a$\x2\x2\x2BB");
		sb.Append("\x2BD\x5p\x39\x2\x2BC\x2BB\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2");
		sb.Append("\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\a%\x2\x2\x2BF\x294\x3\x2\x2");
		sb.Append("\x2\x2BF\x29D\x3\x2\x2\x2\x2BF\x2A6\x3\x2\x2\x2\x2BF\x2AD\x3");
		sb.Append("\x2\x2\x2\x2BF\x2B4\x3\x2\x2\x2\x2BF\x2B9\x3\x2\x2\x2\x2C0\x2C3");
		sb.Append("\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2\x2C2");
		sb.Append("\x63\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C4\x2CA\n\x6\x2\x2");
		sb.Append("\x2C5\x2C6\a$\x2\x2\x2C6\x2C7\x5\x64\x33\x2\x2C7\x2C8\a%\x2");
		sb.Append("\x2\x2C8\x2CA\x3\x2\x2\x2\x2C9\x2C4\x3\x2\x2\x2\x2C9\x2C5\x3");
		sb.Append("\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2\x2CB\x2CC");
		sb.Append("\x3\x2\x2\x2\x2CC\x65\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE");
		sb.Append("\x2D0\a\x34\x2\x2\x2CF\x2D1\x5h\x35\x2\x2D0\x2CF\x3\x2\x2\x2");
		sb.Append("\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2E1\x3\x2\x2\x2\x2D2\x2D4\a\x34");
		sb.Append("\x2\x2\x2D3\x2D5\x5h\x35\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4\x2D5");
		sb.Append("\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2E1\x5\x66\x34\x2\x2D7");
		sb.Append("\x2D9\a;\x2\x2\x2D8\x2DA\x5h\x35\x2\x2D9\x2D8\x3\x2\x2\x2\x2D9");
		sb.Append("\x2DA\x3\x2\x2\x2\x2DA\x2E1\x3\x2\x2\x2\x2DB\x2DD\a;\x2\x2\x2DC");
		sb.Append("\x2DE\x5h\x35\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2");
		sb.Append("\x2DE\x2DF\x3\x2\x2\x2\x2DF\x2E1\x5\x66\x34\x2\x2E0\x2CE\x3");
		sb.Append("\x2\x2\x2\x2E0\x2D2\x3\x2\x2\x2\x2E0\x2D7\x3\x2\x2\x2\x2E0\x2DB");
		sb.Append("\x3\x2\x2\x2\x2E1g\x3\x2\x2\x2\x2E2\x2E3\b\x35\x1\x2\x2E3\x2E4");
		sb.Append("\x5^\x30\x2\x2E4\x2E9\x3\x2\x2\x2\x2E5\x2E6\f\x3\x2\x2\x2E6");
		sb.Append("\x2E8\x5^\x30\x2\x2E7\x2E5\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2");
		sb.Append("\x2E9\x2E7\x3\x2\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EAi\x3\x2\x2");
		sb.Append("\x2\x2EB\x2E9\x3\x2\x2\x2\x2EC\x2F1\x5l\x37\x2\x2ED\x2EE\x5");
		sb.Append("l\x37\x2\x2EE\x2EF\a\x41\x2\x2\x2EF\x2F1\x3\x2\x2\x2\x2F0\x2EC");
		sb.Append("\x3\x2\x2\x2\x2F0\x2ED\x3\x2\x2\x2\x2F1k\x3\x2\x2\x2\x2F2\x2F3");
		sb.Append("\b\x37\x1\x2\x2F3\x2F4\x5n\x38\x2\x2F4\x2FA\x3\x2\x2\x2\x2F5");
		sb.Append("\x2F6\f\x3\x2\x2\x2F6\x2F7\a\x41\x2\x2\x2F7\x2F9\x5n\x38\x2");
		sb.Append("\x2F8\x2F5\x3\x2\x2\x2\x2F9\x2FC\x3\x2\x2\x2\x2FA\x2F8\x3\x2");
		sb.Append("\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FBm\x3\x2\x2\x2\x2FC\x2FA\x3");
		sb.Append("\x2\x2\x2\x2FD\x2FE\x5\x30\x19\x2\x2FE\x2FF\x5`\x31\x2\x2FF");
		sb.Append("\x305\x3\x2\x2\x2\x300\x302\x5\x32\x1A\x2\x301\x303\x5t;\x2");
		sb.Append("\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x305\x3\x2");
		sb.Append("\x2\x2\x304\x2FD\x3\x2\x2\x2\x304\x300\x3\x2\x2\x2\x305o\x3");
		sb.Append("\x2\x2\x2\x306\x307\b\x39\x1\x2\x307\x308\aQ\x2\x2\x308\x30E");
		sb.Append("\x3\x2\x2\x2\x309\x30A\f\x3\x2\x2\x30A\x30B\a\x41\x2\x2\x30B");
		sb.Append("\x30D\aQ\x2\x2\x30C\x309\x3\x2\x2\x2\x30D\x310\x3\x2\x2\x2\x30E");
		sb.Append("\x30C\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30Fq\x3\x2\x2\x2\x310");
		sb.Append("\x30E\x3\x2\x2\x2\x311\x313\x5L\'\x2\x312\x314\x5t;\x2\x313");
		sb.Append("\x312\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314s\x3\x2\x2\x2\x315");
		sb.Append("\x316\x5\x66\x34\x2\x316u\x3\x2\x2\x2\x317\x318\aQ\x2\x2\x318");
		sb.Append("w\x3\x2\x2\x2\x319\x324\x5$\x13\x2\x31A\x31B\a(\x2\x2\x31B\x31C");
		sb.Append("\x5z>\x2\x31C\x31D\a)\x2\x2\x31D\x324\x3\x2\x2\x2\x31E\x31F");
		sb.Append("\a(\x2\x2\x31F\x320\x5z>\x2\x320\x321\a\x41\x2\x2\x321\x322");
		sb.Append("\a)\x2\x2\x322\x324\x3\x2\x2\x2\x323\x319\x3\x2\x2\x2\x323\x31A");
		sb.Append("\x3\x2\x2\x2\x323\x31E\x3\x2\x2\x2\x324y\x3\x2\x2\x2\x325\x327");
		sb.Append("\b>\x1\x2\x326\x328\x5|?\x2\x327\x326\x3\x2\x2\x2\x327\x328");
		sb.Append("\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A\x5x=\x2\x32A\x333");
		sb.Append("\x3\x2\x2\x2\x32B\x32C\f\x3\x2\x2\x32C\x32E\a\x41\x2\x2\x32D");
		sb.Append("\x32F\x5|?\x2\x32E\x32D\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F");
		sb.Append("\x330\x3\x2\x2\x2\x330\x332\x5x=\x2\x331\x32B\x3\x2\x2\x2\x332");
		sb.Append("\x335\x3\x2\x2\x2\x333\x331\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2");
		sb.Append("\x334{\x3\x2\x2\x2\x335\x333\x3\x2\x2\x2\x336\x337\x5~@\x2\x337");
		sb.Append("\x338\a\x42\x2\x2\x338}\x3\x2\x2\x2\x339\x33A\b@\x1\x2\x33A");
		sb.Append("\x33B\x5\x80\x41\x2\x33B\x340\x3\x2\x2\x2\x33C\x33D\f\x3\x2");
		sb.Append("\x2\x33D\x33F\x5\x80\x41\x2\x33E\x33C\x3\x2\x2\x2\x33F\x342");
		sb.Append("\x3\x2\x2\x2\x340\x33E\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341");
		sb.Append("\x7F\x3\x2\x2\x2\x342\x340\x3\x2\x2\x2\x343\x344\a&\x2\x2\x344");
		sb.Append("\x345\x5*\x16\x2\x345\x346\a\'\x2\x2\x346\x34A\x3\x2\x2\x2\x347");
		sb.Append("\x348\aP\x2\x2\x348\x34A\aQ\x2\x2\x349\x343\x3\x2\x2\x2\x349");
		sb.Append("\x347\x3\x2\x2\x2\x34A\x81\x3\x2\x2\x2\x34B\x34C\a\x17\x2\x2");
		sb.Append("\x34C\x34D\a$\x2\x2\x34D\x34E\x5(\x15\x2\x34E\x34F\a%\x2\x2");
		sb.Append("\x34F\x351\x5\x86\x44\x2\x350\x352\x5\x84\x43\x2\x351\x350\x3");
		sb.Append("\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x35A\x3\x2\x2\x2\x353\x354");
		sb.Append("\a \x2\x2\x354\x355\a$\x2\x2\x355\x356\x5(\x15\x2\x356\x357");
		sb.Append("\a%\x2\x2\x357\x358\x5\x86\x44\x2\x358\x35A\x3\x2\x2\x2\x359");
		sb.Append("\x34B\x3\x2\x2\x2\x359\x353\x3\x2\x2\x2\x35A\x83\x3\x2\x2\x2");
		sb.Append("\x35B\x35C\a\x12\x2\x2\x35C\x362\x5\x86\x44\x2\x35D\x35F\a\x12");
		sb.Append("\x2\x2\x35E\x360\x5\x82\x42\x2\x35F\x35E\x3\x2\x2\x2\x35F\x360");
		sb.Append("\x3\x2\x2\x2\x360\x362\x3\x2\x2\x2\x361\x35B\x3\x2\x2\x2\x361");
		sb.Append("\x35D\x3\x2\x2\x2\x362\x85\x3\x2\x2\x2\x363\x36F\x5\x88\x45");
		sb.Append("\x2\x364\x36F\x5\x8A\x46\x2\x365\x36F\x5\x82\x42\x2\x366\x36F");
		sb.Append("\x5\x90I\x2\x367\x36F\x5\x92J\x2\x368\x36F\x5\x94K\x2\x369\x36F");
		sb.Append("\x5V,\x2\x36A\x36F\x5T+\x2\x36B\x36F\x5@!\x2\x36C\x36F\x5R*");
		sb.Append("\x2\x36D\x36F\x5,\x17\x2\x36E\x363\x3\x2\x2\x2\x36E\x364\x3");
		sb.Append("\x2\x2\x2\x36E\x365\x3\x2\x2\x2\x36E\x366\x3\x2\x2\x2\x36E\x367");
		sb.Append("\x3\x2\x2\x2\x36E\x368\x3\x2\x2\x2\x36E\x369\x3\x2\x2\x2\x36E");
		sb.Append("\x36A\x3\x2\x2\x2\x36E\x36B\x3\x2\x2\x2\x36E\x36C\x3\x2\x2\x2");
		sb.Append("\x36E\x36D\x3\x2\x2\x2\x36F\x87\x3\x2\x2\x2\x370\x371\aQ\x2");
		sb.Append("\x2\x371\x372\a?\x2\x2\x372\x381\x5\x86\x44\x2\x373\x374\a\v");
		sb.Append("\x2\x2\x374\x375\x5*\x16\x2\x375\x376\a?\x2\x2\x376\x378\x5");
		sb.Append("\x86\x44\x2\x377\x379\x5\x94K\x2\x378\x377\x3\x2\x2\x2\x378");
		sb.Append("\x379\x3\x2\x2\x2\x379\x381\x3\x2\x2\x2\x37A\x37B\a\xF\x2\x2");
		sb.Append("\x37B\x37C\a?\x2\x2\x37C\x37E\x5\x86\x44\x2\x37D\x37F\x5\x94");
		sb.Append("K\x2\x37E\x37D\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x381\x3");
		sb.Append("\x2\x2\x2\x380\x370\x3\x2\x2\x2\x380\x373\x3\x2\x2\x2\x380\x37A");
		sb.Append("\x3\x2\x2\x2\x381\x89\x3\x2\x2\x2\x382\x384\a(\x2\x2\x383\x385");
		sb.Append("\x5\x8CG\x2\x384\x383\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385");
		sb.Append("\x386\x3\x2\x2\x2\x386\x387\a)\x2\x2\x387\x8B\x3\x2\x2\x2\x388");
		sb.Append("\x389\bG\x1\x2\x389\x38A\x5\x8EH\x2\x38A\x38F\x3\x2\x2\x2\x38B");
		sb.Append("\x38C\f\x3\x2\x2\x38C\x38E\x5\x8EH\x2\x38D\x38B\x3\x2\x2\x2");
		sb.Append("\x38E\x391\x3\x2\x2\x2\x38F\x38D\x3\x2\x2\x2\x38F\x390\x3\x2");
		sb.Append("\x2\x2\x390\x8D\x3\x2\x2\x2\x391\x38F\x3\x2\x2\x2\x392\x395");
		sb.Append("\x5.\x18\x2\x393\x395\x5\x86\x44\x2\x394\x392\x3\x2\x2\x2\x394");
		sb.Append("\x393\x3\x2\x2\x2\x395\x8F\x3\x2\x2\x2\x396\x398\x5(\x15\x2");
		sb.Append("\x397\x396\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398\x399\x3\x2");
		sb.Append("\x2\x2\x399\x39A\a@\x2\x2\x39A\x91\x3\x2\x2\x2\x39B\x39C\a#");
		sb.Append("\x2\x2\x39C\x39D\a$\x2\x2\x39D\x39E\x5(\x15\x2\x39E\x39F\a%");
		sb.Append("\x2\x2\x39F\x3A0\x5\x86\x44\x2\x3A0\x3CD\x3\x2\x2\x2\x3A1\x3A2");
		sb.Append("\a\x10\x2\x2\x3A2\x3A3\x5\x86\x44\x2\x3A3\x3A4\a#\x2\x2\x3A4");
		sb.Append("\x3A5\a$\x2\x2\x3A5\x3A6\x5(\x15\x2\x3A6\x3A7\a%\x2\x2\x3A7");
		sb.Append("\x3A8\a@\x2\x2\x3A8\x3CD\x3\x2\x2\x2\x3A9\x3AA\a\x15\x2\x2\x3AA");
		sb.Append("\x3AC\a$\x2\x2\x3AB\x3AD\x5(\x15\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC");
		sb.Append("\x3AD\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3B0\a@\x2\x2\x3AF");
		sb.Append("\x3B1\x5(\x15\x2\x3B0\x3AF\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2\x2");
		sb.Append("\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B4\a@\x2\x2\x3B3\x3B5\x5(\x15");
		sb.Append("\x2\x3B4\x3B3\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B6\x3");
		sb.Append("\x2\x2\x2\x3B6\x3B7\a%\x2\x2\x3B7\x3CD\x5\x86\x44\x2\x3B8\x3B9");
		sb.Append("\a\x15\x2\x2\x3B9\x3BA\a$\x2\x2\x3BA\x3BC\x5.\x18\x2\x3BB\x3BD");
		sb.Append("\x5(\x15\x2\x3BC\x3BB\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD");
		sb.Append("\x3BE\x3\x2\x2\x2\x3BE\x3C0\a@\x2\x2\x3BF\x3C1\x5(\x15\x2\x3C0");
		sb.Append("\x3BF\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2");
		sb.Append("\x3C2\x3C3\a%\x2\x2\x3C3\x3C4\x5\x86\x44\x2\x3C4\x3CD\x3\x2");
		sb.Append("\x2\x2\x3C5\x3C6\a\x6\x2\x2\x3C6\x3C7\a$\x2\x2\x3C7\x3C8\aQ");
		sb.Append("\x2\x2\x3C8\x3C9\a\a\x2\x2\x3C9\x3CA\aQ\x2\x2\x3CA\x3CB\a%\x2");
		sb.Append("\x2\x3CB\x3CD\x5\x86\x44\x2\x3CC\x39B\x3\x2\x2\x2\x3CC\x3A1");
		sb.Append("\x3\x2\x2\x2\x3CC\x3A9\x3\x2\x2\x2\x3CC\x3B8\x3\x2\x2\x2\x3CC");
		sb.Append("\x3C5\x3\x2\x2\x2\x3CD\x93\x3\x2\x2\x2\x3CE\x3CF\a\x16\x2\x2");
		sb.Append("\x3CF\x3D0\aQ\x2\x2\x3D0\x3DB\a@\x2\x2\x3D1\x3D2\a\xE\x2\x2");
		sb.Append("\x3D2\x3DB\a@\x2\x2\x3D3\x3D4\a\n\x2\x2\x3D4\x3DB\a@\x2\x2\x3D5");
		sb.Append("\x3D7\a\x1A\x2\x2\x3D6\x3D8\x5(\x15\x2\x3D7\x3D6\x3\x2\x2\x2");
		sb.Append("\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9\x3DB\a@\x2");
		sb.Append("\x2\x3DA\x3CE\x3\x2\x2\x2\x3DA\x3D1\x3\x2\x2\x2\x3DA\x3D3\x3");
		sb.Append("\x2\x2\x2\x3DA\x3D5\x3\x2\x2\x2\x3DB\x95\x3\x2\x2\x2\x3DC\x3DE");
		sb.Append("\x5\x98M\x2\x3DD\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE");
		sb.Append("\x3DF\x3\x2\x2\x2\x3DF\x3E0\a\x2\x2\x3\x3E0\x97\x3\x2\x2\x2");
		sb.Append("\x3E1\x3E2\bM\x1\x2\x3E2\x3E3\x5\x9AN\x2\x3E3\x3E8\x3\x2\x2");
		sb.Append("\x2\x3E4\x3E5\f\x3\x2\x2\x3E5\x3E7\x5\x9AN\x2\x3E6\x3E4\x3\x2");
		sb.Append("\x2\x2\x3E7\x3EA\x3\x2\x2\x2\x3E8\x3E6\x3\x2\x2\x2\x3E8\x3E9");
		sb.Append("\x3\x2\x2\x2\x3E9\x99\x3\x2\x2\x2\x3EA\x3E8\x3\x2\x2\x2\x3EB");
		sb.Append("\x3F4\x5\x9CO\x2\x3EC\x3F4\x5T+\x2\x3ED\x3F4\x5R*\x2\x3EE\x3F4");
		sb.Append("\x5@!\x2\x3EF\x3F4\x5,\x17\x2\x3F0\x3F4\x5.\x18\x2\x3F1\x3F4");
		sb.Append("\x5\xA0Q\x2\x3F2\x3F4\a@\x2\x2\x3F3\x3EB\x3\x2\x2\x2\x3F3\x3EC");
		sb.Append("\x3\x2\x2\x2\x3F3\x3ED\x3\x2\x2\x2\x3F3\x3EE\x3\x2\x2\x2\x3F3");
		sb.Append("\x3EF\x3\x2\x2\x2\x3F3\x3F0\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2");
		sb.Append("\x3F3\x3F2\x3\x2\x2\x2\x3F4\x9B\x3\x2\x2\x2\x3F5\x3F7\x5\x30");
		sb.Append("\x19\x2\x3F6\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F8");
		sb.Append("\x3\x2\x2\x2\x3F8\x3FA\x5`\x31\x2\x3F9\x3FB\x5\x9EP\x2\x3FA");
		sb.Append("\x3F9\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3FC\x3\x2\x2\x2");
		sb.Append("\x3FC\x3FD\x5\x8A\x46\x2\x3FD\x9D\x3\x2\x2\x2\x3FE\x3FF\bP\x1");
		sb.Append("\x2\x3FF\x400\x5.\x18\x2\x400\x405\x3\x2\x2\x2\x401\x402\f\x3");
		sb.Append("\x2\x2\x402\x404\x5.\x18\x2\x403\x401\x3\x2\x2\x2\x404\x407");
		sb.Append("\x3\x2\x2\x2\x405\x403\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406");
		sb.Append("\x9F\x3\x2\x2\x2\x407\x405\x3\x2\x2\x2\x408\x409\a\b\x2\x2\x409");
		sb.Append("\x40A\aS\x2\x2\x40A\xA1\x3\x2\x2\x2t\xA7\xAD\xBA\xC7\xC9\xD4");
		sb.Append("\xDF\xE9\xF7\xF9\x108\x10A\x116\x118\x12A\x12C\x138\x13A\x145");
		sb.Append("\x150\x15B\x166\x171\x17A\x181\x18D\x196\x19D\x1A2\x1A8\x1B5");
		sb.Append("\x1BD\x1C4\x1CD\x1D3\x1D9\x1DE\x1E4\x1ED\x1F7\x209\x212\x217");
		sb.Append("\x21D\x221\x223\x22D\x238\x23E\x245\x249\x24F\x256\x25A\x25E");
		sb.Append("\x266\x26F\x279\x281\x288\x292\x297\x29A\x2A1\x2B0\x2BC\x2BF");
		sb.Append("\x2C1\x2C9\x2CB\x2D0\x2D4\x2D9\x2DD\x2E0\x2E9\x2F0\x2FA\x302");
		sb.Append("\x304\x30E\x313\x323\x327\x32E\x333\x340\x349\x351\x359\x35F");
		sb.Append("\x361\x36E\x378\x37E\x380\x384\x38F\x394\x397\x3AC\x3B0\x3B4");
		sb.Append("\x3BC\x3C0\x3CC\x3D7\x3DA\x3DD\x3E8\x3F3\x3F6\x3FA\x405");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
