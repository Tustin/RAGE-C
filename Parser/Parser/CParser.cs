//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Auto=4, Break=5, Case=6, Char=7, Const=8, Continue=9, 
		Default=10, Do=11, Double=12, Else=13, Enum=14, Float=15, For=16, Goto=17, 
		If=18, Int=19, Long=20, Return=21, Short=22, Signed=23, Static=24, String=25, 
		Struct=26, Switch=27, Unsigned=28, Void=29, While=30, Bool=31, Complex=32, 
		Generic=33, Imaginary=34, Noreturn=35, StaticAssert=36, ThreadLocal=37, 
		LeftParen=38, RightParen=39, LeftBracket=40, RightBracket=41, LeftBrace=42, 
		RightBrace=43, Less=44, LessEqual=45, Greater=46, GreaterEqual=47, LeftShift=48, 
		RightShift=49, Plus=50, PlusPlus=51, Minus=52, MinusMinus=53, Star=54, 
		Div=55, Mod=56, And=57, Or=58, AndAnd=59, OrOr=60, Caret=61, Not=62, Tilde=63, 
		Question=64, Colon=65, Semi=66, Comma=67, Assign=68, StarAssign=69, DivAssign=70, 
		ModAssign=71, PlusAssign=72, MinusAssign=73, LeftShiftAssign=74, RightShiftAssign=75, 
		AndAssign=76, XorAssign=77, OrAssign=78, Equal=79, NotEqual=80, Arrow=81, 
		Dot=82, Ellipsis=83, Identifier=84, Constant=85, StringLiteral=86, ComplexDefine=87, 
		AsmBlock=88, LineAfterPreprocessing=89, LineDirective=90, PragmaDirective=91, 
		Whitespace=92, Newline=93, BlockComment=94, LineComment=95;
	public const int
		RULE_primaryExpression = 0, RULE_genericSelection = 1, RULE_genericAssocList = 2, 
		RULE_genericAssociation = 3, RULE_postfixExpression = 4, RULE_argumentExpressionList = 5, 
		RULE_unaryExpression = 6, RULE_unaryOperator = 7, RULE_castExpression = 8, 
		RULE_multiplicativeExpression = 9, RULE_additiveExpression = 10, RULE_shiftExpression = 11, 
		RULE_relationalExpression = 12, RULE_equalityExpression = 13, RULE_andExpression = 14, 
		RULE_exclusiveOrExpression = 15, RULE_inclusiveOrExpression = 16, RULE_logicalAndExpression = 17, 
		RULE_logicalOrExpression = 18, RULE_conditionalExpression = 19, RULE_assignmentExpression = 20, 
		RULE_assignmentOperator = 21, RULE_expression = 22, RULE_constantExpression = 23, 
		RULE_declaration = 24, RULE_declarationSpecifiers = 25, RULE_declarationSpecifiers2 = 26, 
		RULE_declarationSpecifier = 27, RULE_initDeclaratorList = 28, RULE_initDeclarator = 29, 
		RULE_storageClassSpecifier = 30, RULE_typeSpecifier = 31, RULE_structOrUnionSpecifier = 32, 
		RULE_structOrUnion = 33, RULE_structDeclarationList = 34, RULE_structDeclaration = 35, 
		RULE_specifierQualifierList = 36, RULE_structDeclaratorList = 37, RULE_structDeclarator = 38, 
		RULE_enumDeclarator = 39, RULE_enumSpecifier = 40, RULE_enumeratorList = 41, 
		RULE_enumerator = 42, RULE_enumerationConstant = 43, RULE_typeQualifier = 44, 
		RULE_declarator = 45, RULE_directDeclarator = 46, RULE_nestedParenthesesBlock = 47, 
		RULE_pointer = 48, RULE_typeQualifierList = 49, RULE_parameterTypeList = 50, 
		RULE_parameterList = 51, RULE_parameterDeclaration = 52, RULE_identifierList = 53, 
		RULE_typeName = 54, RULE_abstractDeclarator = 55, RULE_typedefName = 56, 
		RULE_initializer = 57, RULE_initializerList = 58, RULE_designation = 59, 
		RULE_designatorList = 60, RULE_designator = 61, RULE_staticAssertDeclaration = 62, 
		RULE_selectionStatement = 63, RULE_selectionElseStatement = 64, RULE_statement = 65, 
		RULE_labeledStatement = 66, RULE_compoundStatement = 67, RULE_blockItemList = 68, 
		RULE_blockItem = 69, RULE_expressionStatement = 70, RULE_iterationStatement = 71, 
		RULE_jumpStatement = 72, RULE_compilationUnit = 73, RULE_translationUnit = 74, 
		RULE_externalDeclaration = 75, RULE_functionDefinition = 76, RULE_declarationList = 77;
	public static readonly string[] ruleNames = {
		"primaryExpression", "genericSelection", "genericAssocList", "genericAssociation", 
		"postfixExpression", "argumentExpressionList", "unaryExpression", "unaryOperator", 
		"castExpression", "multiplicativeExpression", "additiveExpression", "shiftExpression", 
		"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
		"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
		"conditionalExpression", "assignmentExpression", "assignmentOperator", 
		"expression", "constantExpression", "declaration", "declarationSpecifiers", 
		"declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
		"initDeclarator", "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
		"structOrUnion", "structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structDeclarator", "enumDeclarator", "enumSpecifier", 
		"enumeratorList", "enumerator", "enumerationConstant", "typeQualifier", 
		"declarator", "directDeclarator", "nestedParenthesesBlock", "pointer", 
		"typeQualifierList", "parameterTypeList", "parameterList", "parameterDeclaration", 
		"identifierList", "typeName", "abstractDeclarator", "typedefName", "initializer", 
		"initializerList", "designation", "designatorList", "designator", "staticAssertDeclaration", 
		"selectionStatement", "selectionElseStatement", "statement", "labeledStatement", 
		"compoundStatement", "blockItemList", "blockItem", "expressionStatement", 
		"iterationStatement", "jumpStatement", "compilationUnit", "translationUnit", 
		"externalDeclaration", "functionDefinition", "declarationList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'__extension__'", "'bool'", "'union'", "'auto'", "'break'", "'case'", 
		"'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", 
		"'enum'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'return'", 
		"'short'", "'signed'", "'static'", "'string'", "'struct'", "'switch'", 
		"'unsigned'", "'void'", "'while'", "'_Bool'", "'_Complex'", "'_Generic'", 
		"'_Imaginary'", "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", 
		"'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
		"'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", 
		"'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Auto", "Break", "Case", "Char", "Const", "Continue", 
		"Default", "Do", "Double", "Else", "Enum", "Float", "For", "Goto", "If", 
		"Int", "Long", "Return", "Short", "Signed", "Static", "String", "Struct", 
		"Switch", "Unsigned", "Void", "While", "Bool", "Complex", "Generic", "Imaginary", 
		"Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual", 
		"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus", 
		"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
		"Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
		"StarAssign", "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
		"Arrow", "Dot", "Ellipsis", "Identifier", "Constant", "StringLiteral", 
		"ComplexDefine", "AsmBlock", "LineAfterPreprocessing", "LineDirective", 
		"PragmaDirective", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public CParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenericSelectionContext genericSelection() {
			return GetRuleContext<GenericSelectionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		try {
			int _alt;
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; Match(Identifier);
				}
				break;
			case Constant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; Match(Constant);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 158; Match(StringLiteral);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 161;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163; Match(LeftParen);
				State = 164; expression(0);
				State = 165; Match(RightParen);
				}
				break;
			case Generic:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; genericSelection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSelectionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public GenericAssocListContext genericAssocList() {
			return GetRuleContext<GenericAssocListContext>(0);
		}
		public GenericSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSelection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericSelection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericSelection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSelectionContext genericSelection() {
		GenericSelectionContext _localctx = new GenericSelectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_genericSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(Generic);
			State = 171; Match(LeftParen);
			State = 172; assignmentExpression();
			State = 173; Match(Comma);
			State = 174; genericAssocList(0);
			State = 175; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssocListContext : ParserRuleContext {
		public GenericAssociationContext genericAssociation() {
			return GetRuleContext<GenericAssociationContext>(0);
		}
		public GenericAssocListContext genericAssocList() {
			return GetRuleContext<GenericAssocListContext>(0);
		}
		public GenericAssocListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssocList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericAssocList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericAssocList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssocList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssocListContext genericAssocList() {
		return genericAssocList(0);
	}

	private GenericAssocListContext genericAssocList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		GenericAssocListContext _localctx = new GenericAssocListContext(Context, _parentState);
		GenericAssocListContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_genericAssocList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 178; genericAssociation();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GenericAssocListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_genericAssocList);
					State = 180;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 181; Match(Comma);
					State = 182; genericAssociation();
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GenericAssociationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public GenericAssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssociation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterGenericAssociation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitGenericAssociation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssociationContext genericAssociation() {
		GenericAssociationContext _localctx = new GenericAssociationContext(Context, State);
		EnterRule(_localctx, 6, RULE_genericAssociation);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Struct:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188; typeName();
				State = 189; Match(Colon);
				State = 190; assignmentExpression();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; Match(Default);
				State = 193; Match(Colon);
				State = 194; assignmentExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 198; primaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 221;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 200;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 201; Match(LeftBracket);
						State = 202; expression(0);
						State = 203; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 205;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 206; Match(LeftParen);
						State = 208;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
							{
							State = 207; argumentExpressionList(0);
							}
						}

						State = 210; Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 211;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 212; Match(Dot);
						State = 213; Match(Identifier);
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 214;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 215; Match(Arrow);
						State = 216; Match(Identifier);
						}
						break;
					case 5:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 217;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 218; Match(PlusPlus);
						}
						break;
					case 6:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 219;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 220; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		return argumentExpressionList(0);
	}

	private ArgumentExpressionListContext argumentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, _parentState);
		ArgumentExpressionListContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_argumentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 227; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentExpressionList);
					State = 229;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 230; Match(Comma);
					State = 231; assignmentExpression();
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Generic:
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; postfixExpression(0);
				}
				break;
			case PlusPlus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; Match(PlusPlus);
				State = 239; unaryExpression();
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 240; Match(MinusMinus);
				State = 241; unaryExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242; unaryOperator();
				State = 243; castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_castExpression);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(LeftParen);
				State = 251; typeName();
				State = 252; Match(RightParen);
				State = 253; castExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255; Match(T__0);
				State = 256; Match(LeftParen);
				State = 257; typeName();
				State = 258; Match(RightParen);
				State = 259; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 264; castExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 275;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 266;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 267; Match(Star);
						State = 268; castExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 269;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 270; Match(Div);
						State = 271; castExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 272;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 273; Match(Mod);
						State = 274; castExpression();
						}
						break;
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 281; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 289;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 283;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 284; Match(Plus);
						State = 285; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 286;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 287; Match(Minus);
						State = 288; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 295; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 303;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 297;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 298; Match(LeftShift);
						State = 299; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 300;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 301; Match(RightShift);
						State = 302; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 309; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 323;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 311;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 312; Match(Less);
						State = 313; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 314;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 315; Match(Greater);
						State = 316; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 317;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 318; Match(LessEqual);
						State = 319; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 320;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 321; Match(GreaterEqual);
						State = 322; shiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 329; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 339;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 337;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 331;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 332; Match(Equal);
						State = 333; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 334;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 335; Match(NotEqual);
						State = 336; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 343; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 345;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 346; Match(And);
					State = 347; equalityExpression(0);
					}
					} 
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 354; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 361;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 356;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 357; Match(Caret);
					State = 358; andExpression(0);
					}
					} 
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 365; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 372;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 367;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 368; Match(Or);
					State = 369; exclusiveOrExpression(0);
					}
					} 
				}
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 376; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 383;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 378;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 379; Match(AndAnd);
					State = 380; inclusiveOrExpression(0);
					}
					} 
				}
				State = 385;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 387; logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 389;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 390; Match(OrOr);
					State = 391; logicalAndExpression(0);
					}
					} 
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; logicalOrExpression(0);
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 398; Match(Question);
				State = 399; expression(0);
				State = 400; Match(Colon);
				State = 401; conditionalExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		try {
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; unaryExpression();
				State = 407; assignmentOperator();
				State = 408; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Assign - 68)) | (1L << (StarAssign - 68)) | (1L << (DivAssign - 68)) | (1L << (ModAssign - 68)) | (1L << (PlusAssign - 68)) | (1L << (MinusAssign - 68)) | (1L << (LeftShiftAssign - 68)) | (1L << (RightShiftAssign - 68)) | (1L << (AndAssign - 68)) | (1L << (XorAssign - 68)) | (1L << (OrAssign - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 415; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 417;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 418; Match(Comma);
					State = 419; assignmentExpression();
					}
					} 
				}
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425; conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration);
		int _la;
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case Auto:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Static:
			case String:
			case Struct:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; declarationSpecifiers();
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (LeftParen - 38)) | (1L << (Star - 38)) | (1L << (Caret - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					State = 428; initDeclaratorList(0);
					}
				}

				State = 431; Match(Semi);
				}
				break;
			case StaticAssert:
				EnterOuterAlt(_localctx, 2);
				{
				State = 433; staticAssertDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 436; declarationSpecifier();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 52, RULE_declarationSpecifiers2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 441; declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationSpecifier);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446; storageClassSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 447; typeSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 448; typeQualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 449; enumSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		public InitDeclaratorContext initDeclarator() {
			return GetRuleContext<InitDeclaratorContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		return initDeclaratorList(0);
	}

	private InitDeclaratorListContext initDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, _parentState);
		InitDeclaratorListContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_initDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 453; initDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initDeclaratorList);
					State = 455;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 456; Match(Comma);
					State = 457; initDeclarator();
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 58, RULE_initDeclarator);
		try {
			State = 468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464; declarator();
				State = 465; Match(Assign);
				State = 466; initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			_la = TokenStream.LA(1);
			if ( !(_la==Auto || _la==Static) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public StructOrUnionSpecifierContext structOrUnionSpecifier() {
			return GetRuleContext<StructOrUnionSpecifierContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeSpecifier);
		int _la;
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__2:
			case Struct:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473; structOrUnionSpecifier();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 3);
				{
				State = 474; enumSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionSpecifierContext : ParserRuleContext {
		public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public StructOrUnionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnionSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructOrUnionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructOrUnionSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionSpecifierContext structOrUnionSpecifier() {
		StructOrUnionSpecifierContext _localctx = new StructOrUnionSpecifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_structOrUnionSpecifier);
		int _la;
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; structOrUnion();
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 478; Match(Identifier);
					}
				}

				State = 481; Match(LeftBrace);
				State = 482; structDeclarationList(0);
				State = 483; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; structOrUnion();
				State = 486; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructOrUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructOrUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 66, RULE_structOrUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==Struct) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		public StructDeclarationContext structDeclaration() {
			return GetRuleContext<StructDeclarationContext>(0);
		}
		public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		return structDeclarationList(0);
	}

	private StructDeclarationListContext structDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, _parentState);
		StructDeclarationListContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_structDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 493; structDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclarationList);
					State = 495;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 496; structDeclaration();
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclaration);
		int _la;
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Struct:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; specifierQualifierList();
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (LeftParen - 38)) | (1L << (Star - 38)) | (1L << (Caret - 38)) | (1L << (Colon - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					State = 503; structDeclaratorList(0);
					}
				}

				State = 506; Match(Semi);
				}
				break;
			case StaticAssert:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; staticAssertDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSpecifierQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSpecifierQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifierQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_specifierQualifierList);
		int _la;
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case Char:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Struct:
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 511; typeSpecifier();
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Struct) | (1L << Void))) != 0)) {
					{
					State = 512; specifierQualifierList();
					}
				}

				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515; typeQualifier();
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Struct) | (1L << Void))) != 0)) {
					{
					State = 516; specifierQualifierList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		public StructDeclaratorContext structDeclarator() {
			return GetRuleContext<StructDeclaratorContext>(0);
		}
		public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		return structDeclaratorList(0);
	}

	private StructDeclaratorListContext structDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, _parentState);
		StructDeclaratorListContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_structDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 522; structDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StructDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_structDeclaratorList);
					State = 524;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 525; Match(Comma);
					State = 526; structDeclarator();
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStructDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStructDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_structDeclarator);
		int _la;
		try {
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (LeftParen - 38)) | (1L << (Star - 38)) | (1L << (Caret - 38)) | (1L << (Identifier - 38)))) != 0)) {
					{
					State = 533; declarator();
					}
				}

				State = 536; Match(Colon);
				State = 537; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclaratorContext enumDeclarator() {
		EnumDeclaratorContext _localctx = new EnumDeclaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumDeclarator);
		int _la;
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; Match(Enum);
				State = 541; Match(Identifier);
				State = 542; Match(LeftBrace);
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 543; enumeratorList(0);
					}
				}

				State = 546; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547; Match(Enum);
				State = 548; Match(Identifier);
				State = 549; Match(LeftBrace);
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 550; enumeratorList(0);
					}
				}

				State = 553; Match(Comma);
				State = 554; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumSpecifier);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; Match(Enum);
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 558; Match(Identifier);
					}
				}

				State = 561; Match(LeftBrace);
				State = 562; enumeratorList(0);
				State = 563; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; Match(Enum);
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 566; Match(Identifier);
					}
				}

				State = 569; Match(LeftBrace);
				State = 570; enumeratorList(0);
				State = 571; Match(Comma);
				State = 572; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574; Match(Enum);
				State = 575; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		return enumeratorList(0);
	}

	private EnumeratorListContext enumeratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, _parentState);
		EnumeratorListContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_enumeratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 579; enumerator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 586;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorList);
					State = 581;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 582; Match(Comma);
					State = 583; enumerator();
					}
					} 
				}
				State = 588;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerator);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 589; enumerationConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; enumerationConstant();
				State = 591; Match(Assign);
				State = 592; constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterEnumerationConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitEnumerationConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 86, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeQualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; Match(Const);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 90, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 600; pointer();
				}
			}

			State = 603; directDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDirectDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDirectDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 606; Match(Identifier);
				}
				break;
			case LeftParen:
				{
				State = 607; Match(LeftParen);
				State = 608; declarator();
				State = 609; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 656;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 613;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 614; Match(LeftBracket);
						State = 616;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 615; typeQualifierList(0);
							}
						}

						State = 619;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
							{
							State = 618; assignmentExpression();
							}
						}

						State = 621; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 622;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 623; Match(LeftBracket);
						State = 624; Match(Static);
						State = 626;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 625; typeQualifierList(0);
							}
						}

						State = 628; assignmentExpression();
						State = 629; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 631;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 632; Match(LeftBracket);
						State = 633; typeQualifierList(0);
						State = 634; Match(Static);
						State = 635; assignmentExpression();
						State = 636; Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 638;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 639; Match(LeftBracket);
						State = 641;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Const) {
							{
							State = 640; typeQualifierList(0);
							}
						}

						State = 643; Match(Star);
						State = 644; Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 645;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 646; Match(LeftParen);
						State = 647; parameterTypeList();
						State = 648; Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 650;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 651; Match(LeftParen);
						State = 653;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 652; identifierList(0);
							}
						}

						State = 655; Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterNestedParenthesesBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitNestedParenthesesBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedParenthesesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Unsigned) | (1L << Void) | (1L << While) | (1L << Bool) | (1L << Complex) | (1L << Generic) | (1L << Imaginary) | (1L << Noreturn) | (1L << StaticAssert) | (1L << ThreadLocal) | (1L << LeftParen) | (1L << LeftBracket) | (1L << RightBracket) | (1L << LeftBrace) | (1L << RightBrace) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << LeftShift) | (1L << RightShift) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << And) | (1L << Or) | (1L << AndAnd) | (1L << OrOr) | (1L << Caret) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Semi - 64)) | (1L << (Comma - 64)) | (1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)) | (1L << (Dot - 64)) | (1L << (Ellipsis - 64)) | (1L << (Identifier - 64)) | (1L << (Constant - 64)) | (1L << (StringLiteral - 64)) | (1L << (ComplexDefine - 64)) | (1L << (AsmBlock - 64)) | (1L << (LineAfterPreprocessing - 64)) | (1L << (LineDirective - 64)) | (1L << (PragmaDirective - 64)) | (1L << (Whitespace - 64)) | (1L << (Newline - 64)) | (1L << (BlockComment - 64)) | (1L << (LineComment - 64)))) != 0)) {
				{
				State = 666;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case Auto:
				case Break:
				case Case:
				case Char:
				case Const:
				case Continue:
				case Default:
				case Do:
				case Double:
				case Else:
				case Enum:
				case Float:
				case For:
				case Goto:
				case If:
				case Int:
				case Long:
				case Return:
				case Short:
				case Signed:
				case Static:
				case String:
				case Struct:
				case Switch:
				case Unsigned:
				case Void:
				case While:
				case Bool:
				case Complex:
				case Generic:
				case Imaginary:
				case Noreturn:
				case StaticAssert:
				case ThreadLocal:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Identifier:
				case Constant:
				case StringLiteral:
				case ComplexDefine:
				case AsmBlock:
				case LineAfterPreprocessing:
				case LineDirective:
				case PragmaDirective:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 661;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 662; Match(LeftParen);
					State = 663; nestedParenthesesBlock();
					State = 664; Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 96, RULE_pointer);
		int _la;
		try {
			State = 689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 671; Match(Star);
				State = 673;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 672; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675; Match(Star);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 676; typeQualifierList(0);
					}
				}

				State = 679; pointer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 680; Match(Caret);
				State = 682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 681; typeQualifierList(0);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 684; Match(Caret);
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 685; typeQualifierList(0);
					}
				}

				State = 688; pointer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeQualifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeQualifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		return typeQualifierList(0);
	}

	private TypeQualifierListContext typeQualifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, _parentState);
		TypeQualifierListContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_typeQualifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 692; typeQualifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 698;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeQualifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeQualifierList);
					State = 694;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 695; typeQualifier();
					}
					} 
				}
				State = 700;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 100, RULE_parameterTypeList);
		try {
			State = 706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; parameterList(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 702; parameterList(0);
				State = 703; Match(Comma);
				State = 704; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		return parameterList(0);
	}

	private ParameterListContext parameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterListContext _localctx = new ParameterListContext(Context, _parentState);
		ParameterListContext _prevctx = _localctx;
		int _startState = 102;
		EnterRecursionRule(_localctx, 102, RULE_parameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 709; parameterDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterList);
					State = 711;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 712; Match(Comma);
					State = 713; parameterDeclaration();
					}
					} 
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclarationSpecifiers2Context declarationSpecifiers2() {
			return GetRuleContext<DeclarationSpecifiers2Context>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_parameterDeclaration);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 719; declarationSpecifiers();
				State = 720; declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722; declarationSpecifiers2();
				State = 724;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 723; abstractDeclarator();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		return identifierList(0);
	}

	private IdentifierListContext identifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierListContext _localctx = new IdentifierListContext(Context, _parentState);
		IdentifierListContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_identifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 729; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifierList);
					State = 731;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 732; Match(Comma);
					State = 733; Match(Identifier);
					}
					} 
				}
				State = 738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; specifierQualifierList();
			State = 741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 740; abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 110, RULE_abstractDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; pointer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 112, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 114, RULE_initializer);
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747; assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748; Match(LeftBrace);
				State = 749; initializerList(0);
				State = 750; Match(RightBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 752; Match(LeftBrace);
				State = 753; initializerList(0);
				State = 754; Match(Comma);
				State = 755; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public DesignationContext designation() {
			return GetRuleContext<DesignationContext>(0);
		}
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		return initializerList(0);
	}

	private InitializerListContext initializerList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerListContext _localctx = new InitializerListContext(Context, _parentState);
		InitializerListContext _prevctx = _localctx;
		int _startState = 116;
		EnterRecursionRule(_localctx, 116, RULE_initializerList, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 760; designation();
				}
			}

			State = 763; initializer();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 773;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerList);
					State = 765;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 766; Match(Comma);
					State = 768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 767; designation();
						}
					}

					State = 770; initializer();
					}
					} 
				}
				State = 775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 118, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; designatorList(0);
			State = 777; Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignatorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignatorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		return designatorList(0);
	}

	private DesignatorListContext designatorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DesignatorListContext _localctx = new DesignatorListContext(Context, _parentState);
		DesignatorListContext _prevctx = _localctx;
		int _startState = 120;
		EnterRecursionRule(_localctx, 120, RULE_designatorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 780; designator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 786;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DesignatorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_designatorList);
					State = 782;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 783; designator();
					}
					} 
				}
				State = 788;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 122, RULE_designator);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789; Match(LeftBracket);
				State = 790; constantExpression();
				State = 791; Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; Match(Dot);
				State = 794; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStaticAssertDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStaticAssertDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticAssertDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_staticAssertDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797; Match(StaticAssert);
			State = 798; Match(LeftParen);
			State = 799; constantExpression();
			State = 800; Match(Comma);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 801; Match(StringLiteral);
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==StringLiteral );
			State = 806; Match(RightParen);
			State = 807; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionElseStatementContext selectionElseStatement() {
			return GetRuleContext<SelectionElseStatementContext>(0);
		}
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_selectionStatement);
		try {
			State = 823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809; Match(If);
				State = 810; Match(LeftParen);
				State = 811; expression(0);
				State = 812; Match(RightParen);
				State = 813; statement();
				State = 815;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 814; selectionElseStatement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 817; Match(Switch);
				State = 818; Match(LeftParen);
				State = 819; expression(0);
				State = 820; Match(RightParen);
				State = 821; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectionElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterSelectionElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitSelectionElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionElseStatementContext selectionElseStatement() {
		SelectionElseStatementContext _localctx = new SelectionElseStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_selectionElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; Match(Else);
			State = 826; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_statement);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 828; labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829; compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830; selectionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 831; expressionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 832; iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 833; jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 834; enumSpecifier();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 835; enumDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_labeledStatement);
		try {
			State = 849;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 838; Match(Identifier);
				State = 839; Match(Colon);
				State = 840; statement();
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841; Match(Case);
				State = 842; constantExpression();
				State = 843; Match(Colon);
				State = 844; statement();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846; Match(Default);
				State = 847; Match(Colon);
				State = 848; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; Match(LeftBrace);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Switch) | (1L << Void) | (1L << While) | (1L << Generic) | (1L << StaticAssert) | (1L << LeftParen) | (1L << LeftBrace) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Semi - 66)) | (1L << (Identifier - 66)) | (1L << (Constant - 66)) | (1L << (StringLiteral - 66)))) != 0)) {
				{
				State = 852; blockItemList(0);
				}
			}

			State = 855; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		public BlockItemContext blockItem() {
			return GetRuleContext<BlockItemContext>(0);
		}
		public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		return blockItemList(0);
	}

	private BlockItemListContext blockItemList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BlockItemListContext _localctx = new BlockItemListContext(Context, _parentState);
		BlockItemListContext _prevctx = _localctx;
		int _startState = 136;
		EnterRecursionRule(_localctx, 136, RULE_blockItemList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 858; blockItem();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 864;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BlockItemListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_blockItemList);
					State = 860;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 861; blockItem();
					}
					} 
				}
				State = 866;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockItem);
		try {
			State = 869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 867; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 868; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
				{
				State = 871; expression(0);
				}
			}

			State = 874; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_iterationStatement);
		int _la;
		try {
			State = 918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 876; Match(While);
				State = 877; Match(LeftParen);
				State = 878; expression(0);
				State = 879; Match(RightParen);
				State = 880; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 882; Match(Do);
				State = 883; statement();
				State = 884; Match(While);
				State = 885; Match(LeftParen);
				State = 886; expression(0);
				State = 887; Match(RightParen);
				State = 888; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 890; Match(For);
				State = 891; Match(LeftParen);
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 892; expression(0);
					}
				}

				State = 895; Match(Semi);
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 896; expression(0);
					}
				}

				State = 899; Match(Semi);
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 900; expression(0);
					}
				}

				State = 903; Match(RightParen);
				State = 904; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 905; Match(For);
				State = 906; Match(LeftParen);
				State = 907; declaration();
				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 908; expression(0);
					}
				}

				State = 911; Match(Semi);
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 912; expression(0);
					}
				}

				State = 915; Match(RightParen);
				State = 916; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_jumpStatement);
		int _la;
		try {
			State = 932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Goto:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; Match(Goto);
				State = 921; Match(Identifier);
				State = 922; Match(Semi);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; Match(Continue);
				State = 924; Match(Semi);
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 3);
				{
				State = 925; Match(Break);
				State = 926; Match(Semi);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 4);
				{
				State = 927; Match(Return);
				State = 929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Generic) | (1L << LeftParen) | (1L << Plus) | (1L << PlusPlus) | (1L << Minus) | (1L << MinusMinus) | (1L << Star) | (1L << And) | (1L << Not) | (1L << Tilde))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (Identifier - 84)) | (1L << (Constant - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
					{
					State = 928; expression(0);
					}
				}

				State = 931; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 146, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void) | (1L << StaticAssert) | (1L << LeftParen) | (1L << Star) | (1L << Caret))) != 0) || _la==Semi || _la==Identifier) {
				{
				State = 934; translationUnit(0);
				}
			}

			State = 937; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ExternalDeclarationContext externalDeclaration() {
			return GetRuleContext<ExternalDeclarationContext>(0);
		}
		public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		return translationUnit(0);
	}

	private TranslationUnitContext translationUnit(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, _parentState);
		TranslationUnitContext _prevctx = _localctx;
		int _startState = 148;
		EnterRecursionRule(_localctx, 148, RULE_translationUnit, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 940; externalDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 946;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TranslationUnitContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_translationUnit);
					State = 942;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 943; externalDeclaration();
					}
					} 
				}
				State = 948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public EnumDeclaratorContext enumDeclarator() {
			return GetRuleContext<EnumDeclaratorContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 150, RULE_externalDeclaration);
		try {
			State = 953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 949; functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 950; enumDeclarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 951; declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 952; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 152, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void))) != 0)) {
				{
				State = 955; declarationSpecifiers();
				}
			}

			State = 958; declarator();
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Static) | (1L << String) | (1L << Struct) | (1L << Void) | (1L << StaticAssert))) != 0)) {
				{
				State = 959; declarationList(0);
				}
			}

			State = 962; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.EnterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICListener typedListener = listener as ICListener;
			if (typedListener != null) typedListener.ExitDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		return declarationList(0);
	}

	private DeclarationListContext declarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationListContext _localctx = new DeclarationListContext(Context, _parentState);
		DeclarationListContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_declarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 965; declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 971;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationList);
					State = 967;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 968; declaration();
					}
					} 
				}
				State = 973;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return genericAssocList_sempred((GenericAssocListContext)_localctx, predIndex);
		case 4: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 5: return argumentExpressionList_sempred((ArgumentExpressionListContext)_localctx, predIndex);
		case 9: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 10: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 11: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 12: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 13: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 14: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 15: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 16: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 17: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 18: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 22: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 28: return initDeclaratorList_sempred((InitDeclaratorListContext)_localctx, predIndex);
		case 34: return structDeclarationList_sempred((StructDeclarationListContext)_localctx, predIndex);
		case 37: return structDeclaratorList_sempred((StructDeclaratorListContext)_localctx, predIndex);
		case 41: return enumeratorList_sempred((EnumeratorListContext)_localctx, predIndex);
		case 46: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 49: return typeQualifierList_sempred((TypeQualifierListContext)_localctx, predIndex);
		case 51: return parameterList_sempred((ParameterListContext)_localctx, predIndex);
		case 53: return identifierList_sempred((IdentifierListContext)_localctx, predIndex);
		case 58: return initializerList_sempred((InitializerListContext)_localctx, predIndex);
		case 60: return designatorList_sempred((DesignatorListContext)_localctx, predIndex);
		case 68: return blockItemList_sempred((BlockItemListContext)_localctx, predIndex);
		case 74: return translationUnit_sempred((TranslationUnitContext)_localctx, predIndex);
		case 77: return declarationList_sempred((DeclarationListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool genericAssocList_sempred(GenericAssocListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentExpressionList_sempred(ArgumentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 2);
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initDeclaratorList_sempred(InitDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclarationList_sempred(StructDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool structDeclaratorList_sempred(StructDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorList_sempred(EnumeratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 1);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(Context, 6);
		case 32: return Precpred(Context, 5);
		case 33: return Precpred(Context, 4);
		case 34: return Precpred(Context, 3);
		case 35: return Precpred(Context, 2);
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeQualifierList_sempred(TypeQualifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool parameterList_sempred(ParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool identifierList_sempred(IdentifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerList_sempred(InitializerListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool designatorList_sempred(DesignatorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool blockItemList_sempred(BlockItemListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool translationUnit_sempred(TranslationUnitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationList_sempred(DeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x61");
		sb.Append("\x3D1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x3\x2\x3\x2\x3\x2\x6\x2\xA2\n\x2\r\x2\xE\x2\xA3\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xAB\n\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\a\x4\xBA\n\x4\f\x4\xE\x4\xBD\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x5\x5\xC6\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\xD3\n\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a");
		sb.Append("\x6\xE0\n\x6\f\x6\xE\x6\xE3\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\a\a\xEB\n\a\f\a\xE\a\xEE\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x5\b\xF8\n\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x108\n\n\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x116");
		sb.Append("\n\v\f\v\xE\v\x119\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3");
		sb.Append("\f\x3\f\a\f\x124\n\f\f\f\xE\f\x127\v\f\x3\r\x3\r\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\r\a\r\x132\n\r\f\r\xE\r\x135\v\r\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x146\n\xE\f\xE\xE\xE\x149\v\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF");
		sb.Append("\x154\n\xF\f\xF\xE\xF\x157\v\xF\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\a\x10\x15F\n\x10\f\x10\xE\x10\x162\v\x10\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x16A\n\x11\f\x11\xE");
		sb.Append("\x11\x16D\v\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a");
		sb.Append("\x12\x175\n\x12\f\x12\xE\x12\x178\v\x12\x3\x13\x3\x13\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\a\x13\x180\n\x13\f\x13\xE\x13\x183\v\x13");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x18B\n\x14");
		sb.Append("\f\x14\xE\x14\x18E\v\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15");
		sb.Append("\x3\x15\x5\x15\x196\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16");
		sb.Append("\x5\x16\x19D\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\a\x18\x1A7\n\x18\f\x18\xE\x18\x1AA\v\x18\x3\x19");
		sb.Append("\x3\x19\x3\x1A\x3\x1A\x5\x1A\x1B0\n\x1A\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x5\x1A\x1B5\n\x1A\x3\x1B\x6\x1B\x1B8\n\x1B\r\x1B\xE\x1B\x1B9");
		sb.Append("\x3\x1C\x6\x1C\x1BD\n\x1C\r\x1C\xE\x1C\x1BE\x3\x1D\x3\x1D\x3");
		sb.Append("\x1D\x3\x1D\x5\x1D\x1C5\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3");
		sb.Append("\x1E\x3\x1E\a\x1E\x1CD\n\x1E\f\x1E\xE\x1E\x1D0\v\x1E\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1D7\n\x1F\x3 \x3 \x3!\x3");
		sb.Append("!\x3!\x5!\x1DE\n!\x3\"\x3\"\x5\"\x1E2\n\"\x3\"\x3\"\x3\"\x3");
		sb.Append("\"\x3\"\x3\"\x3\"\x5\"\x1EB\n\"\x3#\x3#\x3$\x3$\x3$\x3$\x3$");
		sb.Append("\a$\x1F4\n$\f$\xE$\x1F7\v$\x3%\x3%\x5%\x1FB\n%\x3%\x3%\x3%\x5");
		sb.Append("%\x200\n%\x3&\x3&\x5&\x204\n&\x3&\x3&\x5&\x208\n&\x5&\x20A\n");
		sb.Append("&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x212\n\'\f\'\xE\'\x215\v");
		sb.Append("\'\x3(\x3(\x5(\x219\n(\x3(\x3(\x5(\x21D\n(\x3)\x3)\x3)\x3)\x5");
		sb.Append(")\x223\n)\x3)\x3)\x3)\x3)\x3)\x5)\x22A\n)\x3)\x3)\x5)\x22E\n");
		sb.Append(")\x3*\x3*\x5*\x232\n*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x23A\n*\x3");
		sb.Append("*\x3*\x3*\x3*\x3*\x3*\x3*\x5*\x243\n*\x3+\x3+\x3+\x3+\x3+\x3");
		sb.Append("+\a+\x24B\n+\f+\xE+\x24E\v+\x3,\x3,\x3,\x3,\x3,\x5,\x255\n,");
		sb.Append("\x3-\x3-\x3.\x3.\x3/\x5/\x25C\n/\x3/\x3/\x3\x30\x3\x30\x3\x30");
		sb.Append("\x3\x30\x3\x30\x3\x30\x5\x30\x266\n\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x5\x30\x26B\n\x30\x3\x30\x5\x30\x26E\n\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x30\x3\x30\x5\x30\x275\n\x30\x3\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x3\x30\x5\x30\x284\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30");
		sb.Append("\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x290\n\x30\x3\x30");
		sb.Append("\a\x30\x293\n\x30\f\x30\xE\x30\x296\v\x30\x3\x31\x3\x31\x3\x31");
		sb.Append("\x3\x31\x3\x31\a\x31\x29D\n\x31\f\x31\xE\x31\x2A0\v\x31\x3\x32");
		sb.Append("\x3\x32\x5\x32\x2A4\n\x32\x3\x32\x3\x32\x5\x32\x2A8\n\x32\x3");
		sb.Append("\x32\x3\x32\x3\x32\x5\x32\x2AD\n\x32\x3\x32\x3\x32\x5\x32\x2B1");
		sb.Append("\n\x32\x3\x32\x5\x32\x2B4\n\x32\x3\x33\x3\x33\x3\x33\x3\x33");
		sb.Append("\x3\x33\a\x33\x2BB\n\x33\f\x33\xE\x33\x2BE\v\x33\x3\x34\x3\x34");
		sb.Append("\x3\x34\x3\x34\x3\x34\x5\x34\x2C5\n\x34\x3\x35\x3\x35\x3\x35");
		sb.Append("\x3\x35\x3\x35\x3\x35\a\x35\x2CD\n\x35\f\x35\xE\x35\x2D0\v\x35");
		sb.Append("\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x2D7\n\x36\x5\x36");
		sb.Append("\x2D9\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37");
		sb.Append("\x2E1\n\x37\f\x37\xE\x37\x2E4\v\x37\x3\x38\x3\x38\x5\x38\x2E8");
		sb.Append("\n\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3");
		sb.Append(";\x3;\x3;\x5;\x2F8\n;\x3<\x3<\x5<\x2FC\n<\x3<\x3<\x3<\x3<\x3");
		sb.Append("<\x5<\x303\n<\x3<\a<\x306\n<\f<\xE<\x309\v<\x3=\x3=\x3=\x3>");
		sb.Append("\x3>\x3>\x3>\x3>\a>\x313\n>\f>\xE>\x316\v>\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x5?\x31E\n?\x3@\x3@\x3@\x3@\x3@\x6@\x325\n@\r@\xE@\x326");
		sb.Append("\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41");
		sb.Append("\x332\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41");
		sb.Append("\x33A\n\x41\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x347\n\x43\x3\x44\x3\x44");
		sb.Append("\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3");
		sb.Append("\x44\x5\x44\x354\n\x44\x3\x45\x3\x45\x5\x45\x358\n\x45\x3\x45");
		sb.Append("\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x361\n\x46");
		sb.Append("\f\x46\xE\x46\x364\v\x46\x3G\x3G\x5G\x368\nG\x3H\x5H\x36B\n");
		sb.Append("H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3");
		sb.Append("I\x3I\x3I\x3I\x3I\x5I\x380\nI\x3I\x3I\x5I\x384\nI\x3I\x3I\x5");
		sb.Append("I\x388\nI\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x390\nI\x3I\x3I\x5I\x394");
		sb.Append("\nI\x3I\x3I\x3I\x5I\x399\nI\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J");
		sb.Append("\x3J\x5J\x3A4\nJ\x3J\x5J\x3A7\nJ\x3K\x5K\x3AA\nK\x3K\x3K\x3");
		sb.Append("L\x3L\x3L\x3L\x3L\aL\x3B3\nL\fL\xEL\x3B6\vL\x3M\x3M\x3M\x3M");
		sb.Append("\x5M\x3BC\nM\x3N\x5N\x3BF\nN\x3N\x3N\x5N\x3C3\nN\x3N\x3N\x3");
		sb.Append("O\x3O\x3O\x3O\x3O\aO\x3CC\nO\fO\xEO\x3CF\vO\x3O\x2\x1D\x6\n");
		sb.Append("\f\x14\x16\x18\x1A\x1C\x1E \"$&.:\x46LT^\x64hlvz\x8A\x96\x9C");
		sb.Append("P\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,");
		sb.Append(".\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64");
		sb.Append("\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94");
		sb.Append("\x96\x98\x9A\x9C\x2\b\a\x2\x34\x34\x36\x36\x38\x38;;@\x41\x3");
		sb.Append("\x2\x46P\x4\x2\x6\x6\x1A\x1A\n\x2\x4\x4\t\t\xE\xE\x11\x11\x15");
		sb.Append("\x16\x18\x18\x1B\x1B\x1F\x1F\x4\x2\x5\x5\x1C\x1C\x3\x2()\x412");
		sb.Append("\x2\xAA\x3\x2\x2\x2\x4\xAC\x3\x2\x2\x2\x6\xB3\x3\x2\x2\x2\b");
		sb.Append("\xC5\x3\x2\x2\x2\n\xC7\x3\x2\x2\x2\f\xE4\x3\x2\x2\x2\xE\xF7");
		sb.Append("\x3\x2\x2\x2\x10\xF9\x3\x2\x2\x2\x12\x107\x3\x2\x2\x2\x14\x109");
		sb.Append("\x3\x2\x2\x2\x16\x11A\x3\x2\x2\x2\x18\x128\x3\x2\x2\x2\x1A\x136");
		sb.Append("\x3\x2\x2\x2\x1C\x14A\x3\x2\x2\x2\x1E\x158\x3\x2\x2\x2 \x163");
		sb.Append("\x3\x2\x2\x2\"\x16E\x3\x2\x2\x2$\x179\x3\x2\x2\x2&\x184\x3\x2");
		sb.Append("\x2\x2(\x18F\x3\x2\x2\x2*\x19C\x3\x2\x2\x2,\x19E\x3\x2\x2\x2");
		sb.Append(".\x1A0\x3\x2\x2\x2\x30\x1AB\x3\x2\x2\x2\x32\x1B4\x3\x2\x2\x2");
		sb.Append("\x34\x1B7\x3\x2\x2\x2\x36\x1BC\x3\x2\x2\x2\x38\x1C4\x3\x2\x2");
		sb.Append("\x2:\x1C6\x3\x2\x2\x2<\x1D6\x3\x2\x2\x2>\x1D8\x3\x2\x2\x2@\x1DD");
		sb.Append("\x3\x2\x2\x2\x42\x1EA\x3\x2\x2\x2\x44\x1EC\x3\x2\x2\x2\x46\x1EE");
		sb.Append("\x3\x2\x2\x2H\x1FF\x3\x2\x2\x2J\x209\x3\x2\x2\x2L\x20B\x3\x2");
		sb.Append("\x2\x2N\x21C\x3\x2\x2\x2P\x22D\x3\x2\x2\x2R\x242\x3\x2\x2\x2");
		sb.Append("T\x244\x3\x2\x2\x2V\x254\x3\x2\x2\x2X\x256\x3\x2\x2\x2Z\x258");
		sb.Append("\x3\x2\x2\x2\\\x25B\x3\x2\x2\x2^\x265\x3\x2\x2\x2`\x29E\x3\x2");
		sb.Append("\x2\x2\x62\x2B3\x3\x2\x2\x2\x64\x2B5\x3\x2\x2\x2\x66\x2C4\x3");
		sb.Append("\x2\x2\x2h\x2C6\x3\x2\x2\x2j\x2D8\x3\x2\x2\x2l\x2DA\x3\x2\x2");
		sb.Append("\x2n\x2E5\x3\x2\x2\x2p\x2E9\x3\x2\x2\x2r\x2EB\x3\x2\x2\x2t\x2F7");
		sb.Append("\x3\x2\x2\x2v\x2F9\x3\x2\x2\x2x\x30A\x3\x2\x2\x2z\x30D\x3\x2");
		sb.Append("\x2\x2|\x31D\x3\x2\x2\x2~\x31F\x3\x2\x2\x2\x80\x339\x3\x2\x2");
		sb.Append("\x2\x82\x33B\x3\x2\x2\x2\x84\x346\x3\x2\x2\x2\x86\x353\x3\x2");
		sb.Append("\x2\x2\x88\x355\x3\x2\x2\x2\x8A\x35B\x3\x2\x2\x2\x8C\x367\x3");
		sb.Append("\x2\x2\x2\x8E\x36A\x3\x2\x2\x2\x90\x398\x3\x2\x2\x2\x92\x3A6");
		sb.Append("\x3\x2\x2\x2\x94\x3A9\x3\x2\x2\x2\x96\x3AD\x3\x2\x2\x2\x98\x3BB");
		sb.Append("\x3\x2\x2\x2\x9A\x3BE\x3\x2\x2\x2\x9C\x3C6\x3\x2\x2\x2\x9E\xAB");
		sb.Append("\aV\x2\x2\x9F\xAB\aW\x2\x2\xA0\xA2\aX\x2\x2\xA1\xA0\x3\x2\x2");
		sb.Append("\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2");
		sb.Append("\x2\xA4\xAB\x3\x2\x2\x2\xA5\xA6\a(\x2\x2\xA6\xA7\x5.\x18\x2");
		sb.Append("\xA7\xA8\a)\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xAB\x5\x4\x3\x2\xAA");
		sb.Append("\x9E\x3\x2\x2\x2\xAA\x9F\x3\x2\x2\x2\xAA\xA1\x3\x2\x2\x2\xAA");
		sb.Append("\xA5\x3\x2\x2\x2\xAA\xA9\x3\x2\x2\x2\xAB\x3\x3\x2\x2\x2\xAC");
		sb.Append("\xAD\a#\x2\x2\xAD\xAE\a(\x2\x2\xAE\xAF\x5*\x16\x2\xAF\xB0\a");
		sb.Append("\x45\x2\x2\xB0\xB1\x5\x6\x4\x2\xB1\xB2\a)\x2\x2\xB2\x5\x3\x2");
		sb.Append("\x2\x2\xB3\xB4\b\x4\x1\x2\xB4\xB5\x5\b\x5\x2\xB5\xBB\x3\x2\x2");
		sb.Append("\x2\xB6\xB7\f\x3\x2\x2\xB7\xB8\a\x45\x2\x2\xB8\xBA\x5\b\x5\x2");
		sb.Append("\xB9\xB6\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2");
		sb.Append("\xBB\xBC\x3\x2\x2\x2\xBC\a\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE");
		sb.Append("\xBF\x5n\x38\x2\xBF\xC0\a\x43\x2\x2\xC0\xC1\x5*\x16\x2\xC1\xC6");
		sb.Append("\x3\x2\x2\x2\xC2\xC3\a\f\x2\x2\xC3\xC4\a\x43\x2\x2\xC4\xC6\x5");
		sb.Append("*\x16\x2\xC5\xBE\x3\x2\x2\x2\xC5\xC2\x3\x2\x2\x2\xC6\t\x3\x2");
		sb.Append("\x2\x2\xC7\xC8\b\x6\x1\x2\xC8\xC9\x5\x2\x2\x2\xC9\xE1\x3\x2");
		sb.Append("\x2\x2\xCA\xCB\f\b\x2\x2\xCB\xCC\a*\x2\x2\xCC\xCD\x5.\x18\x2");
		sb.Append("\xCD\xCE\a+\x2\x2\xCE\xE0\x3\x2\x2\x2\xCF\xD0\f\a\x2\x2\xD0");
		sb.Append("\xD2\a(\x2\x2\xD1\xD3\x5\f\a\x2\xD2\xD1\x3\x2\x2\x2\xD2\xD3");
		sb.Append("\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xE0\a)\x2\x2\xD5\xD6\f");
		sb.Append("\x6\x2\x2\xD6\xD7\aT\x2\x2\xD7\xE0\aV\x2\x2\xD8\xD9\f\x5\x2");
		sb.Append("\x2\xD9\xDA\aS\x2\x2\xDA\xE0\aV\x2\x2\xDB\xDC\f\x4\x2\x2\xDC");
		sb.Append("\xE0\a\x35\x2\x2\xDD\xDE\f\x3\x2\x2\xDE\xE0\a\x37\x2\x2\xDF");
		sb.Append("\xCA\x3\x2\x2\x2\xDF\xCF\x3\x2\x2\x2\xDF\xD5\x3\x2\x2\x2\xDF");
		sb.Append("\xD8\x3\x2\x2\x2\xDF\xDB\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0");
		sb.Append("\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2");
		sb.Append("\v\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE5\b\a\x1\x2\xE5\xE6");
		sb.Append("\x5*\x16\x2\xE6\xEC\x3\x2\x2\x2\xE7\xE8\f\x3\x2\x2\xE8\xE9\a");
		sb.Append("\x45\x2\x2\xE9\xEB\x5*\x16\x2\xEA\xE7\x3\x2\x2\x2\xEB\xEE\x3");
		sb.Append("\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\r\x3\x2");
		sb.Append("\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF8\x5\n\x6\x2\xF0\xF1\a\x35");
		sb.Append("\x2\x2\xF1\xF8\x5\xE\b\x2\xF2\xF3\a\x37\x2\x2\xF3\xF8\x5\xE");
		sb.Append("\b\x2\xF4\xF5\x5\x10\t\x2\xF5\xF6\x5\x12\n\x2\xF6\xF8\x3\x2");
		sb.Append("\x2\x2\xF7\xEF\x3\x2\x2\x2\xF7\xF0\x3\x2\x2\x2\xF7\xF2\x3\x2");
		sb.Append("\x2\x2\xF7\xF4\x3\x2\x2\x2\xF8\xF\x3\x2\x2\x2\xF9\xFA\t\x2\x2");
		sb.Append("\x2\xFA\x11\x3\x2\x2\x2\xFB\x108\x5\xE\b\x2\xFC\xFD\a(\x2\x2");
		sb.Append("\xFD\xFE\x5n\x38\x2\xFE\xFF\a)\x2\x2\xFF\x100\x5\x12\n\x2\x100");
		sb.Append("\x108\x3\x2\x2\x2\x101\x102\a\x3\x2\x2\x102\x103\a(\x2\x2\x103");
		sb.Append("\x104\x5n\x38\x2\x104\x105\a)\x2\x2\x105\x106\x5\x12\n\x2\x106");
		sb.Append("\x108\x3\x2\x2\x2\x107\xFB\x3\x2\x2\x2\x107\xFC\x3\x2\x2\x2");
		sb.Append("\x107\x101\x3\x2\x2\x2\x108\x13\x3\x2\x2\x2\x109\x10A\b\v\x1");
		sb.Append("\x2\x10A\x10B\x5\x12\n\x2\x10B\x117\x3\x2\x2\x2\x10C\x10D\f");
		sb.Append("\x5\x2\x2\x10D\x10E\a\x38\x2\x2\x10E\x116\x5\x12\n\x2\x10F\x110");
		sb.Append("\f\x4\x2\x2\x110\x111\a\x39\x2\x2\x111\x116\x5\x12\n\x2\x112");
		sb.Append("\x113\f\x3\x2\x2\x113\x114\a:\x2\x2\x114\x116\x5\x12\n\x2\x115");
		sb.Append("\x10C\x3\x2\x2\x2\x115\x10F\x3\x2\x2\x2\x115\x112\x3\x2\x2\x2");
		sb.Append("\x116\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2");
		sb.Append("\x2\x2\x118\x15\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11B");
		sb.Append("\b\f\x1\x2\x11B\x11C\x5\x14\v\x2\x11C\x125\x3\x2\x2\x2\x11D");
		sb.Append("\x11E\f\x4\x2\x2\x11E\x11F\a\x34\x2\x2\x11F\x124\x5\x14\v\x2");
		sb.Append("\x120\x121\f\x3\x2\x2\x121\x122\a\x36\x2\x2\x122\x124\x5\x14");
		sb.Append("\v\x2\x123\x11D\x3\x2\x2\x2\x123\x120\x3\x2\x2\x2\x124\x127");
		sb.Append("\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126");
		sb.Append("\x17\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128\x129\b\r\x1\x2\x129");
		sb.Append("\x12A\x5\x16\f\x2\x12A\x133\x3\x2\x2\x2\x12B\x12C\f\x4\x2\x2");
		sb.Append("\x12C\x12D\a\x32\x2\x2\x12D\x132\x5\x16\f\x2\x12E\x12F\f\x3");
		sb.Append("\x2\x2\x12F\x130\a\x33\x2\x2\x130\x132\x5\x16\f\x2\x131\x12B");
		sb.Append("\x3\x2\x2\x2\x131\x12E\x3\x2\x2\x2\x132\x135\x3\x2\x2\x2\x133");
		sb.Append("\x131\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x19\x3\x2\x2\x2");
		sb.Append("\x135\x133\x3\x2\x2\x2\x136\x137\b\xE\x1\x2\x137\x138\x5\x18");
		sb.Append("\r\x2\x138\x147\x3\x2\x2\x2\x139\x13A\f\x6\x2\x2\x13A\x13B\a");
		sb.Append(".\x2\x2\x13B\x146\x5\x18\r\x2\x13C\x13D\f\x5\x2\x2\x13D\x13E");
		sb.Append("\a\x30\x2\x2\x13E\x146\x5\x18\r\x2\x13F\x140\f\x4\x2\x2\x140");
		sb.Append("\x141\a/\x2\x2\x141\x146\x5\x18\r\x2\x142\x143\f\x3\x2\x2\x143");
		sb.Append("\x144\a\x31\x2\x2\x144\x146\x5\x18\r\x2\x145\x139\x3\x2\x2\x2");
		sb.Append("\x145\x13C\x3\x2\x2\x2\x145\x13F\x3\x2\x2\x2\x145\x142\x3\x2");
		sb.Append("\x2\x2\x146\x149\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147\x148");
		sb.Append("\x3\x2\x2\x2\x148\x1B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A");
		sb.Append("\x14B\b\xF\x1\x2\x14B\x14C\x5\x1A\xE\x2\x14C\x155\x3\x2\x2\x2");
		sb.Append("\x14D\x14E\f\x4\x2\x2\x14E\x14F\aQ\x2\x2\x14F\x154\x5\x1A\xE");
		sb.Append("\x2\x150\x151\f\x3\x2\x2\x151\x152\aR\x2\x2\x152\x154\x5\x1A");
		sb.Append("\xE\x2\x153\x14D\x3\x2\x2\x2\x153\x150\x3\x2\x2\x2\x154\x157");
		sb.Append("\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156");
		sb.Append("\x1D\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x158\x159\b\x10\x1\x2");
		sb.Append("\x159\x15A\x5\x1C\xF\x2\x15A\x160\x3\x2\x2\x2\x15B\x15C\f\x3");
		sb.Append("\x2\x2\x15C\x15D\a;\x2\x2\x15D\x15F\x5\x1C\xF\x2\x15E\x15B\x3");
		sb.Append("\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161");
		sb.Append("\x3\x2\x2\x2\x161\x1F\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163");
		sb.Append("\x164\b\x11\x1\x2\x164\x165\x5\x1E\x10\x2\x165\x16B\x3\x2\x2");
		sb.Append("\x2\x166\x167\f\x3\x2\x2\x167\x168\a?\x2\x2\x168\x16A\x5\x1E");
		sb.Append("\x10\x2\x169\x166\x3\x2\x2\x2\x16A\x16D\x3\x2\x2\x2\x16B\x169");
		sb.Append("\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16C!\x3\x2\x2\x2\x16D\x16B");
		sb.Append("\x3\x2\x2\x2\x16E\x16F\b\x12\x1\x2\x16F\x170\x5 \x11\x2\x170");
		sb.Append("\x176\x3\x2\x2\x2\x171\x172\f\x3\x2\x2\x172\x173\a<\x2\x2\x173");
		sb.Append("\x175\x5 \x11\x2\x174\x171\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2");
		sb.Append("\x176\x174\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177#\x3\x2\x2");
		sb.Append("\x2\x178\x176\x3\x2\x2\x2\x179\x17A\b\x13\x1\x2\x17A\x17B\x5");
		sb.Append("\"\x12\x2\x17B\x181\x3\x2\x2\x2\x17C\x17D\f\x3\x2\x2\x17D\x17E");
		sb.Append("\a=\x2\x2\x17E\x180\x5\"\x12\x2\x17F\x17C\x3\x2\x2\x2\x180\x183");
		sb.Append("\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182");
		sb.Append("%\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x184\x185\b\x14\x1\x2\x185");
		sb.Append("\x186\x5$\x13\x2\x186\x18C\x3\x2\x2\x2\x187\x188\f\x3\x2\x2");
		sb.Append("\x188\x189\a>\x2\x2\x189\x18B\x5$\x13\x2\x18A\x187\x3\x2\x2");
		sb.Append("\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3");
		sb.Append("\x2\x2\x2\x18D\'\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F\x195");
		sb.Append("\x5&\x14\x2\x190\x191\a\x42\x2\x2\x191\x192\x5.\x18\x2\x192");
		sb.Append("\x193\a\x43\x2\x2\x193\x194\x5(\x15\x2\x194\x196\x3\x2\x2\x2");
		sb.Append("\x195\x190\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x196)\x3\x2\x2");
		sb.Append("\x2\x197\x19D\x5(\x15\x2\x198\x199\x5\xE\b\x2\x199\x19A\x5,");
		sb.Append("\x17\x2\x19A\x19B\x5*\x16\x2\x19B\x19D\x3\x2\x2\x2\x19C\x197");
		sb.Append("\x3\x2\x2\x2\x19C\x198\x3\x2\x2\x2\x19D+\x3\x2\x2\x2\x19E\x19F");
		sb.Append("\t\x3\x2\x2\x19F-\x3\x2\x2\x2\x1A0\x1A1\b\x18\x1\x2\x1A1\x1A2");
		sb.Append("\x5*\x16\x2\x1A2\x1A8\x3\x2\x2\x2\x1A3\x1A4\f\x3\x2\x2\x1A4");
		sb.Append("\x1A5\a\x45\x2\x2\x1A5\x1A7\x5*\x16\x2\x1A6\x1A3\x3\x2\x2\x2");
		sb.Append("\x1A7\x1AA\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2");
		sb.Append("\x2\x2\x1A9/\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1AC\x5");
		sb.Append("(\x15\x2\x1AC\x31\x3\x2\x2\x2\x1AD\x1AF\x5\x34\x1B\x2\x1AE\x1B0");
		sb.Append("\x5:\x1E\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0");
		sb.Append("\x1B1\x3\x2\x2\x2\x1B1\x1B2\a\x44\x2\x2\x1B2\x1B5\x3\x2\x2\x2");
		sb.Append("\x1B3\x1B5\x5~@\x2\x1B4\x1AD\x3\x2\x2\x2\x1B4\x1B3\x3\x2\x2");
		sb.Append("\x2\x1B5\x33\x3\x2\x2\x2\x1B6\x1B8\x5\x38\x1D\x2\x1B7\x1B6\x3");
		sb.Append("\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA");
		sb.Append("\x3\x2\x2\x2\x1BA\x35\x3\x2\x2\x2\x1BB\x1BD\x5\x38\x1D\x2\x1BC");
		sb.Append("\x1BB\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2");
		sb.Append("\x1BE\x1BF\x3\x2\x2\x2\x1BF\x37\x3\x2\x2\x2\x1C0\x1C5\x5> \x2");
		sb.Append("\x1C1\x1C5\x5@!\x2\x1C2\x1C5\x5Z.\x2\x1C3\x1C5\x5R*\x2\x1C4");
		sb.Append("\x1C0\x3\x2\x2\x2\x1C4\x1C1\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2");
		sb.Append("\x1C4\x1C3\x3\x2\x2\x2\x1C5\x39\x3\x2\x2\x2\x1C6\x1C7\b\x1E");
		sb.Append("\x1\x2\x1C7\x1C8\x5<\x1F\x2\x1C8\x1CE\x3\x2\x2\x2\x1C9\x1CA");
		sb.Append("\f\x3\x2\x2\x1CA\x1CB\a\x45\x2\x2\x1CB\x1CD\x5<\x1F\x2\x1CC");
		sb.Append("\x1C9\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2");
		sb.Append("\x1CE\x1CF\x3\x2\x2\x2\x1CF;\x3\x2\x2\x2\x1D0\x1CE\x3\x2\x2");
		sb.Append("\x2\x1D1\x1D7\x5\\/\x2\x1D2\x1D3\x5\\/\x2\x1D3\x1D4\a\x46\x2");
		sb.Append("\x2\x1D4\x1D5\x5t;\x2\x1D5\x1D7\x3\x2\x2\x2\x1D6\x1D1\x3\x2");
		sb.Append("\x2\x2\x1D6\x1D2\x3\x2\x2\x2\x1D7=\x3\x2\x2\x2\x1D8\x1D9\t\x4");
		sb.Append("\x2\x2\x1D9?\x3\x2\x2\x2\x1DA\x1DE\t\x5\x2\x2\x1DB\x1DE\x5\x42");
		sb.Append("\"\x2\x1DC\x1DE\x5R*\x2\x1DD\x1DA\x3\x2\x2\x2\x1DD\x1DB\x3\x2");
		sb.Append("\x2\x2\x1DD\x1DC\x3\x2\x2\x2\x1DE\x41\x3\x2\x2\x2\x1DF\x1E1");
		sb.Append("\x5\x44#\x2\x1E0\x1E2\aV\x2\x2\x1E1\x1E0\x3\x2\x2\x2\x1E1\x1E2");
		sb.Append("\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\a,\x2\x2\x1E4\x1E5");
		sb.Append("\x5\x46$\x2\x1E5\x1E6\a-\x2\x2\x1E6\x1EB\x3\x2\x2\x2\x1E7\x1E8");
		sb.Append("\x5\x44#\x2\x1E8\x1E9\aV\x2\x2\x1E9\x1EB\x3\x2\x2\x2\x1EA\x1DF");
		sb.Append("\x3\x2\x2\x2\x1EA\x1E7\x3\x2\x2\x2\x1EB\x43\x3\x2\x2\x2\x1EC");
		sb.Append("\x1ED\t\x6\x2\x2\x1ED\x45\x3\x2\x2\x2\x1EE\x1EF\b$\x1\x2\x1EF");
		sb.Append("\x1F0\x5H%\x2\x1F0\x1F5\x3\x2\x2\x2\x1F1\x1F2\f\x3\x2\x2\x1F2");
		sb.Append("\x1F4\x5H%\x2\x1F3\x1F1\x3\x2\x2\x2\x1F4\x1F7\x3\x2\x2\x2\x1F5");
		sb.Append("\x1F3\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6G\x3\x2\x2\x2\x1F7");
		sb.Append("\x1F5\x3\x2\x2\x2\x1F8\x1FA\x5J&\x2\x1F9\x1FB\x5L\'\x2\x1FA");
		sb.Append("\x1F9\x3\x2\x2\x2\x1FA\x1FB\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2");
		sb.Append("\x1FC\x1FD\a\x44\x2\x2\x1FD\x200\x3\x2\x2\x2\x1FE\x200\x5~@");
		sb.Append("\x2\x1FF\x1F8\x3\x2\x2\x2\x1FF\x1FE\x3\x2\x2\x2\x200I\x3\x2");
		sb.Append("\x2\x2\x201\x203\x5@!\x2\x202\x204\x5J&\x2\x203\x202\x3\x2\x2");
		sb.Append("\x2\x203\x204\x3\x2\x2\x2\x204\x20A\x3\x2\x2\x2\x205\x207\x5");
		sb.Append("Z.\x2\x206\x208\x5J&\x2\x207\x206\x3\x2\x2\x2\x207\x208\x3\x2");
		sb.Append("\x2\x2\x208\x20A\x3\x2\x2\x2\x209\x201\x3\x2\x2\x2\x209\x205");
		sb.Append("\x3\x2\x2\x2\x20AK\x3\x2\x2\x2\x20B\x20C\b\'\x1\x2\x20C\x20D");
		sb.Append("\x5N(\x2\x20D\x213\x3\x2\x2\x2\x20E\x20F\f\x3\x2\x2\x20F\x210");
		sb.Append("\a\x45\x2\x2\x210\x212\x5N(\x2\x211\x20E\x3\x2\x2\x2\x212\x215");
		sb.Append("\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214");
		sb.Append("M\x3\x2\x2\x2\x215\x213\x3\x2\x2\x2\x216\x21D\x5\\/\x2\x217");
		sb.Append("\x219\x5\\/\x2\x218\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219");
		sb.Append("\x21A\x3\x2\x2\x2\x21A\x21B\a\x43\x2\x2\x21B\x21D\x5\x30\x19");
		sb.Append("\x2\x21C\x216\x3\x2\x2\x2\x21C\x218\x3\x2\x2\x2\x21DO\x3\x2");
		sb.Append("\x2\x2\x21E\x21F\a\x10\x2\x2\x21F\x220\aV\x2\x2\x220\x222\a");
		sb.Append(",\x2\x2\x221\x223\x5T+\x2\x222\x221\x3\x2\x2\x2\x222\x223\x3");
		sb.Append("\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x22E\a-\x2\x2\x225\x226");
		sb.Append("\a\x10\x2\x2\x226\x227\aV\x2\x2\x227\x229\a,\x2\x2\x228\x22A");
		sb.Append("\x5T+\x2\x229\x228\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22B");
		sb.Append("\x3\x2\x2\x2\x22B\x22C\a\x45\x2\x2\x22C\x22E\a-\x2\x2\x22D\x21E");
		sb.Append("\x3\x2\x2\x2\x22D\x225\x3\x2\x2\x2\x22EQ\x3\x2\x2\x2\x22F\x231");
		sb.Append("\a\x10\x2\x2\x230\x232\aV\x2\x2\x231\x230\x3\x2\x2\x2\x231\x232");
		sb.Append("\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x234\a,\x2\x2\x234\x235");
		sb.Append("\x5T+\x2\x235\x236\a-\x2\x2\x236\x243\x3\x2\x2\x2\x237\x239");
		sb.Append("\a\x10\x2\x2\x238\x23A\aV\x2\x2\x239\x238\x3\x2\x2\x2\x239\x23A");
		sb.Append("\x3\x2\x2\x2\x23A\x23B\x3\x2\x2\x2\x23B\x23C\a,\x2\x2\x23C\x23D");
		sb.Append("\x5T+\x2\x23D\x23E\a\x45\x2\x2\x23E\x23F\a-\x2\x2\x23F\x243");
		sb.Append("\x3\x2\x2\x2\x240\x241\a\x10\x2\x2\x241\x243\aV\x2\x2\x242\x22F");
		sb.Append("\x3\x2\x2\x2\x242\x237\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x243");
		sb.Append("S\x3\x2\x2\x2\x244\x245\b+\x1\x2\x245\x246\x5V,\x2\x246\x24C");
		sb.Append("\x3\x2\x2\x2\x247\x248\f\x3\x2\x2\x248\x249\a\x45\x2\x2\x249");
		sb.Append("\x24B\x5V,\x2\x24A\x247\x3\x2\x2\x2\x24B\x24E\x3\x2\x2\x2\x24C");
		sb.Append("\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24DU\x3\x2\x2\x2\x24E");
		sb.Append("\x24C\x3\x2\x2\x2\x24F\x255\x5X-\x2\x250\x251\x5X-\x2\x251\x252");
		sb.Append("\a\x46\x2\x2\x252\x253\x5\x30\x19\x2\x253\x255\x3\x2\x2\x2\x254");
		sb.Append("\x24F\x3\x2\x2\x2\x254\x250\x3\x2\x2\x2\x255W\x3\x2\x2\x2\x256");
		sb.Append("\x257\aV\x2\x2\x257Y\x3\x2\x2\x2\x258\x259\a\n\x2\x2\x259[\x3");
		sb.Append("\x2\x2\x2\x25A\x25C\x5\x62\x32\x2\x25B\x25A\x3\x2\x2\x2\x25B");
		sb.Append("\x25C\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25E\x5^\x30\x2");
		sb.Append("\x25E]\x3\x2\x2\x2\x25F\x260\b\x30\x1\x2\x260\x266\aV\x2\x2");
		sb.Append("\x261\x262\a(\x2\x2\x262\x263\x5\\/\x2\x263\x264\a)\x2\x2\x264");
		sb.Append("\x266\x3\x2\x2\x2\x265\x25F\x3\x2\x2\x2\x265\x261\x3\x2\x2\x2");
		sb.Append("\x266\x294\x3\x2\x2\x2\x267\x268\f\b\x2\x2\x268\x26A\a*\x2\x2");
		sb.Append("\x269\x26B\x5\x64\x33\x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3");
		sb.Append("\x2\x2\x2\x26B\x26D\x3\x2\x2\x2\x26C\x26E\x5*\x16\x2\x26D\x26C");
		sb.Append("\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F");
		sb.Append("\x293\a+\x2\x2\x270\x271\f\a\x2\x2\x271\x272\a*\x2\x2\x272\x274");
		sb.Append("\a\x1A\x2\x2\x273\x275\x5\x64\x33\x2\x274\x273\x3\x2\x2\x2\x274");
		sb.Append("\x275\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x277\x5*\x16\x2");
		sb.Append("\x277\x278\a+\x2\x2\x278\x293\x3\x2\x2\x2\x279\x27A\f\x6\x2");
		sb.Append("\x2\x27A\x27B\a*\x2\x2\x27B\x27C\x5\x64\x33\x2\x27C\x27D\a\x1A");
		sb.Append("\x2\x2\x27D\x27E\x5*\x16\x2\x27E\x27F\a+\x2\x2\x27F\x293\x3");
		sb.Append("\x2\x2\x2\x280\x281\f\x5\x2\x2\x281\x283\a*\x2\x2\x282\x284");
		sb.Append("\x5\x64\x33\x2\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284");
		sb.Append("\x285\x3\x2\x2\x2\x285\x286\a\x38\x2\x2\x286\x293\a+\x2\x2\x287");
		sb.Append("\x288\f\x4\x2\x2\x288\x289\a(\x2\x2\x289\x28A\x5\x66\x34\x2");
		sb.Append("\x28A\x28B\a)\x2\x2\x28B\x293\x3\x2\x2\x2\x28C\x28D\f\x3\x2");
		sb.Append("\x2\x28D\x28F\a(\x2\x2\x28E\x290\x5l\x37\x2\x28F\x28E\x3\x2");
		sb.Append("\x2\x2\x28F\x290\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x293");
		sb.Append("\a)\x2\x2\x292\x267\x3\x2\x2\x2\x292\x270\x3\x2\x2\x2\x292\x279");
		sb.Append("\x3\x2\x2\x2\x292\x280\x3\x2\x2\x2\x292\x287\x3\x2\x2\x2\x292");
		sb.Append("\x28C\x3\x2\x2\x2\x293\x296\x3\x2\x2\x2\x294\x292\x3\x2\x2\x2");
		sb.Append("\x294\x295\x3\x2\x2\x2\x295_\x3\x2\x2\x2\x296\x294\x3\x2\x2");
		sb.Append("\x2\x297\x29D\n\a\x2\x2\x298\x299\a(\x2\x2\x299\x29A\x5`\x31");
		sb.Append("\x2\x29A\x29B\a)\x2\x2\x29B\x29D\x3\x2\x2\x2\x29C\x297\x3\x2");
		sb.Append("\x2\x2\x29C\x298\x3\x2\x2\x2\x29D\x2A0\x3\x2\x2\x2\x29E\x29C");
		sb.Append("\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x61\x3\x2\x2\x2\x2A0");
		sb.Append("\x29E\x3\x2\x2\x2\x2A1\x2A3\a\x38\x2\x2\x2A2\x2A4\x5\x64\x33");
		sb.Append("\x2\x2A3\x2A2\x3\x2\x2\x2\x2A3\x2A4\x3\x2\x2\x2\x2A4\x2B4\x3");
		sb.Append("\x2\x2\x2\x2A5\x2A7\a\x38\x2\x2\x2A6\x2A8\x5\x64\x33\x2\x2A7");
		sb.Append("\x2A6\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2\x2\x2");
		sb.Append("\x2A9\x2B4\x5\x62\x32\x2\x2AA\x2AC\a?\x2\x2\x2AB\x2AD\x5\x64");
		sb.Append("\x33\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2B4");
		sb.Append("\x3\x2\x2\x2\x2AE\x2B0\a?\x2\x2\x2AF\x2B1\x5\x64\x33\x2\x2B0");
		sb.Append("\x2AF\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2");
		sb.Append("\x2B2\x2B4\x5\x62\x32\x2\x2B3\x2A1\x3\x2\x2\x2\x2B3\x2A5\x3");
		sb.Append("\x2\x2\x2\x2B3\x2AA\x3\x2\x2\x2\x2B3\x2AE\x3\x2\x2\x2\x2B4\x63");
		sb.Append("\x3\x2\x2\x2\x2B5\x2B6\b\x33\x1\x2\x2B6\x2B7\x5Z.\x2\x2B7\x2BC");
		sb.Append("\x3\x2\x2\x2\x2B8\x2B9\f\x3\x2\x2\x2B9\x2BB\x5Z.\x2\x2BA\x2B8");
		sb.Append("\x3\x2\x2\x2\x2BB\x2BE\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BC");
		sb.Append("\x2BD\x3\x2\x2\x2\x2BD\x65\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2\x2");
		sb.Append("\x2BF\x2C5\x5h\x35\x2\x2C0\x2C1\x5h\x35\x2\x2C1\x2C2\a\x45\x2");
		sb.Append("\x2\x2C2\x2C3\aU\x2\x2\x2C3\x2C5\x3\x2\x2\x2\x2C4\x2BF\x3\x2");
		sb.Append("\x2\x2\x2C4\x2C0\x3\x2\x2\x2\x2C5g\x3\x2\x2\x2\x2C6\x2C7\b\x35");
		sb.Append("\x1\x2\x2C7\x2C8\x5j\x36\x2\x2C8\x2CE\x3\x2\x2\x2\x2C9\x2CA");
		sb.Append("\f\x3\x2\x2\x2CA\x2CB\a\x45\x2\x2\x2CB\x2CD\x5j\x36\x2\x2CC");
		sb.Append("\x2C9\x3\x2\x2\x2\x2CD\x2D0\x3\x2\x2\x2\x2CE\x2CC\x3\x2\x2\x2");
		sb.Append("\x2CE\x2CF\x3\x2\x2\x2\x2CFi\x3\x2\x2\x2\x2D0\x2CE\x3\x2\x2");
		sb.Append("\x2\x2D1\x2D2\x5\x34\x1B\x2\x2D2\x2D3\x5\\/\x2\x2D3\x2D9\x3");
		sb.Append("\x2\x2\x2\x2D4\x2D6\x5\x36\x1C\x2\x2D5\x2D7\x5p\x39\x2\x2D6");
		sb.Append("\x2D5\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x2D9\x3\x2\x2\x2");
		sb.Append("\x2D8\x2D1\x3\x2\x2\x2\x2D8\x2D4\x3\x2\x2\x2\x2D9k\x3\x2\x2");
		sb.Append("\x2\x2DA\x2DB\b\x37\x1\x2\x2DB\x2DC\aV\x2\x2\x2DC\x2E2\x3\x2");
		sb.Append("\x2\x2\x2DD\x2DE\f\x3\x2\x2\x2DE\x2DF\a\x45\x2\x2\x2DF\x2E1");
		sb.Append("\aV\x2\x2\x2E0\x2DD\x3\x2\x2\x2\x2E1\x2E4\x3\x2\x2\x2\x2E2\x2E0");
		sb.Append("\x3\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3m\x3\x2\x2\x2\x2E4\x2E2");
		sb.Append("\x3\x2\x2\x2\x2E5\x2E7\x5J&\x2\x2E6\x2E8\x5p\x39\x2\x2E7\x2E6");
		sb.Append("\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8o\x3\x2\x2\x2\x2E9\x2EA");
		sb.Append("\x5\x62\x32\x2\x2EAq\x3\x2\x2\x2\x2EB\x2EC\aV\x2\x2\x2ECs\x3");
		sb.Append("\x2\x2\x2\x2ED\x2F8\x5*\x16\x2\x2EE\x2EF\a,\x2\x2\x2EF\x2F0");
		sb.Append("\x5v<\x2\x2F0\x2F1\a-\x2\x2\x2F1\x2F8\x3\x2\x2\x2\x2F2\x2F3");
		sb.Append("\a,\x2\x2\x2F3\x2F4\x5v<\x2\x2F4\x2F5\a\x45\x2\x2\x2F5\x2F6");
		sb.Append("\a-\x2\x2\x2F6\x2F8\x3\x2\x2\x2\x2F7\x2ED\x3\x2\x2\x2\x2F7\x2EE");
		sb.Append("\x3\x2\x2\x2\x2F7\x2F2\x3\x2\x2\x2\x2F8u\x3\x2\x2\x2\x2F9\x2FB");
		sb.Append("\b<\x1\x2\x2FA\x2FC\x5x=\x2\x2FB\x2FA\x3\x2\x2\x2\x2FB\x2FC");
		sb.Append("\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\x5t;\x2\x2FE\x307");
		sb.Append("\x3\x2\x2\x2\x2FF\x300\f\x3\x2\x2\x300\x302\a\x45\x2\x2\x301");
		sb.Append("\x303\x5x=\x2\x302\x301\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303");
		sb.Append("\x304\x3\x2\x2\x2\x304\x306\x5t;\x2\x305\x2FF\x3\x2\x2\x2\x306");
		sb.Append("\x309\x3\x2\x2\x2\x307\x305\x3\x2\x2\x2\x307\x308\x3\x2\x2\x2");
		sb.Append("\x308w\x3\x2\x2\x2\x309\x307\x3\x2\x2\x2\x30A\x30B\x5z>\x2\x30B");
		sb.Append("\x30C\a\x46\x2\x2\x30Cy\x3\x2\x2\x2\x30D\x30E\b>\x1\x2\x30E");
		sb.Append("\x30F\x5|?\x2\x30F\x314\x3\x2\x2\x2\x310\x311\f\x3\x2\x2\x311");
		sb.Append("\x313\x5|?\x2\x312\x310\x3\x2\x2\x2\x313\x316\x3\x2\x2\x2\x314");
		sb.Append("\x312\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315{\x3\x2\x2\x2\x316");
		sb.Append("\x314\x3\x2\x2\x2\x317\x318\a*\x2\x2\x318\x319\x5\x30\x19\x2");
		sb.Append("\x319\x31A\a+\x2\x2\x31A\x31E\x3\x2\x2\x2\x31B\x31C\aT\x2\x2");
		sb.Append("\x31C\x31E\aV\x2\x2\x31D\x317\x3\x2\x2\x2\x31D\x31B\x3\x2\x2");
		sb.Append("\x2\x31E}\x3\x2\x2\x2\x31F\x320\a&\x2\x2\x320\x321\a(\x2\x2");
		sb.Append("\x321\x322\x5\x30\x19\x2\x322\x324\a\x45\x2\x2\x323\x325\aX");
		sb.Append("\x2\x2\x324\x323\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x324");
		sb.Append("\x3\x2\x2\x2\x326\x327\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328");
		sb.Append("\x329\a)\x2\x2\x329\x32A\a\x44\x2\x2\x32A\x7F\x3\x2\x2\x2\x32B");
		sb.Append("\x32C\a\x14\x2\x2\x32C\x32D\a(\x2\x2\x32D\x32E\x5.\x18\x2\x32E");
		sb.Append("\x32F\a)\x2\x2\x32F\x331\x5\x84\x43\x2\x330\x332\x5\x82\x42");
		sb.Append("\x2\x331\x330\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x33A\x3");
		sb.Append("\x2\x2\x2\x333\x334\a\x1D\x2\x2\x334\x335\a(\x2\x2\x335\x336");
		sb.Append("\x5.\x18\x2\x336\x337\a)\x2\x2\x337\x338\x5\x84\x43\x2\x338");
		sb.Append("\x33A\x3\x2\x2\x2\x339\x32B\x3\x2\x2\x2\x339\x333\x3\x2\x2\x2");
		sb.Append("\x33A\x81\x3\x2\x2\x2\x33B\x33C\a\xF\x2\x2\x33C\x33D\x5\x84");
		sb.Append("\x43\x2\x33D\x83\x3\x2\x2\x2\x33E\x347\x5\x86\x44\x2\x33F\x347");
		sb.Append("\x5\x88\x45\x2\x340\x347\x5\x80\x41\x2\x341\x347\x5\x8EH\x2");
		sb.Append("\x342\x347\x5\x90I\x2\x343\x347\x5\x92J\x2\x344\x347\x5R*\x2");
		sb.Append("\x345\x347\x5P)\x2\x346\x33E\x3\x2\x2\x2\x346\x33F\x3\x2\x2");
		sb.Append("\x2\x346\x340\x3\x2\x2\x2\x346\x341\x3\x2\x2\x2\x346\x342\x3");
		sb.Append("\x2\x2\x2\x346\x343\x3\x2\x2\x2\x346\x344\x3\x2\x2\x2\x346\x345");
		sb.Append("\x3\x2\x2\x2\x347\x85\x3\x2\x2\x2\x348\x349\aV\x2\x2\x349\x34A");
		sb.Append("\a\x43\x2\x2\x34A\x354\x5\x84\x43\x2\x34B\x34C\a\b\x2\x2\x34C");
		sb.Append("\x34D\x5\x30\x19\x2\x34D\x34E\a\x43\x2\x2\x34E\x34F\x5\x84\x43");
		sb.Append("\x2\x34F\x354\x3\x2\x2\x2\x350\x351\a\f\x2\x2\x351\x352\a\x43");
		sb.Append("\x2\x2\x352\x354\x5\x84\x43\x2\x353\x348\x3\x2\x2\x2\x353\x34B");
		sb.Append("\x3\x2\x2\x2\x353\x350\x3\x2\x2\x2\x354\x87\x3\x2\x2\x2\x355");
		sb.Append("\x357\a,\x2\x2\x356\x358\x5\x8A\x46\x2\x357\x356\x3\x2\x2\x2");
		sb.Append("\x357\x358\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35A\a-\x2");
		sb.Append("\x2\x35A\x89\x3\x2\x2\x2\x35B\x35C\b\x46\x1\x2\x35C\x35D\x5");
		sb.Append("\x8CG\x2\x35D\x362\x3\x2\x2\x2\x35E\x35F\f\x3\x2\x2\x35F\x361");
		sb.Append("\x5\x8CG\x2\x360\x35E\x3\x2\x2\x2\x361\x364\x3\x2\x2\x2\x362");
		sb.Append("\x360\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x8B\x3\x2\x2\x2");
		sb.Append("\x364\x362\x3\x2\x2\x2\x365\x368\x5\x32\x1A\x2\x366\x368\x5");
		sb.Append("\x84\x43\x2\x367\x365\x3\x2\x2\x2\x367\x366\x3\x2\x2\x2\x368");
		sb.Append("\x8D\x3\x2\x2\x2\x369\x36B\x5.\x18\x2\x36A\x369\x3\x2\x2\x2");
		sb.Append("\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D\a\x44");
		sb.Append("\x2\x2\x36D\x8F\x3\x2\x2\x2\x36E\x36F\a \x2\x2\x36F\x370\a(");
		sb.Append("\x2\x2\x370\x371\x5.\x18\x2\x371\x372\a)\x2\x2\x372\x373\x5");
		sb.Append("\x84\x43\x2\x373\x399\x3\x2\x2\x2\x374\x375\a\r\x2\x2\x375\x376");
		sb.Append("\x5\x84\x43\x2\x376\x377\a \x2\x2\x377\x378\a(\x2\x2\x378\x379");
		sb.Append("\x5.\x18\x2\x379\x37A\a)\x2\x2\x37A\x37B\a\x44\x2\x2\x37B\x399");
		sb.Append("\x3\x2\x2\x2\x37C\x37D\a\x12\x2\x2\x37D\x37F\a(\x2\x2\x37E\x380");
		sb.Append("\x5.\x18\x2\x37F\x37E\x3\x2\x2\x2\x37F\x380\x3\x2\x2\x2\x380");
		sb.Append("\x381\x3\x2\x2\x2\x381\x383\a\x44\x2\x2\x382\x384\x5.\x18\x2");
		sb.Append("\x383\x382\x3\x2\x2\x2\x383\x384\x3\x2\x2\x2\x384\x385\x3\x2");
		sb.Append("\x2\x2\x385\x387\a\x44\x2\x2\x386\x388\x5.\x18\x2\x387\x386");
		sb.Append("\x3\x2\x2\x2\x387\x388\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389");
		sb.Append("\x38A\a)\x2\x2\x38A\x399\x5\x84\x43\x2\x38B\x38C\a\x12\x2\x2");
		sb.Append("\x38C\x38D\a(\x2\x2\x38D\x38F\x5\x32\x1A\x2\x38E\x390\x5.\x18");
		sb.Append("\x2\x38F\x38E\x3\x2\x2\x2\x38F\x390\x3\x2\x2\x2\x390\x391\x3");
		sb.Append("\x2\x2\x2\x391\x393\a\x44\x2\x2\x392\x394\x5.\x18\x2\x393\x392");
		sb.Append("\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395");
		sb.Append("\x396\a)\x2\x2\x396\x397\x5\x84\x43\x2\x397\x399\x3\x2\x2\x2");
		sb.Append("\x398\x36E\x3\x2\x2\x2\x398\x374\x3\x2\x2\x2\x398\x37C\x3\x2");
		sb.Append("\x2\x2\x398\x38B\x3\x2\x2\x2\x399\x91\x3\x2\x2\x2\x39A\x39B");
		sb.Append("\a\x13\x2\x2\x39B\x39C\aV\x2\x2\x39C\x3A7\a\x44\x2\x2\x39D\x39E");
		sb.Append("\a\v\x2\x2\x39E\x3A7\a\x44\x2\x2\x39F\x3A0\a\a\x2\x2\x3A0\x3A7");
		sb.Append("\a\x44\x2\x2\x3A1\x3A3\a\x17\x2\x2\x3A2\x3A4\x5.\x18\x2\x3A3");
		sb.Append("\x3A2\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2\x3A4\x3A5\x3\x2\x2\x2");
		sb.Append("\x3A5\x3A7\a\x44\x2\x2\x3A6\x39A\x3\x2\x2\x2\x3A6\x39D\x3\x2");
		sb.Append("\x2\x2\x3A6\x39F\x3\x2\x2\x2\x3A6\x3A1\x3\x2\x2\x2\x3A7\x93");
		sb.Append("\x3\x2\x2\x2\x3A8\x3AA\x5\x96L\x2\x3A9\x3A8\x3\x2\x2\x2\x3A9");
		sb.Append("\x3AA\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AC\a\x2\x2\x3");
		sb.Append("\x3AC\x95\x3\x2\x2\x2\x3AD\x3AE\bL\x1\x2\x3AE\x3AF\x5\x98M\x2");
		sb.Append("\x3AF\x3B4\x3\x2\x2\x2\x3B0\x3B1\f\x3\x2\x2\x3B1\x3B3\x5\x98");
		sb.Append("M\x2\x3B2\x3B0\x3\x2\x2\x2\x3B3\x3B6\x3\x2\x2\x2\x3B4\x3B2\x3");
		sb.Append("\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x97\x3\x2\x2\x2\x3B6\x3B4");
		sb.Append("\x3\x2\x2\x2\x3B7\x3BC\x5\x9AN\x2\x3B8\x3BC\x5P)\x2\x3B9\x3BC");
		sb.Append("\x5\x32\x1A\x2\x3BA\x3BC\a\x44\x2\x2\x3BB\x3B7\x3\x2\x2\x2\x3BB");
		sb.Append("\x3B8\x3\x2\x2\x2\x3BB\x3B9\x3\x2\x2\x2\x3BB\x3BA\x3\x2\x2\x2");
		sb.Append("\x3BC\x99\x3\x2\x2\x2\x3BD\x3BF\x5\x34\x1B\x2\x3BE\x3BD\x3\x2");
		sb.Append("\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C2");
		sb.Append("\x5\\/\x2\x3C1\x3C3\x5\x9CO\x2\x3C2\x3C1\x3\x2\x2\x2\x3C2\x3C3");
		sb.Append("\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4\x3C5\x5\x88\x45\x2\x3C5");
		sb.Append("\x9B\x3\x2\x2\x2\x3C6\x3C7\bO\x1\x2\x3C7\x3C8\x5\x32\x1A\x2");
		sb.Append("\x3C8\x3CD\x3\x2\x2\x2\x3C9\x3CA\f\x3\x2\x2\x3CA\x3CC\x5\x32");
		sb.Append("\x1A\x2\x3CB\x3C9\x3\x2\x2\x2\x3CC\x3CF\x3\x2\x2\x2\x3CD\x3CB");
		sb.Append("\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x9D\x3\x2\x2\x2\x3CF");
		sb.Append("\x3CD\x3\x2\x2\x2m\xA3\xAA\xBB\xC5\xD2\xDF\xE1\xEC\xF7\x107");
		sb.Append("\x115\x117\x123\x125\x131\x133\x145\x147\x153\x155\x160\x16B");
		sb.Append("\x176\x181\x18C\x195\x19C\x1A8\x1AF\x1B4\x1B9\x1BE\x1C4\x1CE");
		sb.Append("\x1D6\x1DD\x1E1\x1EA\x1F5\x1FA\x1FF\x203\x207\x209\x213\x218");
		sb.Append("\x21C\x222\x229\x22D\x231\x239\x242\x24C\x254\x25B\x265\x26A");
		sb.Append("\x26D\x274\x283\x28F\x292\x294\x29C\x29E\x2A3\x2A7\x2AC\x2B0");
		sb.Append("\x2B3\x2BC\x2C4\x2CE\x2D6\x2D8\x2E2\x2E7\x2F7\x2FB\x302\x307");
		sb.Append("\x314\x31D\x326\x331\x339\x346\x353\x357\x362\x367\x36A\x37F");
		sb.Append("\x383\x387\x38F\x393\x398\x3A3\x3A6\x3A9\x3B4\x3BB\x3BE\x3C2");
		sb.Append("\x3CD");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
